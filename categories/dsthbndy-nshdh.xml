<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>شاهینیسم (دسته‌بندی نشده)</title><link>http://shahinism.github.io</link><description>بعضی وقت‌ها باید قبل از این که بتوانید راه بروید‌، بدوید‌!</description><lastBuildDate>Mon, 20 May 2013 11:52:59 GMT</lastBuildDate><generator>nikola</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>تولید خودکار فلش کارت انگلیسی به فارسی برای Anki با کمی شل اسکریپت</title><link>http://shahinism.github.io/posts/blog13910923twlyd-khwdkhr-flsh-khrt-nglysy-bh-frsy.html</link><description>&lt;p&gt;&lt;/p&gt;&lt;p&gt;حقیقتش آدم خیلی تنبلی هستم‌. آن‌قدر تنبل که گاها وقتی می‌توانم کارم را فقط با یک کمی کار بیشتر راحت کنم‌، کالیبر بالا مانع می‌شود و آن کار را هر چقدر هم تکراری و خسته کننده باشد انجام می‌دهم‌ (دروغ می‌گویم‌، حالش نباشد بی‌خیالش می‌شوم ;-)) دیروز در حین خواندن یک کتاب یودم که دیدم حجم لغت‌های انگلیسی‌ای که نمی‌دانم، در جملات کتاب دارد غوغا می‌کند‌. قبلا به مدل‌های مختلف سعی کرده‌ام که این لغت‌ها را یاد بگیرم‌. روی کاغذ ردیفشان کرده‌ام‌، جعبهٔ &lt;a title="جعبهٔ لایتنر در ویکی پدیا" href="http://fa.wikipedia.org/wiki/%D8%AC%D8%B9%D8%A8%D9%87_%D9%84%D8%A7%DB%8C%D8%AA%D9%86%D8%B1" target="_blank"&gt;فلش کارت &lt;/a&gt;مقوایی ساخته‌ام‌‌، چه می‌دانم روی یک تکه کاغذ نوشته‌ام‌! ولی هیچ‌کدام‌شان برایم عادت نشده‌اند‌. این می‌شود که کلا بعد از مدتی بی‌خیال این روش‌ها می‌شوم‌.
اما مدتی است که دوباره به &lt;a title="anki official website" href="http://ankisrs.net/" target="_blank"&gt;Anki&lt;/a&gt; روی آورده‌ام‌. آن وقت‌ها نتوانسته بودم که نصبش کنم و خورده بود توی ذوقم‌. ضمن این که بعد‌ها هم پس از نصب چند باگ کوچک به فنایم داده بود‌. ولی الان مدتی می‌شود که با هم رفیق شده‌ایم‌. ولی خوب چون همانطور که قبلا ذکرش رفت کالیبر بالاست‌، خودم حال کارت درست کردن ندارم. این است که از فلش کارت‌های خوبی که ایمان&lt;a title="صفحهٔ دانلود فلش کارت‌ها" href="http://flashcard.linuxreview.ir/get-flashcard/" target="_blank"&gt; آماده می‌کند&lt;/a&gt; استفاده می‌کنم‌.&lt;/p&gt;
&lt;p&gt;ولی خوب‌، ایمان هم کالیبرش بالاست‌. شاید هم کمال همنشین… این است که بعد از یک مدتی که خیلی ذوق داشت و همه مدل فلش کارت آماده می‌کرد‌، چون سختش بود‌، کم کم فرمت‌های آماده شده را آنقدر کم کرد که این اواخر دیگر تنها kvtml آماده می‌کرد‌. فرمتی که آماده کردنش خیلی آسان‌تر از باقی قضایا بود‌، ولی مال نرم‌افزار بسیار به درد نخور kwordquiz میزکار KDE بود! این بود که دو سه هفته پیش‌، این ایده به سرم افتاد که اول کمی از کار ایمان کم کنم‌! بندهٔ خدا زحمت زیادی می‌کشد و به هر حال حیف است که فقط مصرف کننده باشم‌. این شد که با پایتون اسکریپتی برایش نوشتم که kvtml‌ها را خیلی راحت به anki تبدیل کند‌. ذکر خیر این اسکریپت را خودش &lt;a title="kvtml 2 anki in emanlog" href="http://emanlog.com/?p=292" target="_blank"&gt;کرده‌&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;معنی این اسکریپت قبلی این بود که حالا حالاها خوراک اضافه خواهم داشت‌. ولی حقیقتش کلمه‌های ایمان‌، حداقل تا این‌جایی که من دیده‌ام‌، اکثریتشان‌ در سطح من نیست‌. اگر هم باشد من خودم خیلی خیلی بیشتر از آن‌ها را در کتاب‌ها و مطالبی که روزانه می‌خوانم می‌بینم! مساله این‌جاست که از روی تنبلی‌، فقط به زور دیکشنری (mdic روی میزکار، google translate روی اینترنت و mobidic روی موبایل) ترجمه‌شان می‌کنم و بعد از چند جمله معنی‌شان از یادم می‌پرد‌. خسته کننده است‌. این طور نیست؟&lt;/p&gt;
&lt;p&gt;خوب کمی با خودم دو دو تا چهارتا می‌کنم و یادم می‌آید که روی آن اسکریپت تبدیل kvtml دوست خوبم anki یک فرمت متنی خیلی تمیزی را به عنوان ورودی می‌گرفت و فلش کارتش می‌کرد‌. (اصلا آن اسکریپت بر همین مبنا کار می‌کند) یک همچین نحوی:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;English;انگلیسی
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;که البته می‌توان بهش فایل‌های چند رسانه‌ای هم چسباند و یا با HTML خوشگلش کرد‌. خوب این یعنی می‌شود هر وقت که کلمه‌ای ترجمه می‌کنم‌، ترمینالم را باز کنم و مثلا از یک همچین دستوری استفاده کنم:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"English;انگلیسی"&lt;/span&gt; &amp;amp;gt;&amp;amp;gt; deck.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;یا شایدم همیشه یک ادیتور زیر دستم باز بگذارم‌! ولی نه فکر کنم همان اولی بهتر است‌ (چون ترمینال در دسترس‌تر است). ولی خوب این این‌قدر‌ها هم خوشگل نیست‌. ضمن این که مثل فلش کارت‌های ایمان صدا و عکس ندارد‌. حالا عکس به کنار‌، تلفظ برای من از نان شب واجب‌تر است‌. بعضی کلمات آن‌قدر به چشمم سخت می‌آیند که اصلا نمی‌خوانمشان D:&lt;/p&gt;
&lt;p&gt;خوب تلفظ را هم می‌شود مشکلش را با espeak حل کرد‌ (هر چند صدای روباتیکش خیلی نچسب است!). جهنم‌، شروع می‌کنم به نوشتن یک اسکریپت‌. این ایده‌، در میانهٔ راه آن‌قدر این در و آن در می‌خورد‌. آن‌قدر از ابزار‌ها و وسایلی که بقیه نوشته‌اند توش استفاده می‌شود که می‌شود اسکریپتی که اگر اینترنت دم دستش باشد‌، خودش عبارت وارد شده را با استفاده از google translate ترجمه می‌کند و تلفظ google translate را می‌چسباند تنگش و کار را تمام می‌کند‌.&lt;/p&gt;
&lt;p&gt;چون می‌دانم همه حوصلهٔ خواندن نکات فنی اسکریپت را ندارند‌، این پست را در دو بخش می‌نویسم‌. بخش اول‌، برای کاربرانی که فقط می‌خواهند از آن استفاده کنند‌، و بخش دوم برای اشاره به نکات فنی کار ;-)&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h5&gt;معرفی:&lt;/h5&gt;
&lt;p&gt;این اسکریپت برای اجرا به fribidi, ffmpeg, curl و html2text نیاز دارد‌. سه تای اول که عموما وضع و حال‌شان مشخص است‌. اما این آخری یک اسکریپت پایتون است که می‌توانید از مخازن‌تان نصب کنید‌. ولی من پیشنهاد می‌کنم به جای آن distribute یا pysetuptools پایتون را نصب کنید و پس از آن با دستور زیر سر و ته این اسکریپت را هم بیاورید:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;sudo pip install html2text
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;دلیلش هم ساده است‌. مخازن پایتون خیلی سریع‌تر از مخازن توزیع‌تان به روز می‌شوند و صد البته در آخر کار مدیریت این بسته‌ها با آن‌ها آسان‌تر است‌! حالا اسکریپت را از &lt;a title="fcgenerator on github" href="https://github.com/shahinism/Scripts/blob/master/Shell/fcgenerator.sh" target="_blank"&gt;این‌جا&lt;/a&gt; دانلود کنید و به صورت زیر چشم‌تان را به جمالش روشن کنید:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;chmod +x fcgenerator.sh

./fcgenerator.sh -w &lt;span class="s2"&gt;"Some english word"&lt;/span&gt; -d firstDeck
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;مقدار Some english word که به اپراتور ‎-w نسبت داده شده‌، همان عبارت انگلیسی‌ای است که می‌خواهیم ترجمه‌اش کنیم‌. مقدار firstDeck هم اسم Deckای (مجموعه فلش کارت) که می‌خواهیم این لغت به آن اضافه شود است‌. اگر اینترنت‌تان وصل است که برنامه مثل پلنگ کارش را انجام می‌دهد و فایل‌ها را تولید می‌کند‌. اکر هم نه که می‌توانید به روش‌های دیگری کلمه را اضافه کنید‌.&lt;/p&gt;
&lt;p&gt;مثلا فرض کنید که شما از ترجمهٔ google translate حال نمی‌کنید‌. خوب راحت است‌. کافی است که با استفاده از اپراتور ‎-t ترجمهٔ خودتان را به لغت بچسبانید‌. همین‌طور می‌توانید به جای تلفظ گوگل‌، از espeak استفاده کنید‌. برای این کار هم از اپراتور ‎-e استفاده می‌کنید. طرز کارش ساده است‌، این‌طور نیست؟&lt;/p&gt;
&lt;p&gt;بعد از اجرای فرمان بالا اسکریپت برای ما یک فایل firstDeck.txt و یک دایرکتوری firstDeck.media ساخته‌. اگر کلمات دیگری هم داشتید و خواستید به این فلش کارت اضافه کنید‌، کافیست به دایرکتوری که این فایل‌ها در آن قرار دارند بروید و فقط مقدار ‎-w دستور را با کلمهٔ جدید‌تان عوض کنید‌.&lt;/p&gt;
&lt;p&gt;حالا نوبت نصب Deck جدید‌تان روی Ankiاست‌. اگر Deck‌های شما هم در مسیر ‎~/.anki/decks قرار دارد (اگر توزیع‌تان خوشمزگی نکرده و جای دیگر نریخته باشد‌، بعید می‌دانم این مسیر فرق کند) می‌توانید با دستور زیر دایرکتوری مدیا را در این مسیر کپی کنید:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;./fcgenerator.sh -i firstDeck
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;اگر هم نه که دستی کپی کنید! حالا Anki را باز کنید‌ و از منوی File گزینهٔ Import را انتخاب کنید‌. در قسمت نام Deck همان چیزی را بنویسید که برای اپراتور ‎-d قرار دادید (در این‌جا firstDeck) و سپس فایل firstDeck.txt را به آن بخورانید‌. تمام شد‌. فلش‌کارت‌های جدید‌تان آماده‌اند‌.&lt;/p&gt;
&lt;p&gt;طرز کار اسکریپت خیلی ساده است‌. دیگر باقی‌اش به خودتان بستگی دارد که چطور از آن استفاده می‌کنید‌. می‌توانید برای راحتی کار آن را به PATHتان انتقال دهید و یا یک alias برای خیلی راحت‌تر شدنش تعریف کنید‌. یا حتی می‌توانید یک اسکریپت کوچک دیگر بنویسید که برای لیستی از لغات این فرمان را ایجاد کند و به صورت خودکار یک لیست بلند بالا از لغات + ترجمه + تلفظ‌شان داشته باشید‌! البته جنبه هم در کنارش خوب است‌. با Google طرفید‌. همچین هم زیاده روی نکنید که IPتان را به خاطر فرستادن درخواست‌های زیادی بلاک کند‌، یا کلا در گوگل ترنسلیت را گل بگیرد! ها در ضمن‌، می‌توانید با استفاده از ‎-T (به چه زبانی) و ‎-F (از چه زبانی) به جای حالت پیش‌فرض انگلیسی به فارسی از زبان‌های دیگر هم استفاده کنید.&lt;/p&gt;
&lt;h5&gt;چطور کار می‌کند؟&lt;/h5&gt;

&lt;p&gt;خوب اکثر دستورات اگر سواد شل اسکریپتینگ داشته باشید‌، سر راست‌اند‌. من در این‌جا فقط به چیز‌های جالبی که از کد‌های دیگران بهره گرفتم اشاره می‌کنم‌. یکی از خوشگل‌ترین‌شان برایم این تابع بود:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;function &lt;/span&gt;deps&lt;span class="o"&gt;(){&lt;/span&gt;

&lt;span class="nv"&gt;DEPENDENCIES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;

&lt;span class="nv"&gt;deps_ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;YES

&lt;span class="k"&gt;for &lt;/span&gt;dep in &lt;span class="nv"&gt;$DEPENDENCIES&lt;/span&gt;

&lt;span class="k"&gt;do&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; ! which &lt;span class="nv"&gt;$dep&lt;/span&gt; &amp;amp;amp;&amp;amp;gt;/dev/null; &lt;span class="k"&gt;then&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"$dep is not installed. please install it and try again."&lt;/span&gt;

&lt;span class="nv"&gt;deps_ok&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;NO

&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;"$deps_ok"&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"NO"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;; &lt;span class="k"&gt;then&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;"Unmet dependencies ^"&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;"Aborting!"&lt;/span&gt;

&lt;span class="nb"&gt;exit &lt;/span&gt;1

&lt;span class="k"&gt;else&lt;/span&gt;

&lt;span class="k"&gt;return &lt;/span&gt;0

&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;خوب می‌دانم چیز ساده‌ای است. ولی حقیقتش من عقلم نمی‌رسید که می‌توان به این خوشگلی پیش‌نیاز‌های اسکریپت را بررسی کرد‌. این اسکریپت را از &lt;a title="bash support function check dependencies" href="http://www.snabelb.net/content/bash_support_function_check_dependencies" target="_blank"&gt;این لینک&lt;/a&gt; برداشتم و کمی دستکاری‌اش کردم تا به اسکریپت من بیاید‌.&lt;/p&gt;
&lt;p&gt;بخش بعدی ماجرا‌، هیولا‌ترین قسمت اسکریپت است‌. Google مثل همیشه احمق‌بازی در آورده و ما را از داشتن یک API ساده محروم کرده‌. ولی خوب این مرحمت گوگل باعث نشده که &lt;a title="access google translate from a terminal" href="http://crunchbang.org/forums/viewtopic.php?id=17034" target="_blank"&gt;این دوست &lt;/a&gt;ندیده و نشنیدهٔ عزیزمان دست از انگولک گوگل و نجات ما بردارد‌.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nv"&gt;result&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;curl -s -i --user-agent &lt;span class="s2"&gt;""&lt;/span&gt; -d &lt;span class="s2"&gt;"sl=$FROMT"&lt;/span&gt; -d &lt;span class="s2"&gt;"tl=$TARGETT"&lt;/span&gt; --data-urlencode &lt;span class="s2"&gt;"text=$WORD"&lt;/span&gt; http://translate.google.com&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;awk &lt;span class="s1"&gt;'/Content-Type: .* charset=/ {sub(/^.*charset=["'&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;']?/,""); sub(/[ "'&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;'].*$/,""); print}'&lt;/span&gt; &amp;amp;lt;&amp;amp;lt;&amp;amp;lt;&lt;span class="s2"&gt;"$result"&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;TRANSLATION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;iconv -f &lt;span class="nv"&gt;$encoding&lt;/span&gt; &amp;amp;lt;&amp;amp;lt;&amp;amp;lt;&lt;span class="s2"&gt;"$result"&lt;/span&gt; | awk &lt;span class="s1"&gt;'BEGIN {RS="&lt;/span&gt;



&lt;span class="s1"&gt;"};/&amp;amp;lt;span[^&amp;amp;gt;]* id=["'&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;']?result_box["'&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;']?/'&lt;/span&gt; | html2text&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;مساله ساده است‌. ما صفحه وبی داریم که می‌توانیم در جای خاصی از آن بگوییم که ترجمهٔ چه کلمه‌ای را می‌خواهیم و این صفحه در مقابل در جای خاص دیگری از خودش ترجمهٔ کلمه را به ما نشان می‌دهد‌. اسم این صفحه http://translate.google.com است که چون از متد GET (اگر درست یادم باشد) استفاده می‌کند‌، می‌توان با تغییر متغیر‌هایش نتیجهٔ کلمات مختلف را در آن دید‌. ضمن این که اضافه کنم که این دوستمان از روش جالبی برای پیدا کردن این متد‌ها (غیر از نگاه کردن به URL استفاده کرده) که هر چند به نظرم استفاده‌اش در این‌جا بی‌خود است‌، ولی کاربرد‌های باحال‌تری می‌توان برایش پیدا کرد. فعلا برای فهمیدن ماجرا از زبان خودش به صفحه‌ای که در بالا گفتم رجوع کنید‌!&lt;/p&gt;
&lt;p&gt;در ادامه کافیست که از صفحه‌ای که گرفته‌ایم‌، آن المنت خاصی که می‌خواهیم را جدا کنیم (جایی که ترجمه نشان داده می‌شود) و به html2text بخورانیم که نهایتا فقط متن به ما نشان داده شود‌. ولی از آن‌جا که html2text فقط یک فرمت یونیکد را می‌فهمد و فرمت کدینگ صفحهٔ نتیجهٔ گوگل با توجه به زبان پاسخ متفاوت است (چرا؟) با استفاده از iconv سعی می‌کند که کدینگ درست را به خوردش بدهد‌. و حالا چون نمی‌خواهد هر بار دستی وارد کند که از کدام کدینگ تبدیل کن‌، با awk سر صفحه را می‌خواند و کدینگ صفحه را پیدا می‌کند ;-)&lt;/p&gt;
&lt;p&gt;و آخرین بخش ماجرا مربوط می‌شود به دانلود صدا. برای این کار از &lt;a title="google translate download sound" href="https://gist.github.com/873364" target="_blank"&gt;این اسکریپت&lt;/a&gt; کمک گرفتم‌. ولی چون نمی‌خواستم نتیجهٔ کار خیلی شلخته شود (دو فرمت متفاوت در صورت استفاده از espeak و google translate در کنار هم) با ffmpeg کلیه فرمت‌ها را به ‎.ogg تغییر دادم که آقایمان نیز از ما راضی باشد.&lt;/p&gt;</description><category>دسته‌بندی نشده</category><guid>http://shahinism.github.io/posts/blog13910923twlyd-khwdkhr-flsh-khrt-nglysy-bh-frsy.html</guid><pubDate>Thu, 13 Dec 2012 18:43:13 GMT</pubDate></item><item><title>دریافت اطلاعات سیستم بدون استفاده از Conky، یا چطور با عصای جادو‌ی لینوکس یک Conky بسازیم!</title><link>http://shahinism.github.io/posts/blog13910904dryft-tlt-systm-bdwn-stfdh-z-conky.html</link><description>&lt;p&gt;&lt;/p&gt;&lt;p&gt;همانطور که می‌دانید‌، چند ماهی می‌شود که از i3 استفاده می‌کنیم‌، ولی در i3bar به جای i3status (به دلیل سادگی بیش از اندازه‌اش D:) از Conky بهره می‌گیرم. کانکی اطلاعات خیلی خوبی ارائه می‌دهد و کار‌های جالبی هم می‌توان روی خروجی‌اش انجام داد‌. ولی وقتی قرار است آن را به i3status بخورانم‌، باید از آپشن shell روی Conky استفاده کنم که دیگر خبری از آن جینگولک بازی‌های معروف Conky نیست‌. همه چیز خیلی ساده می‌شود. تصویر زیر وضعیت فعلی i3barام را نشان می‌دهد‌:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://dl.dropbox.com/u/25017694/Blog-photos/ConkyOni3.png"&gt;&lt;img class=" " title="ConkyOni3" src="http://dl.dropbox.com/u/25017694/Blog-photos/ConkyOni3.png" alt="" width="540" height="44"&gt;&lt;/a&gt; برای دیدن در اندازهٔ بزرگ کلیک کنید&lt;/p&gt;
&lt;p&gt;و فعلا چند اشکال به آن وارد است‌: اول این که دارم از یک برنامهٔ خیلی گنده‌، برای یک کار ساده استفاده می‌کنم‌. دوم این که در حالت شل قدرت زیادی برای انگولک خروجی Conky ندارم (مثلا آن قسمت درصد استفاده از CPU برای درصد‌های مختلف تک رقمی‌، دو رقمی و سه رقمی‌، طول‌های متفاوتی می‌گیرد و کمی قضیه را لوس می‌کند) و سوم این که اگر به ماندن در همین وضعیت رضایت دهم‌، سوادم هیچ وقت زیاد نمی‌شود‌ D:&lt;/p&gt;
&lt;p&gt;پس تصمیم می‌گیرم که خروجی فعلی کانکی را (البته با چند تغییر کوچک) با ابزار ساده‌تری جایگزین کنم‌. خوب کار تقریبا پیچیده و سختی به نظر می‌رسد (وقتی که از لینوکس هیچ چیز ندانم) اما خوب همین Conky هم اطلاعاتش را از روی هوا نمی‌گیرد که! از طرفی مسالهٔ زبان پایش به میان می‌آید‌. به چه زبانی بنویسم؟ من که ته تهش پایتون را (آن هم دست و پا شکسته) می‌دانم‌.&lt;/p&gt;
&lt;p&gt;بعد از کمی جستجو و دو دو تا چهار تا با دانسته‌های قبلی‌ام‌، مساله را این‌طور حل می‌کنم (از راست به چپ تصویر):&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;زمان: روی توزیعم با دستور date می‌توانم زمان حاضر را به طور کامل ببینم و البته می‌توانم آن را به صورت دلخواهم فرمت کنم‌.&lt;/li&gt;
    &lt;li&gt;صدا: حقیقتش کشف کردم نیازی به این ندارم و زیاد دنبال واکشی مقدارش نگشتم‌. ولی مطمئنم یک راه ساده برای فهمیدنش هست ;-)&lt;/li&gt;
    &lt;li&gt;مجموع آپلود/دانلود نشست حاضر (TU/TD): خوب بعد از کمی جستجو‌، با دوست قدیمی ولی ناشناخته‌ام proc آشنا شدم‌، که از قرار خیلی خیلی‌، بیشتر از چیز‌هایی که می‌خواهم را بهم می‌رساند‌. فعلا ‎/proc/net/dev جواب تا این‌جای کار است‌.&lt;/li&gt;
    &lt;li&gt;سرعت دانلود/آپلود (D/U): راستش را بخواهید‌، این یکی مرا خیلی در کف نگه داشت‌! فکر می‌کردم باید جایی مثلا در proc برای این قضیه باشد‌. ولی نکته‌اش این‌جا بود که من اصلا نفهمیده بودم که چه می‌خواهم‌. که البته با تقلب از روی این &lt;a title="code-project-monitor-proc-python-and-clutter" href="http://www.tuxradar.com/content/code-project-monitor-proc-python-and-clutter" target="_blank"&gt;آموزش&lt;/a&gt; آن هم به صورت اتفاقی قضیه را درک کردم و شبیه سازی (البته نکاتی هم باقی می‌ماند که در ادامه مطرح می‌کنم).&lt;/li&gt;
    &lt;li&gt;وضعیت رم: خوب این یکی هم مثل date. می‌دانستم که دستوری به اسم free برای این‌کار ساخته شده‌. ولی باید کمی خروجی‌اش را انگولک می‌کردم و چیزی که می‌خواستم را بیرون می‌کشیدم.&lt;/li&gt;
    &lt;li&gt;وضعیت CPU: این یکی ترکیبی از همهٔ کار‌هاییست که در بالا باید انجام دهم به علاوه کلی چیز جدید که باید یاد بگیرم‌. فایل ‎/proc/stat وضعیت فعلی CPU را در خودش نگه می‌دارد که با اسکریپتی که در &lt;a title="cpu usage monitor script on github" href="https://github.com/moisespsena/linux-cpu-usage/blob/master/cpu-usage-monitor.sh" target="_blank"&gt;این‌جا&lt;/a&gt; دیدم فهمیدم که چطور وضعیت کل CPU را واکشی کنم‌. اما من وضعیت کل را نمی‌خواستم‌، بلکه به دنبال وضعیت تک تک هسته‌ها بودم که خوب باید دست و بالم رو کثیف‌تر می‌کردم ;-)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;خوب تمام این کار‌ها را می‌شود با پایتون هم انجام داد (با هر زبان دیگری هم می‌شود) ولی‌، دم دستی‌ترین چیز ممکن shell scripting است‌. هم احتمالا کمتر از مفسر پایتون به سیستم فشار می‌آورد و هم این که اصلا چیزی در موردش نمی‌دانم (نه این که اصلا‌، ولی نه در حد یک اسکریپت نویس ;-)). این می‌شود که طی دو روز گذشته‌، تمام فکر و ذکرم را می‌گذارم روی نوشتن این اسکریپت‌، تا هم چیز یاد بگیرم‌، و هم مستقل‌تر شوم ;-)&lt;/p&gt;
&lt;p&gt;اسکریپت حاضر است و از &lt;a title="sysdata script on github" href="https://github.com/shahinism/Scripts/blob/master/Shell/sysdata.sh" target="_blank"&gt;این‌جا&lt;/a&gt; قابل دریافت. در ادامه ذره‌، ذره به بررسی‌اش می‌پردازیم‌:&lt;/p&gt;
&lt;h5&gt;تاریخ&lt;/h5&gt;

&lt;p&gt;خوب اولین چیزی که لازم داشتیم‌، خروجی گرفتن زمان فعلی سیستم بود که گفتیم با دستور date قادر به انجامش هستیم‌. به صورت زیر:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nv"&gt;date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;date +&lt;span class="s2"&gt;"%a %Y.%m.%d %H:%M"&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;نکتهٔ این دستور آن‌جاست که من برای مقدار دهی به متغیر date، از خروجی یک دستور استفاده کرده‌ام (کاری که در ادامه خیلی زیاد انجام می‌دهم‌). برای این کار کافیست دستور مورد نظر را در ‎$(‎)‎ بنویسیم‌. به همین راحتی!&lt;/p&gt;
&lt;h5&gt;اطلاعات شبکه&lt;/h5&gt;

&lt;p&gt;اولین چیز‌هایی که می‌خواهیم‌، این است که بفهمیم چقدر دانلود یا آپلود کرده‌ایم‌. که همانطور که گفتم این اطلاعات را در فایل ‎/proc/net/dev می‌توان یافت‌. همینطور‌، با محاسبهٔ این که در یک ثانیهٔ گذشته‌، چقدر دانلود/آپلود کرده‌ایم‌، می‌توان سرعت دانلود بر ثانیه را محاسبه کرد. این است که برای تمیزی کار‌، اول یک تابع می‌نویسیم که از proc ذکر شده‌، مقدار بایت‌های ارسالی یا دریافتی را واکشی کند:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;function &lt;/span&gt;getNetBytes

&lt;span class="o"&gt;{&lt;/span&gt;

&lt;span class="nv"&gt;Brecived&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;cat &lt;span class="nv"&gt;$netInterface&lt;/span&gt; | grep &lt;span class="s2"&gt;"eth0"&lt;/span&gt; | awk &lt;span class="s1"&gt;'{print($2)}'&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;Btransmited&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;cat &lt;span class="nv"&gt;$netInterface&lt;/span&gt; | grep &lt;span class="s2"&gt;"eth0"&lt;/span&gt; | awk &lt;span class="s1"&gt;'{print($10)}'&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;متغیر ‎$netInterface اشاره به همان فایل ‎/proc/net/dev می‌کند که در اول اسکریپت تعریفش کرده‌ام‌. بعد هم با grep تنها خطی که مربوط به اینترفیسی که می‌خواهم است را جدا می‌کنم (eth0) و حالا با awk خانهٔ شمارهٔ ۲ را برای بایت‌های دریافت شده‌، و خانهٔ شمارهٔ ۱۰ این خروجی را برای بایت‌های فرستاده شده جدا می‌کنم‌. این کار را به روش‌های دیگری هم می‌شد انجام داد‌، ولی به نظرم با این روش‌، خط‌های کمتری تایپ کردم ;-)&lt;/p&gt;
&lt;p&gt;حالا با دستورات زیر‌، چیز‌هایی که می‌خواهم را محاسبه می‌کنم:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nv"&gt;dlSpeed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="k"&gt;$((&lt;/span&gt; &lt;span class="nv"&gt;$Brecived&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;$oldBRecived&lt;/span&gt; &lt;span class="k"&gt;))&lt;/span&gt; | awk &lt;span class="s1"&gt;'{printf( "%.2f", $1/1024)}'&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;upSpeed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="k"&gt;$((&lt;/span&gt; &lt;span class="nv"&gt;$Btransmited&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;$oldBTransmited&lt;/span&gt; &lt;span class="k"&gt;))&lt;/span&gt; | awk &lt;span class="s1"&gt;'{printf( "%.2f", $1/1024)}'&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;traffic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"$Brecived $Btransmited"&lt;/span&gt; | awk &lt;span class="s1"&gt;'{printf( "%.2f", ($1+$2)/1024/1024 )}'&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;طی این دستورات‌، از قابلیت متغیر‌گیری به صورت ‎$num و همینطور‌، پرینت فرمت شده (برای نمایش حداکثر دو رقم اعشار) awk استفاده کرده‌ام. این کار‌ها با dc هم قابل انجام بود‌، ولی خروجی به تمیزی awk نبود‌. همانطور که می‌بینید در این دستورات از متغیر‌های ‎$oldBRecived و ‎$oldBTransmited استفاده شده‌ که در واقع وضعیت یک ثانیه قبل دانلود/آپلود را در خود نگاه می‌دارند‌. تنها کافیست دستورات فوق را هر یک ثانیه اجرا کنیم تا خروجی درست را بگیریم‌. (حلقهٔ کامل این دستورات در آخر مطلب توضیح داده می‌شود)&lt;/p&gt;
&lt;p&gt;نکته‌ای که می‌ماند دقت این محاسبه است‌. حقیقتش همانطور که گفتم من این روش را از این‌جا [link] یاد گرفتم. اما دقیقا همان را پیاده سازی نکردم. مساله سر زمان محاسبه بود. نمی‌دانم چرا نویسنده در آن‌جا از epoch (تاریخ ۱/۱/۱۹۷۰) استفاده کرده بود (خوشحال می‌شوم اگر کسی می‌داند به من هم توضیح دهد‌.) نویسنده در آن‌جا می‌گوید مساله سر چند کیلوبایت است و از این حرف‌ها!&lt;/p&gt;
&lt;h5&gt;وضعیت RAM&lt;/h5&gt;

&lt;p&gt;گفتم که دستور free -m این‌کارها را انجام می‌دهد‌، پس:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;function &lt;/span&gt;getRamInfo

&lt;span class="o"&gt;{&lt;/span&gt;

&lt;span class="nv"&gt;totalMemory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;free -m | grep &lt;span class="s2"&gt;"Mem:"&lt;/span&gt; | awk &lt;span class="s1"&gt;'{printf( "%.2f", $2/1024)}'&lt;/span&gt; &lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;usedMemory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;free -m | grep &lt;span class="s2"&gt;"buffers/cache"&lt;/span&gt; | awk &lt;span class="s1"&gt;'{printf( "%.2f", $3/1024)}'&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;memInPercent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"$totalMemory $usedMemory"&lt;/span&gt; | awk &lt;span class="s1"&gt;'{printf( "%.0f", $2/($1/100)) }'&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;فکر نکنم نکته‌ای باقی مانده باشد که قبلا توضیح نداده باشم‌. پس دیگر توضیح نمی‌دهم!&lt;/p&gt;
&lt;h5&gt;وضعیت CPU&lt;/h5&gt;

&lt;p&gt;خوب گفتم که برای یادگیری این کار‌، از این اسکریپت[link] استفاده کردم. ولی این اسکریپت تنها وضعیت کل CPU را بر می‌گرداند‌. من آن را طوری تغییر دادم که هر بار‌، آدرس هسته‌ای که می‌خواهم اطلاعاتش را بدانم در ورودی بگیرد‌، و فقط همان را هسته را محاسبه کند و در خروجی نشان دهد:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;function &lt;/span&gt;getCpuInfo&lt;span class="o"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;{&lt;/span&gt;

&lt;span class="nv"&gt;CORE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;

&lt;span class="nv"&gt;addr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"^cpu${CORE}"&lt;/span&gt;

&lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;CPU&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;cat /proc/stat | grep &lt;span class="nv"&gt;$addr&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# Get the total CPU statistics.&lt;/span&gt;

&lt;span class="nb"&gt;unset &lt;/span&gt;CPU&lt;span class="o"&gt;[&lt;/span&gt;0&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="c"&gt;# Discard the "cpu" prefix.&lt;/span&gt;

&lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;IDLE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CPU&lt;/span&gt;&lt;span class="p"&gt;[4]&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="c"&gt;# Get the idle CPU time.&lt;/span&gt;



&lt;span class="c"&gt;# Calculate the total CPU time.&lt;/span&gt;

&lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;TOTAL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0

&lt;span class="k"&gt;for &lt;/span&gt;VALUE in &lt;span class="s2"&gt;"${CPU[@]}"&lt;/span&gt;; &lt;span class="k"&gt;do&lt;/span&gt;

&lt;span class="nb"&gt;let&lt;/span&gt; &lt;span class="s2"&gt;"TOTAL=$TOTAL+$VALUE"&lt;/span&gt;

&lt;span class="k"&gt;done&lt;/span&gt;



&lt;span class="c"&gt;# Catch current cores last state&lt;/span&gt;

&lt;span class="nv"&gt;PREV_IDLE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;eval echo&lt;/span&gt; &lt;span class="se"&gt;\P&lt;/span&gt;REV_IDLE&lt;span class="nv"&gt;$CORE&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;PREV_TOTAL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;eval echo&lt;/span&gt; &lt;span class="se"&gt;\P&lt;/span&gt;REV_TOTAL&lt;span class="nv"&gt;$CORE&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;



&lt;span class="c"&gt;# Calculate the CPU usage since we last checked.&lt;/span&gt;

&lt;span class="nb"&gt;let&lt;/span&gt; &lt;span class="s2"&gt;"DIFF_IDLE=$IDLE-$PREV_IDLE"&lt;/span&gt;

&lt;span class="nb"&gt;let&lt;/span&gt; &lt;span class="s2"&gt;"DIFF_TOTAL=$TOTAL-$PREV_TOTAL"&lt;/span&gt;

&lt;span class="nb"&gt;let&lt;/span&gt; &lt;span class="s2"&gt;"DIFF_USAGE=(1000*($DIFF_TOTAL-$DIFF_IDLE)/$DIFF_TOTAL+5)/10"&lt;/span&gt;



&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="se"&gt;\P&lt;/span&gt;REV_TOTAL&lt;span class="nv"&gt;$CORE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"$TOTAL"&lt;/span&gt;

&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="se"&gt;\P&lt;/span&gt;REV_IDLE&lt;span class="nv"&gt;$CORE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"$IDLE"&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;برای این کار از یک متغیر برای تابع استفاده می‌کنم و مقدارش را به متغیر CORE اختصاص می‌دهم‌. با استفاده از این آدرس یک عبارت با قائده (Regex) به صورت "‎^cpu${CORE}‎" می‌سازم‌. این عبارت باقائده با خطوطی که در اولشان عبارت cpuN را دارند مطابقت می‌کند‌. و سپس با استفاده از داده‌هایی که دارم یک آرایه با استفاده از پردازش فایل ‎/proc/stat می‌سازم و آن را به متغیر CPU نسبت می‌دهم‌. خوب حالا چون اولین خانهٔ این آرایه اسم CPU را دارد‌، و به درد محاسبات بعدی نمی‌خورد‌، آن را از آرایه بیرون می‌اندازم (unset CPU[0]‎) و همین‌طور مقدار خانهٔ IDLE را هم در متغیری به همین نام ذخیره می‌کنم‌.&lt;/p&gt;
&lt;p&gt;با جمع کردن تمامی مقادیر موجود در آرایهٔ CPU می‌توانم کل وضعیت کارکرد CPU را به دست آورم‌. این می‌شود که به صورت زیر این کار را انجام می‌دهم:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;TOTAL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0

&lt;span class="k"&gt;for &lt;/span&gt;VALUE in &lt;span class="s2"&gt;"${CPU[@]}"&lt;/span&gt;; &lt;span class="k"&gt;do&lt;/span&gt;

&lt;span class="nb"&gt;let&lt;/span&gt; &lt;span class="s2"&gt;"TOTAL=$TOTAL+$VALUE"&lt;/span&gt;

&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ساده است این‌طور نیست؟ آن let آن‌جا همان کار ‎(())$ را می‌کند‌. حالا وقت انجام محاسبات است‌. چون هر بار نیاز است که وضعیت قبلی CPU مورد نظر را داشته باشیم‌، پس لازم است برای هر CPU متغیر‌های مربوطه را بسازیم‌. که این کار را با دستورات زیر انجام می‌دهیم:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="se"&gt;\P&lt;/span&gt;REV_TOTAL&lt;span class="nv"&gt;$CORE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"$TOTAL"&lt;/span&gt;

&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="se"&gt;\P&lt;/span&gt;REV_IDLE&lt;span class="nv"&gt;$CORE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"$IDLE"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;این دستور eval فوق‌العاده است‌. با استفاده از آدرس CPU فعلی (CORE) متغیر‌های مورد نظرم را می‌سازد و مقادیر مربوطه را درشان ذخیره می‌کند‌. اما چون نمی‌خواهم زیادی کثیف کاری شود‌، قبل از انجام محاسبات‌، متغیر‌هایی که ساخته‌ایم را به یک نام ثابت در می‌آورم تا کارم را آسان کنم:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nv"&gt;PREV_IDLE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;eval echo&lt;/span&gt; &lt;span class="se"&gt;\P&lt;/span&gt;REV_IDLE&lt;span class="nv"&gt;$CORE&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;PREV_TOTAL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;eval echo&lt;/span&gt; &lt;span class="se"&gt;\P&lt;/span&gt;REV_TOTAL&lt;span class="nv"&gt;$CORE&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;حالا این دو متغیر‌، وضعیت قبلی CPU را در خود نگه می‌دارند‌. پس نوبت این است که محاسباتم را انجام دهم:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nb"&gt;let&lt;/span&gt; &lt;span class="s2"&gt;"DIFF_IDLE=$IDLE-$PREV_IDLE"&lt;/span&gt;

&lt;span class="nb"&gt;let&lt;/span&gt; &lt;span class="s2"&gt;"DIFF_TOTAL=$TOTAL-$PREV_TOTAL"&lt;/span&gt;

&lt;span class="nb"&gt;let&lt;/span&gt; &lt;span class="s2"&gt;"DIFF_USAGE=(1000*($DIFF_TOTAL-$DIFF_IDLE)/$DIFF_TOTAL+5)/10"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;چیز خاصی نیست دیگر‌، همه چیز روشن است ;-)&lt;/p&gt;
&lt;h5&gt;پایان کار&lt;/h5&gt;

&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;while &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;;

&lt;span class="k"&gt;do&lt;/span&gt;

getNetBytes

getRamInfo

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt; &lt;span class="nv"&gt;COUNT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0; COUNT &amp;amp;lt; &lt;span class="nv"&gt;$CORES&lt;/span&gt;; COUNT++ &lt;span class="o"&gt;))&lt;/span&gt;;&lt;span class="k"&gt;do&lt;/span&gt;

getCpuInfo &lt;span class="nv"&gt;$COUNT&lt;/span&gt;

&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="se"&gt;\c&lt;/span&gt;pu&lt;span class="nv"&gt;$COUNT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$DIFF_USAGE&lt;/span&gt;

&lt;span class="k"&gt;done&lt;/span&gt;



&lt;span class="nv"&gt;dlSpeed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="k"&gt;$((&lt;/span&gt; &lt;span class="nv"&gt;$Brecived&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;$oldBRecived&lt;/span&gt; &lt;span class="k"&gt;))&lt;/span&gt; | awk &lt;span class="s1"&gt;'{printf( "%.2f", $1/1024)}'&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;upSpeed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="k"&gt;$((&lt;/span&gt; &lt;span class="nv"&gt;$Btransmited&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;$oldBTransmited&lt;/span&gt; &lt;span class="k"&gt;))&lt;/span&gt; | awk &lt;span class="s1"&gt;'{printf( "%.2f", $1/1024)}'&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;traffic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"$Brecived $Btransmited"&lt;/span&gt; | awk &lt;span class="s1"&gt;'{printf( "%.2f", ($1+$2)/1024/1024 )}'&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;



&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;

&lt;span class="s2"&gt;"CPU: %3s,%3s,%3s,%3s | RAM: %sG/%sG (%s%%) | LAN: ↓: %4sƘ ↑: %4sƘ T↕: %6s | %s\n"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;

&lt;span class="s2"&gt;"$cpu0"&lt;/span&gt; &lt;span class="s2"&gt;"$cpu1"&lt;/span&gt; &lt;span class="s2"&gt;"$cpu2"&lt;/span&gt; &lt;span class="s2"&gt;"$cpu3"&lt;/span&gt; &lt;span class="s2"&gt;"$usedMemory"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;

&lt;span class="s2"&gt;"$totalMemory"&lt;/span&gt; &lt;span class="s2"&gt;"$memInPercent"&lt;/span&gt; &lt;span class="s2"&gt;"$dlSpeed"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;

&lt;span class="s2"&gt;"$upSpeed"&lt;/span&gt; &lt;span class="s2"&gt;"$traffic"&lt;/span&gt; &lt;span class="s2"&gt;"$date"&lt;/span&gt;

&lt;span class="nv"&gt;oldBRecived&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$Brecived&lt;/span&gt;

&lt;span class="nv"&gt;oldBTransmited&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$Btransmited&lt;/span&gt;

sleep 1

&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;حالا نوبت این است که کار را تمام کنم‌. یک حلقهٔ همیشه درست می‌سازم و فقط بهش می‌گویم بعد از این که همهٔ کار‌هایت را انجام دادی یک ثانیه استراحت کن (برای این که سرعت اینترنت را درست محاسبه کند‌، این مقدار ضروری است). بر همین اساس تابع‌های getNetBytes و getRamInfo را صدا می‌کنم تا متغیر‌های جدیدشان را تولید کنند‌. اما در مورد تابع getCpuInfo قضیه کمی فرق دارد‌. قرار است که چهار بار این تابع را با متغیر‌های متفاوت صدا کنیم و نتیجهٔ حاصله‌اش را در متغیرهای جداگانه ذخیره کنیم‌. این است که آن حلقهٔ for سر و کله‌اش پیدا می‌شود‌. یک حلقهٔ for به سبک C که خداییش به نظرم کامل‌ترین حلقه‌های for است D: حالا تابع را درش به صورت getCpuInfo $COUNT صدا می‌زنم و متغیر ‎$DIFF_USAGE که همان طرصد مصرف است را به یک متغیر به صورت cpuN نسبت می‌دهم‌. این N همان آدرس هسته است.&lt;/p&gt;
&lt;p&gt;همان‌طور که می‌بینید در ادامه محاسبهٔ سرعت اینترنت می‌آید که قبلا توضیحش داده‌ام‌. printf را فعلا ول کنید و به دو خط بعدش نگاهی کنید‌. همان دو متغیری که وضعیت قبلی ترافیک را نگه می‌دارند‌. فکر کنم دیگر همه چیز روشن شده باشد‌.&lt;/p&gt;
&lt;p&gt;حالا برسیم به آن printf. حتما می‌پرسید چرا از echo استفاده نکردم‌. echo خوب است‌، ولی خیلی ساده هم هست‌. آن مشکل کنترل فضای پرینت که در Conky گرفتارش بودم‌، این‌جا هم پیدا می‌شد‌. یک نگاهی به این خروجی بیاندازید:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;CPU: 48,3,40,3 | RAM: 1.11G/1.95G &lt;span class="o"&gt;(&lt;/span&gt;57%&lt;span class="o"&gt;)&lt;/span&gt; | LAN: ↓:0.00Ƙ ↑:0.00Ƙ T↕:221.20 | Sat 2012.11.24 14:41

CPU: 8,4,76,4 | RAM: 1.11G/1.95G &lt;span class="o"&gt;(&lt;/span&gt;57%&lt;span class="o"&gt;)&lt;/span&gt; | LAN: ↓:0.00Ƙ ↑:0.00Ƙ T↕:221.20 | Sat 2012.11.24 14:41

CPU: 24,5,64,6 | RAM: 1.11G/1.95G &lt;span class="o"&gt;(&lt;/span&gt;57%&lt;span class="o"&gt;)&lt;/span&gt; | LAN: ↓:0.00Ƙ ↑:0.00Ƙ T↕:221.20 | Sat 2012.11.24 14:41
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;می‌بینید‌، هنوز هم طول خروجی کم و زیاد می‌شود که اصلا خوب نیست‌. این است که باید دنبال دستوری باشم که خروجی را آرایش کند و بیرون بدهد‌. printf سالاری که از زمان یادگیری C می‌شناسم این کار را برایم می‌کند‌. کافیست فضای متغیر‌ها را به صورت ‎%Ns که N همان طول مینیموم رشته است را مشخص کنم‌. خودش باقی کار‌ها را انجام می‌دهد‌. خوب همین دیگر‌. کارمان تمام شد‌. مرحلهٔ بعدی این است که یک خروجی json دار درست حسابی بسازم که i3 بتواند رنگی رنگی‌اش کند ;-)&lt;/p&gt;
&lt;p&gt;&lt;a href="http://dl.dropbox.com/u/25017694/Blog-photos/SysdataOni3.png"&gt;&lt;img title="SysdataOni3" src="http://dl.dropbox.com/u/25017694/Blog-photos/SysdataOni3.png" alt="" width="527" height="50"&gt;&lt;/a&gt; برای دیدن در اندازهٔ بزرگ‌تر کلیک کنید&lt;/p&gt;</description><category>awk</category><category>bash</category><category>printf</category><category>shell scripting</category><category>بررسی</category><category>برنامه نویسی</category><category>حل مشکل</category><category>دسته‌بندی نشده</category><category>نرم افزار</category><category>کدباز</category><category>گنو/لینوکس</category><guid>http://shahinism.github.io/posts/blog13910904dryft-tlt-systm-bdwn-stfdh-z-conky.html</guid><pubDate>Sat, 24 Nov 2012 15:07:09 GMT</pubDate></item><item><title>پروژهٔ نگار و مصائبش</title><link>http://shahinism.github.io/posts/blog13910521prwjh-ngr-w-msybsh.html</link><description>&lt;p&gt;&lt;/p&gt;&lt;h5&gt;معرفی&lt;/h5&gt;
&lt;a title="negar on github" href="http://shahinism.github.com/Negar/" target="_blank"&gt;نگار&lt;/a&gt; قرار است یک ابزار ویرایش و تصحیح متن باشد‌. یعنی یک فایل متنی دریافت کند‌، اشتباهات نگارشی رایج را تصحیح کند‌، غلط‌های املایی‌اش را بگیرد و در خروجی یک متن فارسی تمیز را ارائه دهد‌. نمونه‌ای از کارکرد و امکانات فعلی نگار را می‌توانید در تصویر زیر ببینیند (البته متن تست را از صفحهٔ وب &lt;a href="http://virastar.heroku.com/" target="_blank"&gt;ویراستار&lt;/a&gt; به عاریت گرفته‌ام D:) :
&lt;p style="text-align: center;"&gt;&lt;a href="https://raw.github.com/shahinism/Negar/master/Negar-State.png"&gt;&lt;img class="aligncenter" src="https://raw.github.com/shahinism/Negar/master/Negar-State.png" alt="" width="560" height="249"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;نگار با پایتون نوشته شده‌، اما به احتمال زیاد کتابخانهٔ ویرایشش به چند زبان دیگر (نظیر PHP و javascript برگردانده خواهد شد). از این رو نگار روی &lt;a title="negar on github" href="https://github.com/shahinism/Negar" target="_blank"&gt;گیت‌هاب&lt;/a&gt; منتشر می‌شود و شدیدا پذیرای ایده‌های نو و صد البته همکاری شما در توسعه‌اش است‌.&lt;/p&gt;
&lt;p&gt;و از همه مهمتر این که نگار توسط یک تازه‌کار در حال توسعه است و می‌تواند کمک خوبی برای تازه‌کاران یا مشتاقان یادگیری برنامه نویسی باشد‌.&lt;/p&gt;
&lt;h5&gt;مصائب توسعه نگار&lt;/h5&gt;

&lt;p&gt;آن‌هایی که مرا از نزدیک می‌شناسند احتمالا می‌دانند که مدت‌هاست مشتاقم که برنامه‌نویس شوم ولی درصدی تنبلی و درصدی دیگر پیچیدگی امر برنامه‌نویسی مانع از رسیدن به این علاقه‌ام شده‌. بار‌ها به سمت زبان‌های C‎+‎+‎‌، C، PHP، Javascript و ... کشیده شده‌ام‌، سینتکس‌شان را یادگرفته‌ام‌، تعدادی مسائل و الگوریتم پایه‌ای را حل کرده‌ام ولی آخر سر نتوانسته‌ام که به خودم اجازهٔ برنامه‌نویس بودن بدهم D:&lt;/p&gt;
&lt;p&gt;خوبی این تلاش‌های به بن‌بست رسیده برایم این بوده که بفهمم برنامه‌نویسی را توی کتاب‌ها یاد نمی‌دهند D: (البته منظورم سینتکس و این‌ها نیست‌ها!). یاد گرفتن واقعی از وقتی شروع می‌شود که شروع به نوشتن پروژه‌ای می‌کنید‌. ایدهٔ توسعهٔ نگار را مدت زیادی بود که در سر می‌پروراندم‌. خصوصا از وقتی که ایمان &lt;a title="ویراستیار" href="http://virastyar.ir" target="_blank"&gt;ویراستیار&lt;/a&gt; را به عنوان جایگزینی برای &lt;a title="ویراسباز" href="http://virasbaz.persianlanguage.ir/" target="_blank"&gt;ویراستباز&lt;/a&gt; که من استفاده می‌کردم معرفی کرد و گفت که ای کاش یک نسخهٔ کلاینت هم برای این کار روی لینوکس بود‌. (درست که ویراستیار یک نسخهٔ کلاینت دارد‌، ولی آن با زبان جهنمی C#‎ نوشته شده که نصبش برای من هفت خوان می‌طلبد!)&lt;/p&gt;
&lt;p&gt;این اشتیاق به قوت خودش باقی ماند تا این که &lt;a href="http://www.swaroopch.org/notes/Python" target="_blank"&gt;کتاب یک بایت از پایتون&lt;/a&gt; را تمام کردم‌. کتاب خیلی خوبی بود‌‌ و خیلی از مسائل را به سادگی و روشنی توضیح می‌داد‌. این بود که ما هم جو این که هر کاری را می‌توانیم به راحتی با پایتون انجام دهیم گرفتمان و زدیم به کار نوشتن نگار‌!&lt;/p&gt;
&lt;p&gt;اولین الگوریتم پیاده‌سازی شده افتضاح بود‌! بعضی ایده‌هایش هنوز هم به نظرم جالب می‌آید ولی حجم کار بی‌خودی زیادی را به هر تابع واگذار کرده بودم که در نهایت هم نتیجهٔ دلچسبی در خروجی ظاهر نمی‌شد‌. این بود که کمی ذلسرد شدم و ناامیدانه به دنبال ابزاری گشتم که برای همین هدف نوشته شده باشد و بتوانم با بررسی سورسش مفهوم طراحی و پیاده‌سازی یک برنامه را بهتر درک کنم‌. سورس ویراستیار جدای از گندگی بیش از اندازه‌اش برای من‌، به زبانی بود که اصلا نمی‌فهمیدمش‌! جستجو‌ها نتجه نداد تا وقتی که روی صفحهٔ گیت &lt;a href="https://github.com/behnam" target="_blank"&gt;بهنام اسفهبد&lt;/a&gt; با پروژهٔ ویراستار آشنا شدم‌. نویسندهٔ پروژه&lt;a href="https://github.com/aziz/virastar-app" target="_blank"&gt; عزیز &lt;/a&gt;(که فکر کنم توسعه دهندهٔ بالاترین هم باشد) کد &lt;a href="https://github.com/aziz/virastar%5C" target="_blank"&gt;کتابخانه&lt;/a&gt; را به روبی نوشته بود و یک نمونهٔ تحت وب که خروجی فوق‌العاده‌ای هم از ویرایش متن داشت با آن ساخته بود‌.&lt;/p&gt;
&lt;p&gt;سادگی و کامنت شدن بیشتر توابع این کتابخانه را به شروع خوبی برای من تبدیل کرد‌. تصمیم گرفتم که آن را با پایتون دوباره نویسی کنم تا هم سواد خودم را (که بعد‌تر فهمیدم اصلا ندارم D:) محک بزنم و هم یه شروع برای پروژهٔ نگار ایجاد کنم‌.&lt;/p&gt;
&lt;p&gt;کار از آن چیزی که به نظر می‌رسید سخت‌تر بود‌. تفاوت‌های زبان روبی و پایتون گاها در سینتکس خیلی کوچک بودند ولی در عملکرد زمین تا آسمان متفاوت بودند‌.&lt;/p&gt;
&lt;p&gt;نکته‌ای که بیش از همه به نظرم جالب آمد طرز تفکر من نسبت به عبارات باقائده بود‌. قبلا در وبلاگ دوست خوبم علی با آن‌ها آشنا شده بودم‌. ولی زیاد دل به یاد گرفتن‌شان ندادم و فکر هم نمی‌کردم آن‌چنان دانستن‌شان به کارم بیاید‌. حقیقتش را بخواهید بیش از ۹۰ درصد ویراستار نگار بر پایهٔ همین regex‌ها بنا شده ;-)&lt;/p&gt;
&lt;p&gt;یا از طرف دیگر unicode ها که در عمل آن‌قدر بهشان عادت کرده بودم که نمی‌دیدمشان‌، خودشان را در این‌جا بیش از پیش به رخ می‌کشیدند‌.&lt;/p&gt;
&lt;h5&gt;کمک‌های Stackoverflow و Github&lt;/h5&gt;

&lt;p&gt;این که می‌گویند همیشه ابزار درست نتیجه را بهتر می‌کند (نقل از خودم) حقیقت محض است‌. در حین نوشتن نگار به مشکلاتی بر می‌خوردم که هیچ‌جوره با منطقم جور در نمی‌آمد‌. سرچ در گوگل هم خصوصا این که با فارسی در ارتباط بود و طبیعتا نمی‌شود دلی به نتایجش خوش کرد چندان فایده‌ای نداشت‌ (البته چند باری به جای فارسی دنبال Arabic‌ها گشتم که راهنمایی‌های خوبی برای یونیکد نوشتن در پایتون به دست آوردم). در چنین شرایطی بود که &lt;a href="http://stackoverflow.com/" target="_blank"&gt;stackoverflow&lt;/a&gt; و کاربرانش به دادم رسیدند‌. دو سوالی که پرسیدم را آن‌چنان کامل و متناسب با شرایط مختلف جواب دادند که عمرا نمی‌شود در هیچ کتابی به این صراحت جوابی پیدا کرد D:&lt;/p&gt;
&lt;p&gt;اما حل مشکلات به این راحتی‌ها هم نبود‌. بار‌ها پیش می‌آمد که شروع به ویرایش یک تابع می‌کردم و آن‌قدر تغییر می‌دادم که در نهایت نه ایده‌هایم برای حل مشکل کارساز بود و هم کل کد را خراب کرده بودم‌. این‌جا بود که Git کمک می‌کرد‌. فوق‌العاده است‌. فوق‌العاده‌. کدام ابزار دیگری را می‌شناسید که هم یک ورژن کنترل عالی باشد‌، هم به راحتی قابلیت مستندسازی پروژه را دو دستی تقدیمتان کند؟ (منظورم wiki و page است). در آینده بیشتر در مورد شگفتی‌های گیت و مخصوصا &lt;a href="http://github.com" target="_blank"&gt;گیت‌هاب&lt;/a&gt; می‌نویسم‌!&lt;/p&gt;
&lt;h5&gt;نتیجه:&lt;/h5&gt;

&lt;p&gt;نتیجهٔ کار که دیگر معلوم است‌. اما در آخر باز هم اعلام می‌کنم که اگر علاقه به همکاری در یک پروژهٔ آزاد فارسی دارید تنها زحمتی که باید به خودتان بدهید‌، این است که پروژه را از گیت‌هاب فورک کنید ;-)&lt;/p&gt;</description><category>github</category><category>Python</category><category>virastar</category><category>برنامه نویسی</category><category>دسته‌بندی نشده</category><category>نرم افزار</category><category>نگار</category><category>پایتون</category><category>کدباز</category><guid>http://shahinism.github.io/posts/blog13910521prwjh-ngr-w-msybsh.html</guid><pubDate>Sat, 11 Aug 2012 11:18:53 GMT</pubDate></item><item><title>چ‌چ‌چ (۷)‌: بستن یک حساب کاربری در گنو‌/‌لینوکس</title><link>http://shahinism.github.io/posts/blog13900911chchch-7bstn-ykh-hsb-khrbry-dr-gnw.html</link><description>&lt;p&gt;&lt;/p&gt;&lt;p&gt;دستور passwd برای تغییر رمز عبور حساب‌ یک کاربر یا گروه مورد استفاده قرار می‌گیرد‌. یک کاربر عادی تنها قادر است که رمز عبور اکانت خودش را عوض کند‌، اما کاربر اصلی (‌ریشه‌) می‌تواند رمز عبور هر حسابی را عوض کند‌. شما با استفاده از این دستور می‌توانید یک حساب را قفل کرده و یا قفلش را باز کنید‌.
&lt;/p&gt;&lt;h4&gt;قفل یک حساب گنو‌/‌لینوکس‌:&lt;/h4&gt;
&lt;p&gt;نحو‌:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;passwd -l &lt;span class="o"&gt;(&lt;/span&gt;username&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;حساب را قفل می‌کند‌. در واقع آپشن‌* ‏‎-l با تغییر رمز عبور یک حساب به یک مقدار رمز شده‌، حساب را از دسترسی خارج می‌کند‌.&lt;/p&gt;
&lt;h5&gt;مثال‌:&lt;/h5&gt;

&lt;p&gt;قفل کردن حسابی به اسم shahin‌. با کاربر ریشه وارد می‌شویم و دستور زیر را وارد می‌کنیم‌:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="c"&gt;# passwd -l shahin&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;قفل‌گشایی یک حساب گنو‌/‌لینوکس:&lt;/h4&gt;

&lt;p&gt;نحو‌:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;passwd -u &lt;span class="o"&gt;(&lt;/span&gt;username&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;حساب را قفل‌گشایی می‌کند‌. این آپشن ‎-u رمز حساب رو به مقدار قبلی‌اش باز می‌گرداند و آن را دوباره فعال می‌کند‌.&lt;/p&gt;
&lt;h5&gt;مثال‌:&lt;/h5&gt;

&lt;p&gt;برای باز‌گشایی یک حساب کاربری به اسم shahin‌، اول با کاربر ریشه وارد می‌شویم‌، و دستور زیر را وارد می‌کنیم‌:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="c"&gt;# passwd -u shahin&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;*‌: هر چه سعی کردم کلمه جایگزینی برای آپشن (‌انتخاب‌) به ذهنم نرسید که جمله‌بندی را خراب نکند‌. به بزرگی خودتان ببخشید‌!&lt;/p&gt;
&lt;p style="text-align: center;"&gt;&lt;a title="Linux locking an account on cyberciti" href="http://www.cyberciti.biz/faq/linux-locking-an-account/" target="_blank"&gt;منبع&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description><category>دسته‌بندی نشده</category><category>چی‌؟ چرا‌؟ چگونه‌؟</category><category>گنو‌، لینوکس</category><guid>http://shahinism.github.io/posts/blog13900911chchch-7bstn-ykh-hsb-khrbry-dr-gnw.html</guid><pubDate>Fri, 02 Dec 2011 08:05:30 GMT</pubDate></item><item><title>چ‌چ‌چ‌ (۶)‌: چگونه در خط فرمان گنو‌/‌لینوکس بزرگنمایی صفحه نمایش‌ام را پیدا کنم‌؟</title><link>http://shahinism.github.io/posts/blog13900910chchch-6-chgwnh-dr-kht-frmn-gnwl.html</link><description>&lt;p&gt;&lt;/p&gt;&lt;p&gt;این سوال به میزان وضوع یک تصویر بر روی صفحه نمایش اشاره می‌کند‌. بزرگنمایی صفحه (Screen resolution) به تعداد نقطه‌ها یا پیکسل‌های موجود در سراسر صفحهٔ نمایشتان اشاره می‌کند‌. برای مثال‌، وقتی می‌گویید برزگنمایی ۶۴۰x۴۸۰ پس منظورتان این است که ششصد و چهل نقطه در هر یک از چهارصد و هشتاد خط وجود دارد، یعنی‌، ۳۰۷ کیلو پیکسل‌.
برای پیدا کردن این مشخصه می‌توانید از یکی از دو روش زیر کمک بگیرید‌:&lt;/p&gt;
&lt;p&gt;۱) استفاده از دستور xdpyinfo:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;xdpyinfo | grep &lt;span class="s1"&gt;'dimensions:'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;که نتیجه‌ای به شکل زیر را باز می‌گرداند‌:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;dimensions: 1024x768 pixels &lt;span class="o"&gt;(&lt;/span&gt;347x260 millimeters&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;۲) استفاده از دستور xrandr:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;xrandr | grep ‘*’
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;که نتیجه‌ای به صورت زیر را باز می‌گرداند‌:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;xrandr: Failed to get size of gamma &lt;span class="k"&gt;for &lt;/span&gt;output default

1024x768 50.0* 51.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;که البته منظور خط بالایی احتمالا این است که به خاطر قدیمی بودن مانیتور من‌، خروجی گاما (‌!) را اندازه گیری نمی‌کند‌ (یعنی به چه درد می‌خوره‌؟).&lt;/p&gt;
&lt;p&gt;البته بدیهی است که در محیط‌های دسکتاپ مختلف‌، با رجوع به بخش تنظیمات می‌توان به این اطلاعات دست یافت‌، ولی این روش‌ها طبیعتا سرراست‌تر است ;-)&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;a title="How to find resolution on cyberciti" href="http://www.cyberciti.biz/faq/how-do-i-find-out-screen-resolution-of-my-linux-desktop/" target="_blank"&gt;منبع&lt;/a&gt;&lt;/p&gt;</description><category>دسته‌بندی نشده</category><category>چی‌؟ چرا‌؟ چگونه‌؟</category><category>گنو‌، لینوکس</category><guid>http://shahinism.github.io/posts/blog13900910chchch-6-chgwnh-dr-kht-frmn-gnwl.html</guid><pubDate>Thu, 01 Dec 2011 15:00:23 GMT</pubDate></item></channel></rss>