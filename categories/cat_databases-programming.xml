<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>شاهین (databases, programming)</title><link>https://5hah.in/</link><description></description><atom:link type="application/rss+xml" href="https://5hah.in/categories/cat_databases-programming.xml" rel="self"></atom:link><language>fa</language><lastBuildDate>Mon, 23 May 2016 14:22:57 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>وقایع نگاری یک دیباگ: وضعیت عجیب MongoDB</title><link>https://5hah.in/posts/multithreading-bug-experiment-on-PyMongo-driver.html</link><dc:creator>شاهین</dc:creator><description>&lt;div&gt;&lt;p&gt;استفاده از Mongo و Python برای ایجاد یک RESTFUL API دیگر آن‌چنان هم سناریوی دور از انتظاری نیست، خصوصا این که اگر کمی جستجو کنید می‌بینید که افراد زیادی اشاره به پایداری و Performance همچین استکی می‌کنند و راه‌کار‌های بسیار زیادی نیز برای بهتر کردن آن ارائه کرده‌اند. در یکی از پروژه‌های تیم &lt;a class="reference external" href="http://www.foundersbuddy.com/"&gt;فاندرز&lt;/a&gt; ما هم با استکی به شرح زیر، RESTFUL API مربوط به اپلیکیشمان را طراحی‌کرده‌ایم:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://mongodb.org"&gt;Mongo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python 3&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://api.mongodb.org/python/"&gt;PyMongo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://djangoproject.com"&gt;Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://memcached.org"&gt;Memcached&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://uwsgi.readthedocs.org/"&gt;uWsgi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://nginx.com"&gt;Nginx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;در چهار ماه اول لانچ API، هیچ مشکلی در داده‌های دریافتی و پردازش‌های مورد نیاز مشاهده نمی‌شد. Performance کلی استک هم در حد قابل قبولی جواب‌گوی نیاز‌ها بود. تا این که با تغییری در نحوهٔ ارائهٔ خدمات پروژهٔ اصلی‌، حجم کاربران سرویس به نحو چشم‌گیری بالا رفت و ماجرا آغاز شد!&lt;/p&gt;
&lt;p&gt;مشکل ایجاد شده‌، نه در Performance سیستم بود و نه حتی می‌توان گفت که پایداری API زیر سوال رفته بود. قضیه از این قرار بود که درخواست‌هایی که منجر به خواندن داده از پایگاه دادهٔ سرویس بود‌ (Mongo) در زمان‌های خاصی از روز‌ (که عمدتا تایم شلوغی برای پروژه بود) تنها تکه‌ای از داده‌های مورد انتظار را بر می‌گرداندند. برای مثال اگر ما انتظار داشتیم که کوئری X روی دیتابیس‌، شامل ۲۰ سند (Document منظور آبجکت‌های دیتابیس Mongo است) باشد‌، بعضی از درخواست‌ها نتیجه‌ای در بازه‌ای کوچکتر از ۲۰ را بر می‌گرداند.&lt;/p&gt;
&lt;p&gt;قضیه جایی بحرانی می‌شد که این نتیجه را برای یک بازهٔ زمانی مشخص Cache می‌کردیم، و خوب در صورت خراب شدن یکی از این کوئری‌ها‌، کاربران در آن مدت‌، نتیجهٔ ناقص را مشاهده می‌کردند. جدای از این، هیچ ضعف مشخصی از سیستم برای تراکنش‌ها مشاهده نمی‌شد.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://5hah.in/posts/multithreading-bug-experiment-on-PyMongo-driver.html"&gt;بیشتر بخوانید…&lt;/a&gt; (7 دقیقه برای خواندن باقی مانده)&lt;/p&gt;&lt;/div&gt;</description><category>mongodb</category><category>multithreading</category><category>nosql</category><category>performance</category><category>PyMongo</category><category>python</category><guid>https://5hah.in/posts/multithreading-bug-experiment-on-PyMongo-driver.html</guid><pubDate>Mon, 09 Nov 2015 06:28:21 GMT</pubDate></item></channel></rss>