<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>شاهینیسم (lisp)</title><link>http://shahinism.github.io</link><description>بعضی وقت‌ها باید قبل از این که بتوانید راه بروید‌، بدوید‌!</description><lastBuildDate>Sun, 12 May 2013 20:05:58 GMT</lastBuildDate><generator>nikola</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>این ایمکس دوست داشتنی (بالانس کردن پرانتز‌ها)</title><link>http://shahinism.github.io/posts/blog13920127yn-ymkhs-dwst-dshtny-blns-khrdn-prn.html</link><description>&lt;p&gt;&lt;/p&gt;&lt;p&gt;یکی از دلایل اصلی Syntax error‌ها بالانس نبودن پرانتز‌هاست (منظورم پرانتز‌، کروشه‌، آکولاد‌، &amp;lt;&amp;gt;‌، گیومه و … است). خوب از آن‌جایی که بنیاد ایمکس براساس Lisp است و Lisp به خاطر پرانتز‌هایش معروف شده (خیلی‌ها به شوخی می‌گن که Lisp مخفف Lost in stupid parentheses هست)‌، مطمئنا باید راهی برای حل این مشکل داشته باشد.
برای این کار خطوط زیر را داخل ‎.emacs وارد می‌کنیم:&lt;/p&gt;


&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;electric-pair-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;show-paren-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;خوب با خط اول‌، به ایمکس می‌گوییم‌، هر وقت ما پرانتزی (که شامل تمام علاماتی است که در بالا اشاره کردیم) باز کردیم‌، خودت به صورت خودکار‌، کاراکتر بستن آن را وارد کن. همین‌طور در خط دوم مجبورش می‌کنیم وقتی روی پرانتزی هستیم‌، اگر جفتی برایش وجود دارد‌، آن را برایمان نمایش دهد (هر دو طرف پرانتز سبز می‌شود معمولا‌. با توجه به تنظیمات پوستهٔ ایمکس)‌. اگر نه‌، سمتی که رویش ایستاده‌ایم را قرمز کن تا بفهمیم تنهاست ;-)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://dl.dropboxusercontent.com/u/25017694/Blog-photos/emacsparenmatch.png"&gt;&lt;img alt="نمونه‌ای از نمایش جفت پرانتز در ایمکس" src="https://dl.dropboxusercontent.com/u/25017694/Blog-photos/emacsparenmatch.png" width="328" height="42"&gt;&lt;/a&gt; نمونه‌ای از نمایش جفت پرانتز در ایمکس&lt;/p&gt;
&lt;p&gt;بخش اول کار که معلوم است. ولی این بخش دوم قابلیت‌های جالب دیگری هم دارد. مثلا می‌توان با(setq show-paren-delay 0) میزان زمانی که طول می‌کشد تا جفت کاراکتر پرانتزمان را نمایش دهد را تعیین کنیم. از قرار به طور پیش‌فرض مقداری Delay تعیین شده که ما با این دستور می‌توانیم صفرش کنیم. من این کار را نکردم چون به نظرم سر موقع نمایش داده می‌شوند.&lt;/p&gt;
&lt;p&gt;همین‌طور می‌توان با(setq show-paren-style 'MODE) تعیین کرد که نمایش هر جفت پرانتز چطور باشد. که برای این کار باید عبارت MODE را با یکی از سه گزینهٔ زیر جایگزین کنیم:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;parenthesis&lt;/strong&gt; که مد پیش‌فرض است و فقط پرانتز‌های دو طرف را نمایش می‌دهد.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;expression&lt;/strong&gt; که علاوه بر پرانتز‌ها‌، متن درونشان هم برجسته می‌شود.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;mixed&lt;/strong&gt; که اگر پرانتز‌ها بالانس باشند مثل مد parenthesis عمل می‌کند و گرنه مثل expression.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;به همین سادگی می‌توانید آن‌طور که می‌خواهید این رفتار ایمکس را هم کنترل کنید.&lt;/p&gt;
&lt;p&gt;من این آموزش را نمی‌دانم از کجای اینترنت یاد گرفتم. ولی این &lt;a title="Emacsfu" href="http://emacs-fu.blogspot.de/2009/01/balancing-your-parentheses.html" target="_blank"&gt;وبلاگ&lt;/a&gt; هم به آن اشاره کرده که وبلاگ عالی‌ای هم هست. پیشنهاد می‌کنم از دستش ندهید. خیلی خیلی تکنیک‌های جالبی با آن یاد خواهید گرفت.&lt;/p&gt;</description><category>Emacs</category><category>Emacs-fu</category><category>lisp</category><category>Parenthesis</category><category>ایمکس</category><category>برنامه نویسی</category><category>نرم افزار</category><category>کدباز</category><guid>http://shahinism.github.io/posts/blog13920127yn-ymkhs-dwst-dshtny-blns-khrdn-prn.html</guid><pubDate>Tue, 16 Apr 2013 12:24:21 GMT</pubDate></item><item><title>چگونه ایمکس‌مان را تربیت کنیم (قسمت دوم)</title><link>http://shahinism.github.io/posts/blog13910502chgwnh-ymkhsmn-r-trbyt-khnym-qsmt-dw.html</link><description>&lt;p&gt;&lt;/p&gt;&lt;a title="چگونه ایمکس‌مان را تربیت کنیم (قسمت اول)" href="http://shahinism.com/blog/1391/04/23/%da%86%da%af%d9%88%d9%86%d9%87-%d8%a7%db%8c%d9%85%da%a9%d8%b3%e2%80%8c%d9%85%d8%a7%d9%86-%d8%b1%d8%a7-%d8%aa%d8%b1%d8%a8%db%8c%d8%aa-%da%a9%d9%86%db%8c%d9%85-%d9%82%d8%b3%d9%85%d8%aa-%d8%a7%d9%88/" target="_blank"&gt;در قسمت قبل&lt;/a&gt; نکات ساده و پایه‌ای را بیان کردیم و یک کلید ساده را جایگزین کلید قبلی پرش به پنجرهٔ بعدی کردیم‌. در این قسمت می‌خواهیم کمی هیجان کار را بالا ببریم‌.
&lt;h5&gt;این آرگومان‌های دوست داشتنی&lt;/h5&gt;
&lt;p&gt;یکی از اجزای جدا نشدنی توابع برنامه نویسی‌، آرگومان‌هایی هستند که می‌توان با استقاده از آن‌ها کارکرد توابع را تحت تاثیر قرار داد‌. توابع ایمکس هم از این قائده مستثنا نیستند‌. برای مثال می‌توان با C-u 3 C-x C-n نشانگر را به سه پنجره بعد از پنجرهٔ حاضر منتقل کرد‌. می‌خواهید امتحان کنید؟ ایمکس‌تان را باز کنید و آن را به چهار پنجره تقسیم کنید و فرمان بالا را وارد کنید‌. همان‌طور که می‌بینید تابع other-window که در این‌جا مورد بحث ماست‌، با استفاده از آرگومان دریافتی توسط C-u که همان عدد سه است‌، می‌تواند به سه پنجره بعد بپرد و ما را از فراخوانی پیاپی‌اش نجات دهد‌. حالا نکته این‌جاست که این تابع آرگومان منفی‌ای مثل ‎-۱ را هم می‌پذیرد‌. و احتمالا این دقیقا همان چیزی است که ما برای حرکت در پنجره‌ها به سمت چپ نیاز داریم‌. یک بار امتحانش کنید: C-u -1 C-x C-n&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;نکته:&lt;/strong&gt; اکثر توابع موجود در ایمکس با استفاده از مقادیری مثل ‎-۱ عکس عمل عادی‌شان را انجام می‌دهند‌. فکر کنید که با این ترکیب چه توابع جالب و کاربردی‌ای می‌توان ساخت‌. مثلا کلید delete عقب‌گرد که در ایمکس به طور عادی تعریف نشده D: (در آینده یک نمونه خواهیم ساخت ;-))&lt;/p&gt;
&lt;h5&gt;تعریف اولیه other-window-backward&lt;/h5&gt;

&lt;p&gt;برای این که از سختی وارد کردن همچون دستوری بکاهیم‌، بهتر است که آن را به صورت یک تابع تعریف کنیم تا هر جایی که نیاز بود بتوانیم به راحتی از آن استفاده کنیم:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;defun other-window-backward &lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="s2"&gt;"Select the previous window."&lt;/span&gt;

&lt;span class="o"&gt;(&lt;/span&gt;interactive&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;(&lt;/span&gt;other-window -1&lt;span class="o"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;خوب این خطوط به چه معناست؟ به ترتیب آن‌ها را بررسی می‌کنیم:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;defun other-window-backward &lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;در این خط مثل اکثر زبان‌های برنامه‌نویسی دیگر‌، شروع به تعریف تابع می‌کنیم‌. defun عبارتی است مانند def در پایتون که وظیفهٔ تعریف توابع را بر عهده دارد‌. در ادامه نیز اسم تابع other-window-backward و یک جفت پرانتز خالی (که محل تعریف آرگومان‌هایمان در آینده است) را قرار می‌دهیم‌.&lt;/p&gt;
&lt;p&gt;در خط دوم:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="s2"&gt;"Select the previous window"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;تنها یک توضیح کوتاه برای عملکرد تابع می‌نویسیم‌. این توضیح عملا تاثیری در روند اجرا تابع ندارد‌. اما وقتی کاربر بخواهد با دستوری مثل describe-function از نحوهٔ عملکرد تابع مطلع شود‌، این توضیح است که نمایش داده می‌شود‌.&lt;/p&gt;
&lt;p&gt;خط سوم شامل:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;interactive&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;این خط در واقع بر نوع عملکرد تابع نسبت به آرگومان‌ها در زمان فراخوانی‌شان دلالت می‌کند‌. در ادامه با مزایای این دستور بیشتر آشنا خواهیم شد‌. فعلا الاالحساب آن را همانطور که هست وارد می‌کنیم‌.&lt;/p&gt;
&lt;p&gt;و خط آخر:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;other-window -1&lt;span class="o"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;همان‌طور که معلوم است‌، تابع other-window آشنایمان را با آرگومان ‎-۱ صدا می‌کند‌. این آرگومان منفی همانطور که توضیح دادیم به تابع می‌فهماند که باید عقب‌گرد حرکت کند‌.&lt;/p&gt;
&lt;p&gt;حالا دیگر تقریبا کارمان تمام است‌. تنها کافی است که آن را به کلید ترکیبی مد نظرمان (C-x C-p چنان که در قسمت قبل تصمیم گرفتیم) پیوند دهیم:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;global-set-key &lt;span class="s2"&gt;"\C-x\C-p"&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;other-window-backward&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;و کار تقریبا تمام است‌.&lt;/p&gt;
&lt;h5&gt;افزودن مزایای آرگومان‌ها&lt;/h5&gt;

&lt;p&gt;تا این‌جای کار other-window-backward کاری که می‌خواهیم را درست انجام می‌دهد‌. اما هنوز یک کمبود دارد‌. کدام کمبود؟ همانطور که بالا‌تر توضیح دادم ما می‌توانستیم با C-u به other-window بگوییم که مثلا به دو پنجره بعد بپرد و ما را از فراخوانی دوباره و دوباره‌اش نجات دهد‌. اما تابعی که الان تعریف کردیم‌، این قابلیت را ندارد‌. در نتیجه کاربر بخت برگشته باید برای پرش به سه پنجره قبل سه بار این کلید‌ها را فشار دهد‌! و این یعنی عذاب ;-)&lt;/p&gt;
&lt;p&gt;برای این که تابع‌مان یک آرگومان بپذیرد‌، آن را به شکل زیر ویرایش می‌کنیم:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;defun other-window-backward &lt;span class="o"&gt;(&lt;/span&gt;n&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="s2"&gt;"Select Nth previous window."&lt;/span&gt;

&lt;span class="o"&gt;(&lt;/span&gt;interactive &lt;span class="s2"&gt;"p"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;(&lt;/span&gt;other-window &lt;span class="o"&gt;(&lt;/span&gt;- n&lt;span class="o"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;همانطور که می‌بینید در خط اول‌، یک آرگومان به لیست آرگومان‌های تابع به اسم n اضافه کردیم‌. با این کار به تابع فهماندیم اگر کاربر با C-u آرگومانی را فرستاد (مثلا ۲) آن را در متغیر n قرار بده‌.&lt;/p&gt;
&lt;p&gt;همینطور در خط آخر به جای استفاده از ‎-۱ تابع other-window را با آرگومان منفی n صدا زدیم‌. یعنی هر عددی به n فرستاده شد‌، به ترکیب فوق‌، به صورت منفی به other-window فرستاده می‌شود‌.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;توجه:&lt;/strong&gt; به فاصلهٔ میان علامت منفی و حرف n توجه کنید‌. در صورتی که بخواهید آن را به صورت:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;-n&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;بنویسید‌، مفسر لیسپ به مشکل بر می‌خورد‌. احتمالا یادتان هست که برای تفریق دو عدد چه کار باید می‌کردیم:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;- 2 6&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;لیسپ در این‌جا دو عدد را از هم کم می‌کند‌، اما اگر به جای دو عدد فقط یک عدد وجود داشته باشد‌، مثل تابع ما‌، آن را به صورت عدد منفی تلقی می‌کند‌.&lt;/p&gt;
&lt;p&gt;اما یک نکتهٔ مهم و اساسی در خط سوم وجود دارد که باید به آن نیز بپردازیم‌. ما در این خط به صورت زیر عمل کردیم‌:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;interactive &lt;span class="s2"&gt;"p"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;جریان آن p مشکوک چیست؟ اگر تابع مثل روش اول‌مان‌، هیچ آرگومانی نگیرد‌، interactive هم بدون آرگومان می‌ماند‌. اما اگر مثل روش اخیرمان بخواهیم در تابع از آرگومانی استفاده کنیم‌، باید یک آرگومان به صورت رشته کد به interactive هم اضافه کنیم‌. کد p کوچک به تابع می‌فهماند که اگر یک آرگومان به تابع فرستاده شد آن را به صورت یک عدد ترجمه کن و به تابع برگردان‌. اما اگر آرگومانی فرستاده نشد‌، خودت به صورت پیش‌فرض عدد ۱ را به تابع برگردان‌. و این دقیقا کاری است که ما تا این‌جای کار از تابع‌مان می‌خواهیم‌.&lt;/p&gt;
&lt;h5&gt;اختیاری کردن آرگومان&lt;/h5&gt;

&lt;p&gt;همان‌طور که می‌بینید‌، این تابع قابلیت فراخوانی توسط توابع دیگر لیسپ را نیز دارد‌. اما در این وضعیت (منظورم در حالتی است که تابع توسط توابع دیگر فراخوانده شود و نه در صورتی که توسط کاربر صدا زده می‌شوند) حتما باید به همراه فراخوانی تابع یک آرگومان هم به آن اطلاق شود‌. و این کمی کار را پیچیده می‌کند و ممکن است در آینده خسته کننده به نظر بیاید‌. بهتر است تابع را طوری تعریف کنیم که وقتی به صورت other-window-backward صدا شد خودکار روش انجام کار پیش‌فرضش را پیش بگیرد‌. پس آن را به صورت زیر ویرایش می‌کنیم:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;defun other-window-backward &lt;span class="o"&gt;(&lt;/span&gt;&amp;amp;amp;optional n&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="s2"&gt;"Select Nth previous window."&lt;/span&gt;

&lt;span class="o"&gt;(&lt;/span&gt;interactive &lt;span class="s2"&gt;"p"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;n

&lt;span class="o"&gt;(&lt;/span&gt;other-window &lt;span class="o"&gt;(&lt;/span&gt;- n&lt;span class="o"&gt;))&lt;/span&gt; ; &lt;span class="k"&gt;if &lt;/span&gt;n is non-nil

&lt;span class="o"&gt;(&lt;/span&gt;other-window -1&lt;span class="o"&gt;)))&lt;/span&gt; ; &lt;span class="k"&gt;if &lt;/span&gt;n is nil
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;در خط اول با ‏‎&amp;amp;optional به تابع می‌فهمانیم که آرگومان n باید اختیاری باشد‌. یعنی اگر فرستاده شد مقدار دهی شود و اگر نه‌، بی‌خیالش باشد‌. همچنین از یک عبارت کنترلی if هم استفاده کردیم‌. در این عبارت اگر n مقدار داشته باشد‌، پس if با یک وضعیت non-nil یا همان True در اکثر زبان‌های برنامه نویسی روبروست‌. و اگر مقدار نداشته باشد‌، برابر است با nil یا False. با توجه با کامنت‌های موجود در کد احتمالا می‌توانید بفهمید که در صورت وقوع هر یک از این وضعیت‌ها کدام حالت رخ خواهد داد‌.&lt;/p&gt;
&lt;p&gt;فکر می‌کنم تا این‌جای کار برای امروز کافی باشد‌. کارمان هنوز با این تابع تمام نشده‌. هنوز کمی دیگر راه باقی است که بتوان آن را به عنوان یک تابع ایمکس لیسپی کامل قبول کرد‌. اما لازم است قبل از توضیح بیشتر و سخت کردن کار‌، مفاهیم گفته شده تا این‌جای کار کاملا درک شوند‌.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;پی‌نوشت:&lt;/strong&gt; مرا به علت دیر‌کرد این چند وقته در انتشار ادامهٔ مطلب حاضر ببخشید‌. امروز هم احتمالا نتوانسته‌ام آن‌طور که باید و شاید حق مطلب رو عدا کنم‌. حقیقتش امروز از آن روز‌هایی بود که در مود نوشتن برای وبلاگ نبودم ولی باید حتما تا این‌جای کار را بیان می‌کردم تا نوشته‌ها از خودم عقب نمانند ;-)&lt;/p&gt;</description><category>elisp</category><category>Emacs</category><category>emacs keybinding</category><category>lisp</category><category>ایمکس</category><category>ایمکس</category><category>برنامه نویسی</category><category>حل مشکل</category><category>نرم افزار</category><category>کدباز</category><guid>http://shahinism.github.io/posts/blog13910502chgwnh-ymkhsmn-r-trbyt-khnym-qsmt-dw.html</guid><pubDate>Mon, 23 Jul 2012 18:12:34 GMT</pubDate></item><item><title>چگونه ایمکس‌مان را تربیت کنیم (قسمت اول)</title><link>http://shahinism.github.io/posts/blog13910423chgwnh-ymkhsmn-r-trbyt-khnym-qsmt-w.html</link><description>&lt;p&gt;&lt;/p&gt;&lt;h4&gt;مقدمه&lt;/h4&gt;
اصولا اگر خوانندهٔ این وبلاگ باشید می‌دانید که بعضی وقت‌ها هیجان زده می‌شوم و از روی ذوق نرم‌افزاری را انتخاب می‌کنم و پشت سر هم از جزئیاتش اینجا می‌نویسم تا دیگر از آن حرارت اولیهٔ آشنایی با آن بیافتم و بگذارمش کنار‌. ولی خوب خوبی‌اش این می‌شود که همیشه یک آرشیو دم دستی از چیز‌هایی که یاد می‌گیرم کنار دستم دارم. 
&lt;p&gt;احتمالا هم دیگر معلوم است که چند وقتی است دارم عادت می‌کنم که با ایمکس کار کنم‌. شاید برای باقی ملت این هم جزء همان جو گرفتن‌های اولیه باشد‌. ولی این بار این‌طور نیست‌. موضوع ناموسی شده‌! بیشتر از تمام نرم‌افزار‌هایی که در طول عمرم با آن‌ها سر و کار داشته‌ام‌، دوست دارم با ایمکس کار کنم‌. ولی این یکی تمام دانسته‌هایم را‌، عادت‌هایم را‌، علایقم را‌، بود و نبودم را به چالش می‌کشد‌! چطور؟ در این‌جا با نرم‌افزاری طرف هستم که بسیاری چیز دارد که من نمی‌خواهم‌، و بسیاری چیز دیگر ندارد که من می‌خواهم‌، (که دقیقا عکس همین عبارت هم صادق است). حالا نکته‌اش این‌جاست که این نرم‌افزار این قابلیت را به من می‌دهد که تبدیلش کنم به همان چیزی که می‌خواهم‌! چطور؟ elisp‌! &lt;/p&gt;
&lt;p&gt;در این مدت دو سه ماهه که با ایمکس سر و کله زده‌ام‌، منابعی یافته‌ام (که در پست بعدی سعی می‌کنم معرفی‌شان کنم) که کمکم کرده تا اندکی این زبان و تنظیمات (زیادزیادزیاد) ایمکس را درک کنم‌. همین درک اندک کلی هیجان هم برایم به همراه آورده‌. این است که می‌خواهم تا تمام شدن دوره کردن این منابعم‌، هر چیزی که به نظرم جالب و کاربردی می‌آید را تحت یک سری مقاله منتشر کنم‌. باشد که برای آیندگان مفید واقع شود ;-)&lt;/p&gt;
&lt;h4&gt;پیشنیاز&lt;/h4&gt;

&lt;p&gt;من این‌طور فرض می‌کنم که خوانندهٔ عادی این متن تا الان حداقل کلید‌های میانبر ایمکس را حفظ کرده‌، بلد است Frame کدام است‌، یا چطور بین پنجره‌ها جابجا شود یا پکیجی نصب کند‌! در این‌جا قرار است ما یاد بگیریم که چطور پکیج‌های خودمان را بسازیم ;-)&lt;/p&gt;
&lt;h5&gt;یک نکته&lt;/h5&gt;

&lt;p&gt;قرار نیست که در مورد هر دستوری که استفاده می‌کنم کامل توضیح دهم‌. گاهی می‌شود که تنها به یک توضیح کوتاه و نشان دادن عملکرد دستور بسنده می‌کنم‌. این‌طوری سعی دارم که بیشتر تمرکز را بگذارم روی هدف اصلی مطلب.&lt;/p&gt;
&lt;h4&gt;ساختار دستورات elisp&lt;/h4&gt;

&lt;p&gt;اولین نکته در مورد لیسپ (یا در این مورد elisp) این است که تمامی دستوراتش باید داخل پرانتز نوشته شود‌. یعنی فرمی به صورت زیر:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;command&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;نکتهٔ بعد نوع نوشتن دستورات است‌. در زبان‌هایی مانند C یا Python یا دیگر زبان‌هایی که تا الان دیده بودم‌ (جز اسمبلی) دستورات تقریبا به صورت عامیانه نوشته می‌شد‌. مثلا ۲ + ۳ را دقیقا همینطور می‌نوشتیم‌. ولی در لیسپ باید این ترتیب رعایت شود:‌ ۱- عملگر ۲- آرگومان‌ها‌. یعنی برای دستور ۲ + ۳ داریم:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;+ 2 3&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;خوب مزیتش می‌شود این که دیگر برای ۲ + ۳ + ۴ + ۵ + ۶ فقط می‌نویسیم:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;+ 2 3 4 5 6 &lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;و دیگر خبری هم از دردسر اولویت عملگر‌ها نمی‌شود‌. مثلا:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;+ 3 &lt;span class="o"&gt;(&lt;/span&gt;* 4 5&lt;span class="o"&gt;))&lt;/span&gt; که جوابش می‌شود ۲۳

&lt;span class="o"&gt;(&lt;/span&gt;* &lt;span class="o"&gt;(&lt;/span&gt;+ 3 4&lt;span class="o"&gt;)&lt;/span&gt; 5&lt;span class="o"&gt;)&lt;/span&gt; که جوابش می‌شود ۳۵
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;یا مثلا اگر قرار بود قبلا تابعی را با آرگومان‌هایش به صورت زیر فرا بخوانیم:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;foo &lt;span class="o"&gt;(&lt;/span&gt;3 + 4, 5 + 6&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;الان کارمان به این صورت انجام می‌گیرد:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;foo &lt;span class="o"&gt;(&lt;/span&gt;+ 3 4&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;+ 5 6&lt;span class="o"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ساده بود؟‌ خوب نکتهٔ‌ بعدی لیست‌ها هستند‌. که به صورت زیر تعریف می‌شوند:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;hello there&lt;span class="o"&gt;)&lt;/span&gt; که لیست شامل دو نشانه است.

&lt;span class="o"&gt;(&lt;/span&gt;1 2 xyz &lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; که لیستی شامل دو عدد و یک رشته است‌.

&lt;span class="o"&gt;(&lt;/span&gt;a &lt;span class="o"&gt;(&lt;/span&gt;b c&lt;span class="o"&gt;))&lt;/span&gt; که لیستی شامل یک نشانه و یک زیر لیست است‌.

&lt;span class="o"&gt;()&lt;/span&gt; که یک لیست خالی است‌.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;خوب تنها نکته‌ای که باقی می‌ماند و از باقی نکته‌ها مهم‌تر است کامنت است‌! در لیسپ کامنت‌ها بعد از «;» نوشته می‌شوند‌. هر وقت این علامت ظاهر شد تا انتهای خط به عنوان کامنت توسط مفسر لیسپ کامنت طلقی شده و نادیده گرفته می‌شود‌.&lt;/p&gt;
&lt;p&gt;نکات پایه‌ای در مورد نحو لیسپ را تا این‌جای کار دیدیم‌. نکات ضریف‌تر و کاربردی‌تری هم وجود دارد که در ادامهٔ مقالات و وقتی به آن‌ها نیاز شد مطالعه‌شان می‌کنیم.&lt;/p&gt;
&lt;h4&gt;کلید‌ها در elisp&lt;/h4&gt;

&lt;p&gt;برای این که به ایمکس بفمانیم با فشرده شدن فلان کلید فلان کار را انجام بده‌، باید اول بدانیم که چطور یک کلید را تعریف کنیم‌. کلید‌ها در حالت عادی بین دو کتیشن "" و به صورت یک رشته تعریف می‌شوند‌. مثلا در مثلا زیر ما سه کلید xyz را تعریف می‌کنیم:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="s2"&gt;"xyz"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;اما نکته این‌جاست که چطور کلید‌های Ctrl و Alt را به ایمکس حالی کنیم‌! این کلید‌ها عملا با حرف C بزرگ برای Ctrl و M برای کلید Meta یا همان Alt شناخته می‌شوند‌. اما اگر ما "M" یا "C" استفاده کنیم، حروف M بزرگ و C بزرگ را معرفی کرده‌ایم و نه Ctrl و Alt را‌. این‌جاست که از علامت شکنندهٔ «\» استفاده می‌کنیم‌. (اگر قبلا برنامه نویسی کرده باشید احتمالا خوب از مزایایش با خبرید‌). و داریم:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="s2"&gt;"\M"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;خوب دیگر کارمان راحت شد‌. فقط یک نکتهٔ کوچک دیگر باقی می‌ماند‌. این که چطور فرق بین پایین نگه داشتن کلید Ctrl و زدن x و بعد رها کردن هر دویشان و زدن مثلا کلید l را تعیین کنیم‌. این عبارت در ایمکس به صورت C-x l نوشته می‌شود‌. خوب احتمالا حدس زده‌اید‌:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="s2"&gt;"\C-x l"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;نکته&lt;/strong&gt;: برای نمایش کلید Esc به صورت "\e" و برای کلید Del از عبارت "\C-‎?‎" استفاده می‌کنیم.&lt;/p&gt;
&lt;h4&gt;امتحان تغییرات ایجاد شده روی ایمکس&lt;/h4&gt;

&lt;p&gt;خوب ما تغییرات و توابع ایجاد شده‌یمان را در فایل ‎.emacs موجود در پوشهٔ خانگیمان وارد می‌کنیم‌. اما چطور تغییرات را اعمال کنیم؟ ساده‌ترین راه و اولین چیزی که احتمالا به ذهنتان می‌رسد بستن ایمکس و باز کردن دوباره‌اش است. روش خوبی است‌‌، ولی آسان‌تر از این هم پیدا می‌شود‌. مثلا زدن دستور زیر:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;M-x &lt;span class="nb"&gt;eval&lt;/span&gt;-buffer RET
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;این دستور تقریبا کار راه انداز است‌. ولی موقعی که فایل کانفیگتان زیادی سنگین شد‌، و مثلا رسید به هزار خط (‌می‌رسد‌، غم مخورید ;-)) ممکن است زمان زیادی تا لود شدن طول بکشد‌. پس منطقی نیست که همهٔ فایل را لود کنیم‌. چطور است که فقط تغییرات ایجاد شده را دوباره لود کنیم؟ (همین انتخاب‌های گسترده است که دارد عاشق دل باخته‌ام می‌کند ;-)) پس راه بعدی‌مان می‌شود این که برویم در انتهای خطی که تغییر جدیدمان را اعمال کرده‌ایم بایستیم و کلید‌های زیر را وارد کنیم:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;C-x C-e
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;کار این کلید‌ها این است که خط قبل از علامت نشانگر را پردازش کنند و در کانفیگ حاضر ایمکس مداخله دهند‌. &lt;/p&gt;
&lt;p&gt;خوب ما می‌دانیم که این کلید‌ها حتما یک دستوری را پشت پردهٔ ایمکس اجرا می‌کنند‌. می‌خواهید بدانید که آن دستور چیست؟ اول دستور زیر را وارد کنید:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;M-x describe-key
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;و سپس کلید‌های ترکیبی‌تان را وارد کنید‌. یک توضیح کامل از دستور مورد استفاده در پنجره‌ای جدید روبرویتان ظاهر می‌شود‌.&lt;/p&gt;
&lt;p&gt;خوب دیگر بحث تئوری کافیست‌. بهتر است برویم سراغ کمی کار عملی‌. &lt;/p&gt;
&lt;h4&gt;حل مشکل پرش بین پنجره‌های ایمکس&lt;/h4&gt;

&lt;p&gt;مساله خیلی ساده است‌. تا به حال حتما پیش آمده که چند تا پنجرهٔ باز دارید و می‌خواهید بین‌شان سوئیچ کرده و به پنجرهٔ سمت راست‌تان بروید. خوب برای این کار از کلید‌های C-x o استفاده می‌کنید‌. حالا اگر بخواهید به سمت چپ بروید چطور؟ شاید وقتی دو پنجرهٔ باز دارید کار سختی نباشد و با تکرار همین دستور به سمت چپی هدایت شوید‌. ولی در پنج پنجرهٔ باز چطور؟ چهار بار باید این کار را انجام دهید‌. یا شاید اصلا نظرتان به نظر من نزدیک باشد که C-x o یک کمی را دست نباشد‌. (این نظر شخصیست) طی ادامهٔ این شماره از مقاله و شمارهٔ بعد قصد حل این مساله را داریم‌. یعنی اول این که کلید‌های C-x o که وظیفه‌شان پرش به پنجرهٔ بعدی است را با یک کلید دلخواه جایگزین کنیم‌. و سپس یک کلید که بتواند عکس همین عمل را یعنی پرش به پنجرهٔ سمت چپ را انجام دهد هم بسازیم‌.&lt;/p&gt;
&lt;p&gt;خوب تا این‌جای کار می‌دانیم چه کار‌هایی می‌توان انجام داد و می‌دانیم که چه مساله‌ای پیش رو داریم‌. پس حل تقریبا آسان است‌. پس شروع می‌کنیم‌. اولین کاری که باید بکنیم این است که بفهمیم با چه دستوری می‌توان یک کلید میانبر تعریف کرد‌. دستور مورد نظر ما global-set-key نام دارد‌. که به صورت زیر می‌تواند مورد استفاده قرار گیرد:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;global-set-key KEY COMMAND&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;خوب حالا دو چیز بعدی که نیاز داریم هم سر و کله‌شان پیدا شد‌. اولی KEY که منظور کلید‌های میانبر مورد نظرمان است‌، و دیگری COMMAND که دستوری است که می‌خواهیم با زدن کلید‌های KEY اجرا شود‌. خوب چه کلید‌هایی را انتخاب کنیم؟ این کتابی که من به عنوان راهنما استفاده می‌کنم کلید‌های C-x C-n را برای پرش به پنجرهٔ سمت راست و C-x C-p را برای پرش به پنجرهٔ سمت چپ انتخاب کرده‌. انتخاب جالبی به نظر می‌رسد و من هم همان‌ها را انتخاب می‌کنم‌. اما نکته این‌جاست که اول ببینیم نکند یادمان نباشد و بزنیم یکی از کلید‌های میانبر حاضرمان را ناکار کنیم‌. پس می‌آییم و با describe-key ته و توی قضیه را می‌ریزیم روی دایره‌. هاها بعله‌، این کلید‌ها به ترتیب برای فراخوانی set-goal-column و mark-page استفاده می‌شوند‌. که خوب حتی روحم هم از وجود چنین چیز‌هایی خبر‌دار نبود‌. پس فکر نمی‌کنم که این تغییر اشکالی داشته باشد‌. ضمن این که هر وقت که بخواهم می‌توانم دستورام را بعد از M-x وارد و اجرا کنم D:. پس کلید‌ها هم تعیین شد و تا اینجای کار دستور مربوط به پرشمان به پنجرهٔ سمت راست چیزی شبیه به این شده:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;global-set-key &lt;span class="s2"&gt;"\C-x\C-n"&lt;/span&gt; COMMAND&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;و حالا بخش آخر داستان‌. حتما دیگر یاد گرفته‌اید که چطور دستور مربوط به C-x o را که می‌خواهیم به C-x C-n پیوند بدهیم را پیدا کنید‌. ما پیدایش کردیم و فهمیدیم که دستوری به اسم other-window را اجرا می‌کند‌. پس احتمالا می‌گویید که دستورمان بعد از تکامل می‌شود این:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;global-set-key &lt;span class="s2"&gt;"\C-x\C-n"&lt;/span&gt; other-window&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;خوب تا حدودی راست گفته‌اید‌. ولی مشکل اینجاست که لیسپ کمی خنگ است و آن دستوری که سمت راست نوشته‌ایم other-window را هم اجرا می‌کند و این اصلا خوب نیست‌. پس باید یک جوری حالیش کنیم که بی‌خیال این دستور شود و فقط سمت چپی را اجرا کند‌. این است که یک «'» به تنهایی به کمکمان می‌آید و دستور می‌شود:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;global-set-key &lt;span class="s2"&gt;"\C-x\C-n"&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;other-window&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;همین کتیشن کوچک در ابتدای دستور از اجرای دستور دوم جلوگیری می‌کند و دستورمان کامل می‌شود‌. حالا می‌ماند که چطور به ایمکس بگوییم که از آن استفاده کند‌. خوب قبلا در موردش توضیح دادم‌. مثلا همین الان بروی به آخر خط همین دستور (C-e) و بزنید C-x C-e و تمام‌. حالا دستورتان را امتحان کنید‌. &lt;/p&gt;
&lt;p&gt;چیزی که باقی می‌ماند این است که کلید C-x C-p را تعریف کنیم تا پس از زدنشان به پنجرهٔ قبلی یا سمت چپی‌مان برود و چون این کار یک کمی پیچیده‌تر است بهتر است آن را برای قسمت بعد بگذاریم‌. قسمتی که شما تا این‌جای داستان را به درستی درک کرده‌اید ;-)&lt;/p&gt;</description><category>elisp</category><category>Emacs</category><category>emacs keybinding</category><category>lisp</category><category>ایمکس</category><category>ایمکس</category><category>برنامه نویسی</category><category>حل مشکل</category><category>نرم افزار</category><category>کدباز</category><guid>http://shahinism.github.io/posts/blog13910423chgwnh-ymkhsmn-r-trbyt-khnym-qsmt-w.html</guid><pubDate>Fri, 13 Jul 2012 19:34:31 GMT</pubDate></item></channel></rss>