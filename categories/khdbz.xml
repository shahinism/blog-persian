<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>شاهینیسم (کدباز)</title><link>http://shahinism.github.io</link><description>بعضی وقت‌ها باید قبل از این که بتوانید راه بروید‌، بدوید‌!</description><lastBuildDate>Tue, 28 May 2013 11:10:21 GMT</lastBuildDate><generator>nikola</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>این ایمکس دوست داشتنی (بالانس کردن پرانتز‌ها)</title><link>http://shahinism.github.io/posts/blog13920127yn-ymkhs-dwst-dshtny-blns-khrdn-prn.html</link><description>&lt;p&gt;&lt;/p&gt;&lt;p&gt;یکی از دلایل اصلی Syntax error‌ها بالانس نبودن پرانتز‌هاست (منظورم پرانتز‌، کروشه‌، آکولاد‌، &amp;lt;&amp;gt;‌، گیومه و … است). خوب از آن‌جایی که بنیاد ایمکس براساس Lisp است و Lisp به خاطر پرانتز‌هایش معروف شده (خیلی‌ها به شوخی می‌گن که Lisp مخفف Lost in stupid parentheses هست)‌، مطمئنا باید راهی برای حل این مشکل داشته باشد.
برای این کار خطوط زیر را داخل ‎.emacs وارد می‌کنیم:&lt;/p&gt;


&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;electric-pair-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;show-paren-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;خوب با خط اول‌، به ایمکس می‌گوییم‌، هر وقت ما پرانتزی (که شامل تمام علاماتی است که در بالا اشاره کردیم) باز کردیم‌، خودت به صورت خودکار‌، کاراکتر بستن آن را وارد کن. همین‌طور در خط دوم مجبورش می‌کنیم وقتی روی پرانتزی هستیم‌، اگر جفتی برایش وجود دارد‌، آن را برایمان نمایش دهد (هر دو طرف پرانتز سبز می‌شود معمولا‌. با توجه به تنظیمات پوستهٔ ایمکس)‌. اگر نه‌، سمتی که رویش ایستاده‌ایم را قرمز کن تا بفهمیم تنهاست ;-)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://dl.dropboxusercontent.com/u/25017694/Blog-photos/emacsparenmatch.png"&gt;&lt;img alt="نمونه‌ای از نمایش جفت پرانتز در ایمکس" src="https://dl.dropboxusercontent.com/u/25017694/Blog-photos/emacsparenmatch.png" width="328" height="42"&gt;&lt;/a&gt; نمونه‌ای از نمایش جفت پرانتز در ایمکس&lt;/p&gt;
&lt;p&gt;بخش اول کار که معلوم است. ولی این بخش دوم قابلیت‌های جالب دیگری هم دارد. مثلا می‌توان با(setq show-paren-delay 0) میزان زمانی که طول می‌کشد تا جفت کاراکتر پرانتزمان را نمایش دهد را تعیین کنیم. از قرار به طور پیش‌فرض مقداری Delay تعیین شده که ما با این دستور می‌توانیم صفرش کنیم. من این کار را نکردم چون به نظرم سر موقع نمایش داده می‌شوند.&lt;/p&gt;
&lt;p&gt;همین‌طور می‌توان با(setq show-paren-style 'MODE) تعیین کرد که نمایش هر جفت پرانتز چطور باشد. که برای این کار باید عبارت MODE را با یکی از سه گزینهٔ زیر جایگزین کنیم:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;parenthesis&lt;/strong&gt; که مد پیش‌فرض است و فقط پرانتز‌های دو طرف را نمایش می‌دهد.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;expression&lt;/strong&gt; که علاوه بر پرانتز‌ها‌، متن درونشان هم برجسته می‌شود.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;mixed&lt;/strong&gt; که اگر پرانتز‌ها بالانس باشند مثل مد parenthesis عمل می‌کند و گرنه مثل expression.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;به همین سادگی می‌توانید آن‌طور که می‌خواهید این رفتار ایمکس را هم کنترل کنید.&lt;/p&gt;
&lt;p&gt;من این آموزش را نمی‌دانم از کجای اینترنت یاد گرفتم. ولی این &lt;a title="Emacsfu" href="http://emacs-fu.blogspot.de/2009/01/balancing-your-parentheses.html" target="_blank"&gt;وبلاگ&lt;/a&gt; هم به آن اشاره کرده که وبلاگ عالی‌ای هم هست. پیشنهاد می‌کنم از دستش ندهید. خیلی خیلی تکنیک‌های جالبی با آن یاد خواهید گرفت.&lt;/p&gt;</description><category>Emacs</category><category>Emacs-fu</category><category>lisp</category><category>Parenthesis</category><category>ایمکس</category><category>برنامه نویسی</category><category>نرم افزار</category><category>کدباز</category><guid>http://shahinism.github.io/posts/blog13920127yn-ymkhs-dwst-dshtny-blns-khrdn-prn.html</guid><pubDate>Tue, 16 Apr 2013 12:24:21 GMT</pubDate></item><item><title>این ایمکس دوست داشتنی (Backup‌ها و Autosave‌ها)</title><link>http://shahinism.github.io/posts/blog13920125yn-ymkhs-dwst-dshtny-backuph-w-autosaveh.html</link><description>&lt;p&gt;&lt;/p&gt;&lt;p&gt;یکی از ویژگی‌های خوب‌، به درد بخور ولی سرسام آوری که در اکثر ویرایشگرهای لینوکسی با پدر و مادر دیده‌ایم‌، قابلیت پشتیبان گیریست‌! قابلیتی که هر چند می‌دانیم که خیلی به آن نیاز پیدا خواهیم کرد‌، عموما از ریختش خوشمان نمی‌آید. عموما شیوهٔ کار این پشتیبان‌گیر‌ها به این صورت است که در همان جایی که فایل اصلی وجود دارد‌، یک فایل پشتیبان به صورت خودکار ایجاد می‌کنند و هیچ وقت هم آن را پاک نمی‌کنند‌! خوب برای آدم‌های وسواسی‌ای مثل من‌، این کمی اذیت کننده است که آن‌ها را در کنار فایل‌های اصلی‌ام ببینم‌!
ساده‌ترین راه‌کار‌، خاموش کردنش است‌! ولی خاموش کردن هم خطرناک است. قربانش بروم نیست کلا همه چیز‌مان قابل اطمینان است‌، مطمئن باشید سر حساس‌ترین ادیت‌تان‌، برق سیستم قطع می‌شود (این خط‌| ، این نشان D:).&lt;/p&gt;
&lt;p&gt;این است که برای ایمکس یک جای مخصوص درست می‌کنیم که این پشتیبان‌ها را در آن جا بریزد. این‌طوری نه ساختار سیستم فایل‌مان را شلخته می‌کنیم‌، و نه از نعمت وجود پشتیبان‌ها بی‌بهره می‌شویم.&lt;/p&gt;


&lt;div class="code"&gt;&lt;pre&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;custom-set-variables&lt;/span&gt;
 &lt;span class="c1"&gt;;; custom-set-variables was added by Custom.&lt;/span&gt;
 &lt;span class="c1"&gt;;; If you edit it by hand, you could mess it up, so be careful.&lt;/span&gt;
 &lt;span class="c1"&gt;;; Your init file should contain only one such instance.&lt;/span&gt;
 &lt;span class="c1"&gt;;; If there is more than one, they won't work right.&lt;/span&gt;
 &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;auto-save-file-name-transforms&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;quote&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;".*"&lt;/span&gt; &lt;span class="s"&gt;"~/.emacs.d/autosaves/\\1"&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
 &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;backup-directory-alist&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;quote&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;".*"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"~/.emacs.d/backups/"&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;خوب‌، تمام نکتهٔ اصلی ماجرا این‌جاست که ما با تابع custom-set-variables سر و کار داریم. این تابع را در واقع قرار نیست که ما صدا بزنیم (ولی این یک‌بار اشکال ندارد‌). حقیقتش نیاز هم نیست‌، چون این تنظیمات را می‌توان با خود ایمکس انجام داد. کافیست از منوی ایمکس‌، Options و Customize Emacs را انتخاب کنیم‌، بخش مورد نظر را پیدا و انگولکش کنیم و سپس Apply &amp;amp; Save و خود ایمکس همچین چیزی را برای‌مان اضافه می‌کند! ولی خوب من حال سر و کله زدن با این منو‌ها را ندارم. پس باید بروم و همین متغیر‌ها که می‌بینید را مستقیما تغییر دهم. خوب آن وقت یک کمی کثیف‌کاری می‌شود. چرا؟ چون آن وقت این Customize ایمکس تنظیمات ما را نمی‌خواند و ممکن است برای یک همچین تنظیم پایه‌ای‌، مشکل بزاید برای‌مان.&lt;/p&gt;
&lt;p&gt;باauto-save-file-name-transforms ما در واقع شیوهٔ نام‌گذاری Autosave‌ها را با یک Regex تغییر می‌دهیم. خود ایمکس‌، آن بخش آدرس دایرکتوری را‌، به مسیر جدید فایل تبدیل می‌کند و فایل‌ها را در آن‌جا ذخیره می‌کند. Autosave‌ها به صورت #FileName#  و به صورت خودکار ذخیره می‌شوند و شامل آخرین تغییرات یک بافر هستند.&lt;/p&gt;
&lt;p&gt;دقیقا همین کار را هم با متغیرbackup-directory-alist انجام می‌دهیم که وظیفهٔ تغییر نام backup‌ها را بر عهده دارد. این پشتیبان‌ها در واقع آخرین وضعیت Save شدهٔ یک بافر را ارائه می‌دهند و به صورت FileName~ ‎ نام‌گذاری می‌شوند.&lt;/p&gt;
&lt;p&gt;حالا نکته این‌جاست که احتمالا بعد از Restart ایمکس‌، با این اخطار روبرو می‌شوید که دایرکتوری Autosaves که آدرس داده‌اید وجود ندارد. یک کار این است که آن را به صورت دستی ایجادش کنید. فقط یک بار لازم است. و بعد ایمکس‌تان را اجرا کنید. یک کار دیگر هم می‌توان با دستور لیسپ زیر‌، چک کرد که اگر دایرکتوری وجود نداشت‌، خود ایمکس ایجادش کند:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;make-directory&lt;/span&gt; &lt;span class="s"&gt;"~/.emacs.d/autosaves/"&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;من این تنظیمات را از &lt;a href="http://snarfed.org/gnu_emacs_backup_files"&gt;این پست&lt;/a&gt; یاد گرفتم. وبلاگ قدیمی‌ایست‌، و چیز‌های خوبی در مورد ایمکس می‌توان ازش یاد گرفت.&lt;/p&gt;</description><category>Autosave</category><category>Backup</category><category>Emacs</category><category>ایمکس</category><category>حل مشکل</category><category>دوره</category><category>نرم افزار</category><category>کدباز</category><guid>http://shahinism.github.io/posts/blog13920125yn-ymkhs-dwst-dshtny-backuph-w-autosaveh.html</guid><pubDate>Sun, 14 Apr 2013 09:13:41 GMT</pubDate></item><item><title>این ایمکس دوست داشتنی (ido-mode)</title><link>http://shahinism.github.io/posts/blog13920122yn-ymkhs-dwst-dshtny-ido-mode.html</link><description>&lt;p&gt;&lt;/p&gt;&lt;p&gt;یکی از قابلیت‌های جالب تکمیل خودکاری که در ابزار‌های امروزی می‌بینیم‌، تکنیک fuzzy matching است که کار تکمیل خودکار را فوق‌العاده آسان می‌کند. نمونه‌ای از این تکمیل خودکار را در آدرس‌بار Firefox دیده‌ایم. جایی که شما می‌توانید آدرس را از هر کجا یادتان است تکمیل کنید و اجباری به تایپ اول آدرس ندارید. امروز قصد داریم همچین قابلیتی را در ایمکس معرفی کنیم. این قابلیت می‌تواند در تکمیل نام buffer‌، فایل‌ها و دستورات ایمکسی‌، خیلی خیلی کمک کننده باشد. ابزاری که در ایمکس این امکان را فراهم می‌آورد ido نام دارد.
ترجیح می‌دهم قابلیت‌های این ابزار را به لغت بیان نکنم‌، چون نمی‌توانم. این است که ویدئویی در اینترنت پیدا کردم که می‌تواند لپ کلام را در دو دقیقه به شما نشان دهد‌، بدون این که نیازی به زیاده گویی‌های من باشد. این ویدئو را می‌توانید از&lt;a title="لینک ویدئو در یوتوب" href="http://youtu.be/lsgPNVIMkIE" target="_blank"&gt; این‌جا &lt;/a&gt;در یوتوب ببینید (مگر چه عیبی دارد گاهی مرا هم جو آزاد نشینی بگیرد و فکر کنم همه اینترنت آزاد دارند؟). اگر هم سخت‌تان است این ویدئو را از پشت خط شکن ببینید‌، برای‌تان روی &lt;a title="دانلود ویدئو از Mega" href="https://mega.co.nz/#!A0dymZqY!RInwER-nRLUijWh3tIxcOFD3-CBcg-CgHN0ZzO-TkQI" target="_blank"&gt;Mega&lt;/a&gt; آپلود کرده‌ام. حجم ویدئو ۵ مگ بیشتر نیست!&lt;/p&gt;
&lt;p&gt;حالا که ویدئو را دیدید کافیست با اضافه کردن کد زیر به ‎.emacs  آن را در ایمکس‌تان فعال کنید:&lt;/p&gt;


&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;ido-enable-flex-matching&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;ido-everywhere&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ido-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;پس از قرار دادن این کد‌، کلید‌های جستجوی فایل یا تعویض بافر‌، با دستورات همتای‌شان که از ido استفاده می‌کنند‌، جایگزین می‌شوند. این ابزار قابلیت‌های شخصی‌سازی بیشتری هم دارد. مثلا این که کدام پسوند‌ها را در اولیوت قرار دهد. من نیازی به این تنظیمات پیدا نکردم. اما اگر شما وسوسه به همچین تنظیمی شده‌اید می‌توانید به &lt;a title="idomode in mastering emacs" href="http://www.masteringemacs.org/articles/2010/10/10/introduction-to-ido-mode/" target="_blank"&gt;این پست&lt;/a&gt; mastring emacs رجوع کنید.&lt;/p&gt;
&lt;p&gt;گاها پیش می‌آید که در هنگام جستجوی فایلی (خصوصا در زمان ایجاد) این ابزار کمی دست و پا گیر می‌شود. برای فرار از این حالت کافیست دستور ٰC-f  را وارد کنید‌، تا به حالت معمول جستجوی فایل بازگردید.&lt;/p&gt;</description><category>Emacs</category><category>fuzzy matching</category><category>ido-mode</category><category>ایمکس</category><category>دوره</category><category>نرم افزار</category><category>کدباز</category><guid>http://shahinism.github.io/posts/blog13920122yn-ymkhs-dwst-dshtny-ido-mode.html</guid><pubDate>Thu, 11 Apr 2013 11:47:19 GMT</pubDate></item><item><title>این ایمکس دوست داشتنی (ergoemacs-mode)</title><link>http://shahinism.github.io/posts/blog13920119yn-ymkhs-dwst-dshtny-ergoemacs-mode.html</link><description>&lt;p&gt;&lt;/p&gt;&lt;p&gt;قبلا هم گفتم‌، ایمکس در حالت عادی‌، قابل قبول است‌، ولی خیلی خیلی می‌تواند بهتر باشد. یکی از اولین عادت‌ها بعد از مهاجرت به ایمکس‌، کلید‌های میانبر پر استفاده‌اش است. در &lt;a title="این ایمکس دوست داشتنی (تعریف کلید میانبر)" href="http://shahinism.com/blog/1392/01/17/%d8%a7%db%8c%d9%86-%d8%a7%db%8c%d9%85%da%a9%d8%b3-%d8%af%d9%88%d8%b3%d8%aa-%d8%af%d8%a7%d8%b4%d8%aa%d9%86%db%8c-%d8%aa%d8%b9%d8%b1%db%8c%d9%81-%da%a9%d9%84%db%8c%d8%af-%d9%85%db%8c%d8%a7%d9%86%d8%a8/"&gt;پست قبلی&lt;/a&gt; در موزد کلید‌های میانبر ایمکس حرف زدیم. اما بدیهی است که تعریف کلید میانبر برای دستوراتی این چنین پر استفاده که هم با دیگر کلید‌های میانبر تعریف شده در محیط‌های مختلف تداخل نداشته باشد و هم یاد آوری‌شان آسان باشد‌، کار آسانی نیست. خصوصا این که ایمکس پیشنهاد می‌کند کلید میانبر‌تان با C-c شروع شود و با یک کاراکتر تکی ادامه یابد. تعارف که نداریم‌، خیلی محدود است. ضمن این که ما کلید‌های آن‌چنان پر استفادهٔ زیادی نداریم که بخواهیم به همچین آکورد‌های سنگینی محدود شویم.
کلید‌های پر استفادهٔ عمومی شامل انتقال نشانگر‌، Yanking، پاک کردن کاراکتر‌ها‌، مدیریت پنجره‌ها و جستجو‌هاست. این‌ها دستوراتی هستند که در اکثر ویرایش‌ها به آن‌ها نیاز داریم. ضمن این که بسیاری از این دستورات در برنامه‌های دیگر هم شامل کلید‌های میانبری هستند که تقریبا به صورت یک استاندارد در آمده‌اند. نمونه‌ای از این دستورات‌، کپی و پیست است. شما در اکثر محیط‌ها‌، از جمله مرورگر‌تان‌، با C-c کپی می‌کنید و با C-v پیست. حالا باید در ایمکس آن را با C-w و C-y جایگزین کنید. خوب یک کمی ترک عادت نیاز دارد‌، ولی تلاش سختی است. البته ایمکس خودش یک CUA-mode دارد که می‌توان به راحتی اضافه کردن(cua-mode 1) در ‎.emacs آن را فعال کنید. ولی در مورد باز کردن یک فایل جدید چطور؟ در اکثر برنامه‌ها این کار با C-o امکان‌پذیر است‌، در حالی که در ایمکس باید این کار را با C-x C-f انجام دهید! سخت است دیگر!&lt;/p&gt;
&lt;p&gt;سخت‌تر از همه این که به QWERTY وابسته‌اند. آن وقت است که اگر به &lt;a title="چینش (لایوت) Workman و داستان مهاجرتم" href="http://shahinism.com/blog/1392/01/14/%da%86%db%8c%d9%86%d8%b4-%d9%84%d8%a7%db%8c%d9%88%d8%aa-workman-%d9%88-%d8%af%d8%a7%d8%b3%d8%aa%d8%a7%d9%86-%d9%85%d9%87%d8%a7%d8%ac%d8%b1%d8%aa%d9%85/"&gt;Workman&lt;/a&gt; یا Colemak سوئیچ کنید‌، انگار به کیبورد‌تان دینامیت بسته‌اید! از آن بد‌تر این که با کاراکتر‌های فارسی کار نمی‌کنند.&lt;/p&gt;
&lt;p&gt;این مقدمه را گفتم که بگویم‌، عده‌ای جمع شده‌اند و مدی ساخته‌اند به اسم &lt;a title="Ergoemacs official page" href="http://ergoemacs.org/index.html" target="_blank"&gt;ergoemacs-mode&lt;/a&gt; که هدفش حل مشکلات ذکر شده در مقدمهٔ بالاست. نتیجه‌، از عکس زیر معلوم است:&lt;/p&gt;
&lt;p&gt;&lt;img class=" " alt="ergoemacs-mode رو چینش workman" src="http://dl.dropbox.com/u/25017694/Blog-photos/ergoworkman.png" width="586" height="218"&gt; ergoemacs-mode رو چینش workman&lt;/p&gt;
&lt;p&gt;این عکس طبق چینش Workman تولید شده‌،‌ ولی جای دکمه‌ها در لایوت‌های دیگر‌، از جمله QWERTY و Colemak هم یک‌سان است. از نکات مهم مد نظر قرار داده شده در هنگام طراحی این Key binding‌ها می‌توان به موارد زیر اشاره کرد:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;  کلید‌های Home row بهترین‌ها هستند.&lt;/li&gt;
    &lt;li&gt;Alt خیلی بهتر از Ctrl است. Alt را باید با شصت گرفت که زورش خیلی بیشتر از انگشت کوچیکهٔ مخصوص Ctrl است!&lt;/li&gt;
    &lt;li&gt;به جای سرحرف اول دستورات‌، بهتر است به مکان دستورات هم خوانواده توجه شود. مثلا به مکان کلید‌های جاب‌جایی نگاه کنید. همین‌طور کلید‌های پاک کردن را ببینید!&lt;/li&gt;
    &lt;li&gt;و چند‌تای دیگر که آن‌قدرها هم مهم نیستند.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;نکته این‌جاست که نتیجهٔ کار خیلی عالی شده. آن‌قدر عالی که طی رد و بدل چند ایمیل‌ در&lt;a title="ergoemacs mailing list" href="https://groups.google.com/group/ergoemacs" target="_blank"&gt; لیست ایمیل&lt;/a&gt; پروژه‌، زبان فارسی را هم به این مجموعهٔ کامل اضافه کردیم که نتیجه‌اش را در زیر می‌بینید:&lt;/p&gt;
&lt;p&gt;&lt;img class=" " alt="ergoemacs-mode روی چینتش استاندارد فارسی" src="http://dl.dropbox.com/u/25017694/Blog-photos/ergofa.png" width="586" height="218"&gt; ergoemacs-mode روی چینتش استاندارد فارسی&lt;/p&gt;
&lt;p&gt;کیبورد استاندارد فارسی است که به صورت پیش‌فرض در لینوکس وجود دارد‌، ولی ویندوزی‌ها باید برنامهٔ متناسبش را پیدا و نصب کنند تا پشتیبانی شود D:&lt;/p&gt;
&lt;h5&gt;نصب&lt;/h5&gt;

&lt;p&gt;طبق&lt;a title="این ایمکس دوست داشتنی (مدیر بسته)" href="http://shahinism.com/blog/1392/01/08/%d8%a7%db%8c%d9%86-%d8%a7%db%8c%d9%85%da%a9%d8%b3-%d8%af%d9%88%d8%b3%d8%aa-%d8%af%d8%a7%d8%b4%d8%aa%d9%86%db%8c-%d9%85%d8%af%db%8c%d8%b1-%d8%a8%d8%b3%d8%aa%d9%87/" target="_blank"&gt; آن‌چه که در گذشته گفتم‌&lt;/a&gt;، ergoemacs-mode را از مدیر‌بسته‌های ایمکس نصب کنید و سپس تنظیمات زیر را به فایل ‎.emacs‌‌تان اضافه کنید:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;setenv&lt;/span&gt; &lt;span class="s"&gt;"ERGOEMACS_KEYBOARD_LAYOUT"&lt;/span&gt; &lt;span class="s"&gt;"workman"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'ergoemacs-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ergoemacs-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;در خط اول‌، اسم لایوت پیش‌فرض را اضافه می‌کنیم‌، و در خط‌های بعد ergoemacs-mode را فراخوانی و فعال می‌کنیم. بعد از یک Restart‌، با کلید‌های جدید روبرو می‌شوید D:&lt;/p&gt;
&lt;h5&gt;گرفتن کمک&lt;/h5&gt;

&lt;p&gt;خوب یک تغییر عادت است و احتمالا اول کار خیلی پیش می‌آید که دستورات قبلی‌تان را بزنید و نتیجه نگیرید! برای پیدا کردن کلید‌های جدید‌، کافیست C-h o را وارد کرده و سپس کلید قبلی‌تان را وارد کنید. این تابع بعد از بررسی کلید‌های قدیمی‌، هم‌تایان جدید‌شان را معرفی می‌کند.&lt;/p&gt;
&lt;h5&gt;دیگر سطوح&lt;/h5&gt;

&lt;p&gt;یکی از ویژگی‌های ergoemacs-mode‌، قابلیت تعیین سطحش است. سطوح مختلفی که با توجه به سلیقه‌های مختلف کاربران طراحی شده است. مثلا سطح guru کلید‌های فلش را برای تغییر موقعیت نشانگر می‌بندد و بعد از هر بار زدنشان‌، کلید‌های متناسب با سلیقهٔ ایمکس را نشان‌تان می‌دهد. و یا سطح master (فکر کنم) کلید backspace را خاموش می‌کند تا مجبور شوید از روش‌های پاک کردن کاراکتر ایمکس بهره بگیرید که سریع‌تر است. برای تنظیم این ویژگی‌ها کافیست سطح مورد نظر را انتخاب کنید (بعد از نصب ergoemacs از منو انتخابش کنید و ergoemacs variants را ببینید) و در دستور(setq ergoemacs-variant "SATH") آن را در جای SATH قرار دهید.&lt;/p&gt;
&lt;h5&gt;ergoemacs-extras&lt;/h5&gt;

&lt;p&gt;با فراخوانی این تابع در ایمکس‌، ergoemacs اقدام به ایجاد فایل‌های راهنمای کیبورد ergo در سطوح مختلف به فرمت svg می‌کند که می‌تواند خیلی کمک کننده باشد (عکس‌های موجود در این نوشته هم با همین روش ایجاد شده‌اند.). همین‌طور فایل‌هایی برای تطابق این کلید‌ها با محیط‌های دیگر از جمله bash ایجاد می‌شود که می‌توانند در ایجاد یک‌پارچگی برای محیط کار عالی باشند. (هنوز امتحانش نکرده‌ام ولی نتیجه‌اش را به زودی اطلاع می‌دهم.)&lt;/p&gt;
&lt;p&gt;این فایل‌ها در مسیر ‎~‎‍/.emacs/ergoemacs-extras در دسترسند که با توجه به سطوح مختلف پوشه‌بندی شده‌اند.&lt;/p&gt;
&lt;h5&gt;نتیجه&lt;/h5&gt;

&lt;p&gt;به نظر من نتیجهٔ کار فوق‌العاده قابل قبول است. راحتی استفاده از کلید‌های پر کاربرد و راحت‌تر از آن معکوس کردن اکثر دستورات با Shift فوق‌العاده کمک می‌کند. به طور پیش‌فرض برای خیلی کار‌ها مجبوریم در ایمکس از ارسال آرگومان به دستورات برای تغییر حالت‌شان استفاده کنیم که در Ergoemacs این کار عموما با Shift انجام می‌گیرد. مثلا C-f جستجوی رو به جلو انجام می‌دهد و C-S-f جستجوی رو به عقب!&lt;/p&gt;
&lt;p&gt;از طرفی کلید‌های C-a که در تمام محیط‌های دیگر برای انتخاب کل محتویات صفحه است و یا کلید‌های C-z, C-x, C-c, C-v, C-f, C-o, C-s, C-s-s , و خیلی کلید‌های دیگر که در محیط‌های دیگر از آن‌ها بهره می‌گیریم‌، به راحتی در این‌جا نیز جواب می‌دهند و کار ویرایش را فوق‌العاده راحت‌تر کرده‌اند. حتی با Ergoemacs دستور جدیدی اضافه شده که می‌توان با C-n یک صفحهٔ جدید ساخت‌، بدون این که نیاز به افزودن نامی به آن داشته باشیم.&lt;/p&gt;
&lt;p&gt;یک قابلیت جالب دیگر‌، استفاده از کلید‌های yanking‌ (کپی پیست در ایمکس) بدون Region (متن انتخاب شده) است. در این صورت‌، دستورات کل خط یا صفحه را تحت تاثیر قرار می‌دهند.&lt;/p&gt;
&lt;p&gt;در آینده بیشتر هم در مورد ergoemacs حرف می‌زنیم.&lt;/p&gt;</description><category>CUA-mode</category><category>Emacs</category><category>ergoemacs-mode</category><category>ایمکس</category><category>برنامه نویسی</category><category>دوره</category><category>نرم افزار</category><category>کدباز</category><guid>http://shahinism.github.io/posts/blog13920119yn-ymkhs-dwst-dshtny-ergoemacs-mode.html</guid><pubDate>Mon, 08 Apr 2013 19:29:09 GMT</pubDate></item><item><title>این ایمکس دوست داشتنی (تعریف کلید میانبر)</title><link>http://shahinism.github.io/posts/blog13920117yn-ymkhs-dwst-dshtny-tryf-khlyd-mynb.html</link><description>&lt;p&gt;&lt;/p&gt;&lt;p&gt;یکی از حیاتی‌ترین چیز‌هایی که در ایمکس لازم است بدانیم‌، چگونگی تعریف کلید میانبر برای توابع مختلف است. همان‌طور که احتمالا تا این‌جای قضیه متوجه شده‌اید‌، همهٔ کار‌هایی که در ایمکس انجام می‌دهیم‌، توابعی است که چه همراه خود ایمکس وجود دارند و چه با استفاده از بسته‌هایی که نصب می‌کنیم به آن اضافه می‌شوند. این توابع را می‌توان به صورت M-x FUNCTION_NAME RET  صدا کرد. اما در هنگام کار در ایمکس‌، سخت است که برای هر دستوری‌، مثل رفتن به خط بعد/قبل بیاییم و به این روش عمل کنیم. این است که برای هر تابع پر استفاده‌ای که داریم‌، یک کلید میانبر تعریف می‌کنیم.
لازم به ذکر است که برای اثبات بحث بالا‌، می‌توانید از تابع describe-key  همراه ایمکس استفاده کنید. کار این تابع این است که به شما بگوید که کلید میانبر مد نظر‌تان‌، چه تابعی را صدا می‌کند. برای نمونه‌، این دستور را وارد کنید M-x describe-key RET C-x C-f . همان‌طور که می‌بینید تابع مربوطه در یک پنجرهٔ جدید به نمایش در می‌آید. حالا برویم سر بحث تعریف کلید میانبر:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h5&gt;کلید میانبر سراسری&lt;/h5&gt;
&lt;p&gt;منظور از کلید میانبر سراسری‌، کلید‌هایی است که در همهٔ Major-mode‌ها (مد‌های اصلی) به راحتی عمل می‌کنند. برای نمونه C-n  یک کلید میانبر سراسری است. در تمامی مد‌ها اعم از ویرایش متن معمولی و یا کد برنامهٔ C‌، این کلید میانبر‌، نشانگر را به خط بعد منتقل می‌کند. برای تعریف چنین کلید میانبری می‌توانیم از یکی از دو روش زیر بهره ببریم:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-set-key&lt;/span&gt; &lt;span class="s"&gt;"KEY"&lt;/span&gt; &lt;span class="ss"&gt;'FUNCTION_NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;define-key&lt;/span&gt; &lt;span class="nv"&gt;global-map&lt;/span&gt; &lt;span class="s"&gt;"KEY"&lt;/span&gt; &lt;span class="ss"&gt;'FUNCTION_NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;برای کسب اطلاعات بیشتر در مورد هر کدام از این توابع می‌توانید از تابع describe-function  همراه ایمکس کمک بگیرید. برای مثال M-x describe-function RET global-set-key RET . یا از کلید میانبرش استفاده کنید C-h f . همین‌طور اگر نشان‌گرتان روی یک تابع ایمکس باشد‌، خود تابع می‌تواند آن را حدس بزند.&lt;/p&gt;
&lt;p&gt;تابع اول که تقریبا سر راست است. global-set-key  همان‌طور که از نامش پیداست‌، یک کلید سراسری به اسم KEY که می‌تواند ترکیبی به صورت&lt;span class="lang:default decode:true  crayon-inline"&gt;"‎\C-c f" باشد‌، برای تابع FUNCTION_NAME تعریف می‌کند. همان‌طور که احتمالا متوجه شده‌اید‌، من برای نشان‌دادن Ctrl  در کلید میانبرم از ‎‎\C  استفاده کردم. همین‌طور برای Alt  باید از ‎\M  استفاده کنم. تعریف کلید به این صورت شاید کمی خسته کننده و نا خوانا به نظر بیاید. برای راحتی بیشتر می‌توان از تابع kbd  استفاده کرد. برای نمونه طبق مثالمان‌، همچین چیزی خواهیم داشت:&lt;/span&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-c f"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'FUNCTION_NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;خود تابع kbd  می‌داند که چطور این کلید را ترجمه کند. برای کسب اطلاعات بیشتر در این مورد می‌توانید باز هم از C-h f  یا تابع متناظرش استفاده کنید. باور کنید که اطلاعات خیلی بهتری به دست می‌آورید ;-)&lt;/p&gt;
&lt;p&gt;در تابع دوم ما کار مشابهی را انجام دادیم‌، با این تفاوت که تابع define-key  نیاز به این دارد که بداند کلید میانبر را در کدام محیط اجرا کند. به عبارت دیگر‌، کلید میانبر در کدام Mode در دسترس باشد. از آن‌جایی که قصد ما تعریف کلید میانبر سراسری است به محیط global-map  اشاره می‌کنیم که به define-key  می‌فهماند کلید باید در همه جا در دسترس باشد.&lt;/p&gt;
&lt;h5&gt;کلید میابر محدود به مد خاص&lt;/h5&gt;

&lt;p&gt;با این توضیح آخر بخش قبل‌، فکر کنم موضوع کاملا روشن شده باشد. کافیست برای تعریف میانبر برای یک مد خاص‌، محیط مربوط به آن مد را به define-key  نشان دهیم. برای مثال اگر می‌خواهیم که کلید میانبر تنها در محیط متنی در دسترس باشد‌، به جای global-map  از text-mode-map  استفاده می‌کنیم. محیط‌های مربوط به هر مد اصلی‌، عموما به صورت mode-name-map  شناسایی می‌شوند و در هنگام تعریف کلید‌، کافیست نام map مد مورد نظر‌تان را کشف کنید ;-)&lt;/p&gt;</description><category>define-key</category><category>Emacs</category><category>global-map</category><category>global-set-key</category><category>text-mode-map</category><category>ایمکس</category><category>برنامه نویسی</category><category>نرم افزار</category><category>کدباز</category><guid>http://shahinism.github.io/posts/blog13920117yn-ymkhs-dwst-dshtny-tryf-khlyd-mynb.html</guid><pubDate>Sat, 06 Apr 2013 09:06:38 GMT</pubDate></item><item><title>این ایمکس دوست داشتنی (مدیر بسته)</title><link>http://shahinism.github.io/posts/blog13920108yn-ymkhs-dwst-dshtny-mdyr-bsth.html</link><description>&lt;p&gt;&lt;/p&gt;&lt;p&gt;در اولین قدم‌های زندگی با ایمکس‌، قصد داریم که آن را به محیط راحت‌تری تبدیل کنیم. ایمکس همان اول کار هم خیلی خوب است‌، ولی یکی از حیاتی‌ترین چیز‌هایی که باید در کنار ایمکس یاد بگیریم‌، این است که به نیاز‌های‌مان بیشتر از محدودیت‌های یک نرم‌افزار احترام بگذاریم. پس برای شروع کار باید کمی انگولکش کنیم. قبل از شروع کار‌، لازم می‌دانم به چند نکتهٔ دیگر هم اشاره کنم:
&lt;/p&gt;&lt;ul&gt;&lt;li&gt;همیشه روش شما‌، از آنی که من نشان‌تان می‌دهم بهتر است‌! تعارف که نداریم‌. قرار هم نیست که کس دیگری را با کانفیگ ایمکس‌تان راضی کنید. نوشته‌های من را بخوانید و سعی کنید آن را آن‌طوری که خودتان راحت‌ترید اجرا کنید. سپس این کانفیگ‌های جدید‌تان را با من و دیگر خوانندگان به اشتراک بگذارید.&lt;/li&gt;
    &lt;li&gt;من یک توسعه دهنده‌ام‌. یا حداقل سعی دارم که باشم. پس طبیعی است که بیشتر ابزار‌هایی را ببینم که به کار‌هایی که انجام می‌دهم ربط داشته باشد. مثلا ابزار‌های مرتبط با Python, PHP و توسعهٔ وب. اما جدای از این‌ها یک وبلاگ‌نویس هم هستم. و اصولا از ایمکس استفاده می‌کنم. پس شاید این اول کار‌، تنظیمات خیلی ربط به برنامه‌نویسی داشته باشد. ولی کم کم به بخش‌های دیگر و جذاب‌تر ایمکس هم وارد می‌شویم.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;فعلا فکر کنم همین‌ها بودند که می‌خواستم بگویم. برویم سر اصل مطلب:&lt;/p&gt;
&lt;p&gt;از نسخهٔ &lt;strong&gt;۲۴&lt;/strong&gt; ایمکس به این‌طرف‌، یک مدیر بستهٔ عالی هم به آن اضافه شده. این یعنی این که نصب‌، نگهداری و بروزرسانی بسته‌های اضافه‌ای که روی ایمکس سوار می‌کنیم‌، فوق‌العاده آسان شده. پس برای شروع کار‌، چند مخزن بسته‌های ایمکس (جایی که ایمکس می‌تواند ابزار‌های جدید را پیدا‌، دانلود و نصب کند) را به این مدیر بسته می‌شناسانیم. برای این کار کافیست خطوط زیر را به فایل ‎.emacs اضافه کنیم. این فایل در سیستم‌عامل‌های یونیکس‌بیس (Linux, Mac, BSD و غیره) در پوشهٔ خانگی‌تان پیدا می‌شود. در مورد ویندوز نمی‌دانم این فایل کجاست و خود ویندوزی‌تان باید بروید پیدایش کنید. ولی روش کار غیر از پیدا کردن این فایل‌، برای‌تان مشابه با یونیکس‌بیس‌هاست ;-)&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;package-archives&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"gnu"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"http://elpa.gnu.org/packages/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"marmalade"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"http://marmalade-repo.org/packages/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"melpa"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"http://melpa.milkbox.net/packages/"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;package-initialize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;در خط اول می‌گوییم که بستهٔ مدیر بسته‌ها (Package Manager) را لود کن. خط دوم‌، سه مخزن مختلف را به متغیر package-archives که مدیر بسته از آن برای دیدن لیست مخازن استفاده می‌کند نسبت می‌دهیم. و در خط سوم با صدا زدن تابع package-initialize به ایمکس می‌گوییم که بسته‌های نصب شده با Package Manager را در کجا پیدا کند.&lt;/p&gt;
&lt;p&gt;تکه کد ارائه شدهٔ بالا به زبان Elisp است. زبانی که تنظیمات و بسته‌های ایمکس عموما با آن نوشته می‌شوند. وقتی ایمکس را اجرا می‌کنیم‌، ایمکس به صورت خودکار فایل ‎.emacs را برای یافتن تنظیماتش صدا می‌کند. اگر خدای ناکرده در حین انجام تنظیمات این‌چنینی‌، خرابکاری‌ای کردید و دیگر ایمکس‌تان لود نشد‌، لازم نیست که بروید یک ویرایشگر دیگر پیدا کنید و ‎.emacs را ویرایش کنید تا درست شود. کافیست ایمکس را به صورت &lt;span class="lang:sh decode:true crayon-inline"&gt;emacs -Qاجرا کنید که دیگر فایل ‎.emacs را لود نکند. سپس به ویرایش‌تان بپردازید و ایمکس را دوباره لود کنید. در ادامهٔ‌ این سری پست‌ها‌، بار‌ها پیش می‌آید که ما فایل ‎.emacs را ویرایش می‌کنیم. و از آن‌جایی که ایمکس تنها در هنگام بالا آمدن آن را لود می‌کند‌، ممکن است خسته کننده به نظر بیاید که همیشه و بعد از هر تغییر‌، ایمکس را ببندید و دوباره باز کنید. برای این کار می‌توانید از یکی از دو روش زیر بهره بگیرید:&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;eval-buffer&lt;/h4&gt;

&lt;p&gt;اگر راهنمای همراه ایمکس را خوانده باشید‌، حتما می‌دانید که چطور توابع تعریف شدهٔ ایمکس را صدا کنید. اگر نه‌، من بهتان می‌گویم (ولی تنبلی&lt;/p&gt;
&lt;p&gt;&lt;img class=" " alt="موقعیت خط اعلان در فریم ایمکس." src="http://dl.dropbox.com/u/25017694/Blog-photos/emacs2.png" width="299" height="104"&gt; موقعیت خط اعلان در فریم ایمکس.&lt;/p&gt;
&lt;p&gt;را کنار بگذارید و یک بار هم که شده‌، سر سری آن راهنما را بخوانید. ضرر نمی‌کنید) کافیست Meta-x  را وارد کنید (منظور از Meta عموما کلید Alt  است‌. بعضی کامپیوتر‌ها کلید دیگری برای این کار دارند که من فکر نمی‌کنم شما از آن‌ها داشته باشید. اگر هم دارید حتما خودتان می‌دانی&lt;/p&gt;
&lt;p&gt;د آن کلید کدام است ;-)). پس از وارد کردن این دستور‌، در محل اعلان فریم ایمکس (پایین‌ترین خط فریم) نشان‌گرتان را می‌بینید که منتظر است دستوری برایش اعلام کنید. این دستور در واقع اسم یک تابع از ایمکس‌تان است. تابع &lt;span class="lang:lisp decode:true  crayon-inline "&gt;eval-buffer  کارش این است که کد Elisp موجود در بافر حاضر (بافری که وقتی درون آن هستید تابع را صدا کرده‌اید) را اجرا کند. این اجرا بلافاصله روی تنظیمات ایمکس‌تان اعمال می‌شود و می‌توانید نتیجه‌اش را در ایمکس‌تان ببینید. البته گاها تغییرات آن‌قدر بزرگ است که بهتر است ایمکس را دوباره اجرا کنید تا عواقبش را ببینید. ولی برای خالی نبودن عریضه‌، این دستور می‌تواند کمک حال خوبی باشد.&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;C-x C-e&lt;/h4&gt;

&lt;p&gt;حتما توجه کرده‌اید که هر دستور ایمکس درون یک جفت پرانتز نوشته می‌شود. شما می‌توانید‌، بعد از نوشتن هر دستور‌، با انتقال نشانگر به آخر آن (بعد از پرانتز) و زدن دستور &lt;span class="lang:lisp decode:true  crayon-inline "&gt;C-x C-e  اجرایش کنید و نتیجه را ببینید. برای مثال دستور زیر را وارد کنید:&lt;/span&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;نشانگر را به آخرش ببرید و &lt;span class="lang:lisp decode:true  crayon-inline "&gt;C-x C-e را وارد کنید. در خط اعلان نتیجهٔ جمع ۱ و ۲ را می‌بینید. از این روش می‌توانید برای تغییرات کوچک و زمانی که بافر‌تان زیادی بزرگ است و نیاز به زمان زیادی برای لود کامل دارد بهره ببرید. دیگر زیاده گویی نمی‌کنم و به سراغ راهنمای مدیر بسته می‌روم:&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;مدیر بسته&lt;/h4&gt;

&lt;p&gt;کار با این بسته فوق‌العاده آسان است. بعد از کانفیگی که نشان‌تان دادم‌، کافیست تابع package-list-packages را صدا بزنید ( &lt;span class="lang:lisp decode:true  crayon-inline "&gt;M-x package-list-packages ). امیدوارم این را بدانید که نیازی نیست همهٔ اسم تابع را تایپ کنید و با دکمهٔ Tab می‌توانید اسم تابع را کامل کنید D: بعد از چند ثانیه‌، ایمکس لیست آخرین بسته‌ها را از اینترنت دریافت می‌کند و بهتان نشان می‌دهد. در ادامهٔ این لیست شما بسته‌هایی که با استفاده از این ابزار نصب کرده‌اید (می‌کنید) و لیست بسته‌های پیش‌فرض ایمکس را می‌بینید.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;برای دیدن توضیحات مربوط به هر بسته‌، کافیست به روی نامش رفته و&lt;span class="lang:lisp decode:true crayon-inline"&gt;RET(اینتر خودمان) را بزنید. برای نصبش کافیست وقتی نشانگر روی نام بسته است کلید i  را بزنید تا برای نصب انتخاب شود. توجه کنید که فعلا فقط انتخابش کرده‌اید و بسته نصب نشده. با این کار کنار نام بسته (سمت چپ) یک I اضافه می‌شود که یعنی بسته برای نصب انتخاب شده. همینطور با زدن &lt;span class="lang:default decode:true  crayon-inline"&gt;U (حرف U بزرگ) مدیر بسته به صورت خودکار بسته‌هایی که نیاز به به روز رسانی دارند را انتخاب می‌کند. بس از انتخاب بسته برای نصب یا به روز رسانی‌، کافیست که یک x  تایپ کنید. مدیر بسته شروع به نصب بسته‌ها می‌کند.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;تابع package-install&lt;/h4&gt;

&lt;p&gt;با استفاده از این تابع می‌توانید بدون لود کردن لیست بسته‌ها‌، اقدام به نصب بسته‌ای جدید کنید. روش کار خیلی ساده است:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nv"&gt;M-x&lt;/span&gt; &lt;span class="nv"&gt;package-install&lt;/span&gt; &lt;span class="nv"&gt;RET&lt;/span&gt; &lt;span class="nv"&gt;PACKAGE_NAME&lt;/span&gt; &lt;span class="nv"&gt;RET&lt;/span&gt;

&lt;span class="nv"&gt;M-x&lt;/span&gt; &lt;span class="nv"&gt;package-install&lt;/span&gt; &lt;span class="nv"&gt;PACKAGE_NAME&lt;/span&gt; &lt;span class="nv"&gt;RET&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ولی من عموما ترجیح می‌دهم که به لیست بسته‌ها بروم و از آن‌جا نصب‌شان کنم. چون با این کار از آخرین تغییرات لیست و توضیحات بسته آگاه می‌شوم. تا همین‌جای کار کافیست‌. کمی در بین بسته‌ها چرخ بزنید و چند‌تایی از آن‌ها را امتحان کنید.&lt;/p&gt;</description><category>elisp</category><category>package</category><category>ایمکس</category><category>ایمکس</category><category>دوره</category><category>مدیر بسته</category><category>نرم افزار</category><category>کدباز</category><guid>http://shahinism.github.io/posts/blog13920108yn-ymkhs-dwst-dshtny-mdyr-bsth.html</guid><pubDate>Thu, 28 Mar 2013 10:00:45 GMT</pubDate></item><item><title>این ایمکس دوست داشتنی (مقدمه)</title><link>http://shahinism.github.io/posts/blog13920107yn-ymkhs-dwst-dshtny-mqdmh.html</link><description>&lt;p&gt;&lt;/p&gt;&lt;p&gt;ایمکس‌، ایمکس‌، ایمکس‌! اگر از دوست‌داران نهضت نرم‌افزار آزاد و شاید نهایتا متن‌باز باشید‌، احتمالا اسمش را شنیده‌اید (این در صورتی است که در حال حاضر از آن استفاده نمی‌کنید D:). خوب اگر شرط ذکر شده شامل حالتان نمی‌شود‌، تنها می‌توانم بگویم که شما هیچ تصوری نسبت به این که ایمکس‌، چه نوع نرم‌افزاری است‌، نمی‌توانید داشته باشید‌! نه‌، خوب به بند آخر جمله توجه کنید‌: &lt;strong&gt;&lt;span style="color: #ff0000;"&gt;نمـــی‌توانــــید‌، داشته باشید&lt;/span&gt;&lt;/strong&gt;! اگر اسم ایمکس به گوش‌تان خورده و هنوز پارهٔ تنتان نشده‌، احتمالا تنها با عبارت‌هایی مثل:«من از &lt;strong&gt;vim&lt;/strong&gt; استفاده می‌کنم.» یا مثلا «‌من با &lt;strong&gt;IDE‌ها&lt;/strong&gt; راحت‌تر برنامه توسعه می‌دم.» یا اصلا از این‌ها بدتر‌: «من اصلا برنامه‌نویس نیستم که بخوام بدونم ایمکس چیه» خودتان را گول زده‌اید!
گفتم «شما در صورتی که از ایمکس استفاده نمی‌کنید، نمی‌توانید تصوری از چیستی‌اش داشته باشید» چون عملا با هیچ نمونهٔ مشابهی از آن کار نکرده‌اید‌! شما حتی نمی‌دانید که این نرم‌افزار قادر است کدام نیاز‌تان را بر طرف کند. با خود‌تان رو راست باشید‌‌! قبول کنید که با ابزاری روبرو هستید که نمی‌دانید باید چه انتظاری از آن داشته باشید.&lt;/p&gt;
&lt;p&gt;&lt;a title="ایمکس در ویکی‌پدیا" href="http://wikipedia.org/wiki/Emacs" target="_blank"&gt;&lt;img alt="لوگوی Gnu Emacs." src="http://upload.wikimedia.org/wikipedia/commons/thumb/5/5f/Emacs-logo.svg/270px-Emacs-logo.svg.png" width="270" height="217"&gt;&lt;/a&gt; لوگوی Gnu Emacs.&lt;/p&gt;
&lt;p&gt;خوب احتمالا به قدر کافی گیج شده‌اید‌! حتما با خود می‌گویید که چه نیازی به ابزاری دارم که نمی‌دانم به چه دردی می‌خورد‌؟ خوب کلید مساله همین‌جاست‌! اگر می‌خواهید با ایمکس آشنا شوید‌، باید از او انتظار داشته باشید که تمام کار‌های‌تان را برای‌تان انجام دهد‌! چطور؟ خوب چطوری‌اش را خیلی ساده واگذار می‌کنیم به پست‌هایی که قرار است طی یک سری پست سریالی در این وبلاگ منتشر کنم! اما قبل از شروع به انتشار‌شان باید به چند نکته اشاره کنم:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a title="صفحهٔ خانگی ایمکس" href="http://www.gnu.org/software/emacs/emacs.html" target="_blank"&gt;Gnu Emacs&lt;/a&gt;! آن بیرون چند توزیع مختلف ایمکس وجود دارد. ما در این‌جا موضوع بحث‌مان فرزند خلف ریچارد استالمن Gnu Emacs است که قابلیت نصب روی پلتفرم‌های مختلف‌، از جمله ویندوز را دارد. پس نیاز نیست که بترسید. البته مطمئنم اگر هنوز جرات نکرده‌اید از دمپایی ابری مایکروسافت جدا شوید‌، جرات سوئیچ به هیولایی مثل ایمکس را هم نخواهید داشت. هر چند که ایمکس در ویندوز هم می‌تواند زندگی‌تان را عوض کند. ;-)&lt;/li&gt;
    &lt;li&gt;من هم ایمکس نمی‌دانم‌! ساده است. حدودا یک سالی می‌شود که از ایمکس استفاده می‌کنم‌، ولی حتی تا همین یکی دو هفته پیش همیشه با ترسی قلمبه به سراغش می‌رفتم. اما یک جور‌هایی الان احساس می‌کنم به جایی رسیده‌ام که می‌توانم بهتر از ایمکس کار بکشم.&lt;/li&gt;
    &lt;li&gt;قرار نیست در این‌جا ایمکس یادتان بدهم‌! این یکی حتی از قبلی ساده‌تر است. برای یادگیری ایمکس‌، هیچ منبعی بهتر از خود ایمکس نیست! چطور؟ خیلی ساده‌، ایمکس‌تان را باز کنید و &lt;strong&gt;C-h t&lt;/strong&gt; را وارد کنید. اگر خیلی خیلی تازه‌کارید این دستوری که نوشتم یعنی‌، کلید Ctrl را پایین نگه دارید‌، h را نوازش کنید و سپس هر دو کلید را رها کرده و t را یک بار فشار دهید. ساده بود؟ آماده باشید که با یکی از هیجان‌انگیز‌ترین آموزش‌های عمرتان روبرو شوید (دروغ گفتم‌، احتمالا خیلی خیلی برای‌تان خسته کننده خواهد بود. چون احتمالا فکر می‌کنید که خیلی از این کار‌ها را با Visual Studio یا چه می‌دانم یک ادیتور دیگر که الان استفاده می‌کنید‌، خیلی راحت‌تر انجام می‌دهید. ولی اگر به من اعتماد دارید‌، باور کنید که اشتباه می‌کنید.).&lt;/li&gt;
    &lt;li&gt;این آموزش که انگلیسی است‌! دقیقا‌! شاید فکر کنید که با ترجمهٔ این آموزش بهتر می‌توانستم کمک کنم. ولی نه‌، آن‌قدر چیز برای یادگرفتن در مورد ایمکس به زبان انگلیسی وجود دارد‌، آن‌قدر نیاز به کمک گرفتن از ایمکس خواهیم داشت‌، آن‌قدر راهنماهای خوب در ایمکس وجود دارد که اگر تا الان انگلیسی‌تان داغان است‌، فکری به حال بهبودش بکنید. نیازی هم به کلاس‌ها و کتاب‌های گران‌قیمت ندارید. همین راهنما را باز کنید و شروع به خواندنش کنید. هر وقت هر جایی گیر کردید‌، با یک دیکشنری ترجمه را پیدا کنید. اوائل کمی سخت است‌، ولی هر چه جلوتر که می‌روید‌، به این شیوهٔ یادگیری بیشتر وابسته می‌شوید و لذت می‌برید ;-)&lt;/li&gt;
    &lt;li&gt;اگر ایمکس یاد نمی‌دهی‌، پس این پست‌هایت به درد چه می‌خورد؟ خوب منظورم از آن بند این بود که چیز‌های پایه‌ای را خودتان باید یاد بگیرید. من در این پست‌ها سعی دارم جاهایی را نشان‌تان دهم که در تخیل‌تان هم نمی‌گنجد.&lt;/li&gt;
    &lt;li&gt;چرا پست‌های سریالی؟ خوب ایمکس خیلی گنده است. خیلی خیلی کار می‌تواند انجام دهد. نوشتن یک کتاب ۱۰۰۰ صفحه‌ای هم نمی‌تواند شما را با همهٔ نادیده‌های‌تان آشنا کند. اما پست‌های کوتاه‌، که هم اشاره به نحوهٔ تنظیم قابلیت‌ها و هم اشاره به ویژگی‌های‌شان دارد‌، می‌تواند هم اشتیاق استفاده از آن‌ها را ایجاد کند و هم وقت کافی برای تجربه‌شان بدهد ;-)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;دیگر ادامه نمی‌دهم‌، همین‌قدر هم برای یک مقدمه کافیست. البته مطمئنم که C-h t برای‌تان مقدمهٔ خیلی خیلی بهتری خواهد بود. پس درنگ نکنید و به سراغش بروید ;-)&lt;/p&gt;</description><category>elisp</category><category>Emacs</category><category>ادیتور</category><category>ایمکس</category><category>ایمکس</category><category>برنامه نویسی</category><category>دوره</category><category>نرم افزار</category><category>ویندوز</category><category>کدباز</category><guid>http://shahinism.github.io/posts/blog13920107yn-ymkhs-dwst-dshtny-mqdmh.html</guid><pubDate>Wed, 27 Mar 2013 09:09:34 GMT</pubDate></item><item><title>دریافت متن ترانه‌های MP3 با لینوکس</title><link>http://shahinism.github.io/posts/blog13911119dryft-mtn-trnhhy-mp3-b-lynwkhs.html</link><description>&lt;p&gt;&lt;/p&gt;&lt;p&gt;بله‌، بله‌، خودم خوب می‌دانم که هزار و یک برنامهٔ پخش MP3 آن بیرون است که این کار را خودشان مثل آدم انجام می‌دهند. ولی Nokia N70 بنده‌، شعورش به این چیز‌ها قد نمی‌دهد. همین‌قدر هم که می‌تواند فایل صوتی پخش کند‌، جای شکرش باقی است. خوب حقیقتش می‌شود که با خرج کمی GPRS و البته با یک کمی انگولک این متن‌ها را پیدا کرد‌. ولی خوب کالیبر‌، بالا‌تر از این حرف‌هاست. این است که تصمیم گرفتم‌، برای این کار برنامه‌ای سر هم کنم.
&lt;/p&gt;&lt;h5&gt;مقدمات&lt;/h5&gt;
&lt;p&gt;اولین قدم‌، پیدا کردن سایتی بود که هم متن ترانه‌ها را به قدر کفایت داشته باشد‌، هم یک API درست درمان‌، یعنی رابطی که بتوان مثل آدم از طریق برنامه با آن به تبادل داده پرداخت نیز ارائه کند. خوب‌، خوشبختانه‌، این خارجکی‌ها‌، بر خلاف ما‌، سایت بدرد بخور زیاد دارند. پس انتخاب‌هایم خیلی زیاد بودند. اما کمی بیشتر که جستجو کردم دیدم &lt;a title="Fetching lyrics in the command line" href="https://gist.github.com/febuiles/1549991" target="_blank"&gt;آدم سالاری&lt;/a&gt; قبلا همچین اسکریپتی نوشته که مثل چــی هم کار می‌کند ;-)&lt;/p&gt;
&lt;p&gt;اصل اسکریپت همچین جایی است:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;curl -s &lt;span class="s2"&gt;"http://makeitpersonal.co/lyrics?artist=$artist&amp;amp;amp;title=$title"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;خیلی ساده با curl یک درخواست به API سایت می‌فرستیم که در آن ‎$artist اسم خوانندهٔ ترانه و ‎$title اسم خود ترانه است. که البته‌، چون url‌ها نحو (Syntax) خاص خودشان را دارند‌، این اسکریپت‌نویس دوست داشتنی ما‌، با دو خط زیر‌، اسم خواننده و ترانه را معتبر می‌کند:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nv"&gt;artist&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;perl -MURI::Escape -e &lt;span class="s1"&gt;'print uri_escape($ARGV[0]);'&lt;/span&gt; &lt;span class="s2"&gt;"$artist_name"&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;perl -MURI::Escape -e &lt;span class="s1"&gt;'print uri_escape($ARGV[0]);'&lt;/span&gt; &lt;span class="s2"&gt;"$song_title"&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;همین‌؟ تمام شد؟‌ خوب این اسکریپت کاری که می‌خواستیم را انجام داد. ولی شاهین را که می‌شناسید‌. دوست دارد کار‌هایش را &lt;a title="چ‌چ‌چ (۹): چطور به صورت فله‌ای لینک‌های یوتیوب را از وب‌سایتی استخراج و دانلود کنیم‌!" href="http://shahinism.com/blog/1390/09/26/%da%86%e2%80%8c%da%86%e2%80%8c%da%86-%db%b9-%da%86%d8%b7%d9%88%d8%b1-%d8%a8%d9%87-%d8%b5%d9%88%d8%b1%d8%aa-%d9%81%d9%84%d9%87%e2%80%8c%d8%a7%db%8c-%d9%84%db%8c%d9%86%da%a9%e2%80%8c%d9%87%d8%a7/" target="_blank"&gt;فله‌ای&lt;/a&gt; انجام دهد! یک کمی سخت است که هر بار بیایم اسم ترانه و خواننده را به اسکریپت بگویم‌، بعد شیلنگ خروجی را بگیرم توی یک فایلی که می‌خواهم و از این حرف‌ها. پس می‌رویم سراغ دستکاری بیشتر این اسکریپت.&lt;/p&gt;
&lt;h5&gt;خجالت بکش شاهین&lt;/h5&gt;

&lt;p&gt;حتما می‌دانید که می‌توان به فایل‌های MP3 تگ زد. همین تگ‌هایی که اسم خواننده و ترانه و ژانر و این‌جور حرف‌ها را می‌توان بهشان خوراند که تا دست آخر با MP3 Player خیلی راحت‌تر بشود سر و سامان‌شان داد. البته اگر راست کار‌تان&lt;a title="موسیقی در وب فارسی‌" href="http://shahinism.com/blog/1389/01/15/%d9%85%d9%88%d8%b3%db%8c%d9%82%db%8c_%d8%af%d8%b1_%d9%88%d8%a8_%d9%81%d8%a7%d8%b1%d8%b3%db%8c%e2%80%8c/" target="_blank"&gt; سایت‌های موسیقی ایرانی&lt;/a&gt; است‌، از این تگ‌ها مطمئنا خیری نسیب‌تان نشده‌، چون از دَم مثل ندید بدید‌ها پرش کرده‌اند با آدرس سایت داغان‌شان ;-)&lt;/p&gt;
&lt;p&gt;به هر حال‌، از آن‌جایی که آلبوم موسیقی مورد نظر من‌، مثل آدم تگ خورده بود‌، قصد داشتم تا از این تگ‌ها استفاده کنم. همیشه هم در مخیله‌ام این‌طور تصور می‌کردم که این تگ‌ها با یک روش مخوفی درون فایل موسیقی که اصلا نمی‌دانم چیست قایم شده‌اند و خواندن‌شان نیاز به کتاب‌خانه‌ای چیزی دارد که من از طرز کارش سر در نمی‌آورم. این بود که قصد داشتم اصلا کل اسکریپت را به برنامه‌ای به پایتون تغییر دهم. ولی خوب‌، یک سرچ کوچک کردم و کلی &lt;b&gt;خجالت کشیدم&lt;/b&gt;.&lt;/p&gt;
&lt;p&gt;همان‌طور که در&lt;a title="Bash Script: Reading ID3v1 Tags" href="http://phoxis.org/2011/08/24/bash-script-reading-id3v1-tags/" target="_blank"&gt; این لینک&lt;/a&gt; توضیح داده شده‌، عموما‌، ۱۲۸ بیت آخر فایل MP3 شامل تگ‌های آن است. و ابزار‌های به ظاهر سادهٔ گنو/لینوکسی‌، مثل چـــی‌، کمک‌مان می‌کنند که این تگ‌ها را بخوانیم‌. ببینید:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nv"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;tail -c128 &lt;span class="s2"&gt;"$file"&lt;/span&gt; | tr &lt;span class="s1"&gt;'\0'&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;id3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;head -c10 &lt;span class="s2"&gt;"$file"&lt;/span&gt; | tr &lt;span class="s1"&gt;'\0'&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;سر هم کردن اسکریپت نهایی&lt;/h5&gt;

&lt;p&gt;دیگر حالا‌، هم همهٔ ابزار‌های مورد نیاز‌مان را داریم‌، هم کلی چیز جدید یاد گرفته‌ایم. این است که‌، اسکریپت نهایی را سر هم می‌کنیم. که می‌توانید از &lt;a title="lyric script" href="https://github.com/shahinism/Scripts/blob/master/Shell/lyric" target="_blank"&gt;این لینک&lt;/a&gt; دریافتش کنید. برای استفاده از آن هم کافیست که اسم هر تعداد ترانهٔ MP3 را که دل‌تان می‌خواهد در جلویش تایپ کنید تا خودش باقی کار‌ها را انجام دهد.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;نکته:&lt;/b&gt; خوب گاها پیش می‌آید که اسم ترانه‌، شامل کلماتی نظیر (Live) و یا (Bonus) باشد. و یا شاید اسم سایتی‌، چیزی را شامل شود. در این صورت‌، احتمالا API ما بر می‌گرداند که چیزی پیدا نکردم و از این حرف‌ها‌. ولی اسکریپت بیشعور ما آن را هم درون یک فایل هم اسم ترانه با فرمت txt ذخیره می‌کند. این‌جایش را دیگر خودتان می‌توانید با هنر دستکاری فایل لینوکسی‌تان‌، راست و ریست کنید ;-)&lt;/p&gt;</description><category>bash</category><category>MP3</category><category>Python</category><category>Script</category><category>برنامه نویسی</category><category>موسیقی</category><category>نرم افزار</category><category>کدباز</category><category>گنو/لینوکس</category><guid>http://shahinism.github.io/posts/blog13911119dryft-mtn-trnhhy-mp3-b-lynwkhs.html</guid><pubDate>Thu, 07 Feb 2013 19:38:27 GMT</pubDate></item><item><title>چرا گنو/لینوکس را دوست دارم؟ به سبک شاهینیسم!</title><link>http://shahinism.github.io/posts/blog13911111chr-gnwlynwkhs-r-dwst-drm-bh-sbkh-shhy.html</link><description>&lt;p&gt;&lt;/p&gt;&lt;p&gt;در مورد قدرت گنو/لینوکس و عشق‌بازی‌هایم با آن‌، قبلا در&lt;a title="تمامی ارسال‌ها" href="http://shahinism.com/%d8%aa%d9%85%d8%a7%d9%85%db%8c-%d8%a7%d8%b1%d8%b3%d8%a7%d9%84%e2%80%8c%d9%87%d8%a7/" target="_blank"&gt; این وبلاگ&lt;/a&gt; و جاهای دیگر‌، بسیار گفته‌ام. بدیهی است که &lt;a title="تمامی ارسال‌ها" href="http://shahinism.com/%d8%aa%d9%85%d8%a7%d9%85%db%8c-%d8%a7%d8%b1%d8%b3%d8%a7%d9%84%e2%80%8c%d9%87%d8%a7/" target="_blank"&gt;این زیبایی‌های&lt;/a&gt; هر چند کوچک و خوش‌آیند به سواد کم من‌، از دلایل عشق ورزیدن من به گنو/لینوکس باشد. اما می‌خواهم در این پست‌، از نگاهی دیگر این دوست داشتن را وصف کنم.
قبل از آن مهاجرت پر ذوق و شوقم به گنو/لینوکس‌‌، بار‌ها آن را مزه مزه کرده بودم و جذبش نشده بودم. حتی بار‌ها تکنیک‌های خرده‌ریزش را خوانده بودم و جذابیتش را درک نکرده بودم. اما چه شد که در یک آن تمام زندگی دیجیتالم را غرق در دنیای گنو/لینوکس دیدم؟&lt;/p&gt;
&lt;p&gt;حقیقتش‌، پدیده‌ای چون گنو/لینوکس‌، در دنیای من‌، آن هم با ترجمه‌هایی مضحک از کلماتی چون آزادی‌، همکاری‌، رقابت‌ و جنگندگی‌، بیشتر به رویایی دست نیافتنی شباهت دارد تا واقعیتی قابل لمس. بار‌ها سعی کردم که راهی برای توصیف معنای آزادی و قدرت گنو/لینوکس پیدا کنم. اما برای مردمانی که نیازی به آزادی نمی‌بینند‌، این کار به کوبیدن میخی در سنگ می‌ماند. مردمی که قدرت را با ثروت اشتباه می‌گیرند و دانش را برای کسب ثروت دنبال می‌کنند. دنیایی که همکاری در آن به معنای پایین کشیدن ارزش همکارانت باشد و تنها به واسطهٔ کسب حقوق مادی‌، همکاری در آن معنا یابد‌، هرگز نمی‌تواند گنو/لینوکس را درک کند. در چنین دنیایی‌، بهترین توصیف گنو/لینوکس‌، یک ویندوز ضعیف و مخوف است که تنها دیوانگان به استفاده از آن روی می‌آورند! D:&lt;/p&gt;
&lt;p&gt;به واسطهٔ آموزش‌هایی که در دوران تحصیل دیده بودم‌، کم کم به جایی هدایت می‌شدم که دیگر نمی‌توانستم آن‌طور که باید به حرفه‌ای که دوست داشتم نگاه کنم. حرفه‌ای که روزی آرزوی فعالیت در آن را داشتم‌، داشت به کابوسی تلخ تبدیل می‌شد. نمی‌توانستم تنها با این دلیل که ابزار یا رفتاری در جامعهٔ اطرافم پسندیده شده‌، آن را قبول کنم. نباید هم این‌طور می‌شد. دوست داشتم قدم به قدم مسیر را خودم تجربه کنم‌. حتی شکست‌هایش را. چون یاد گرفته بودم چطور با آن‌ها کنار بیایم.&lt;/p&gt;
&lt;p&gt;دیگر وقت آن رسیده بود که از قالبی که دورم ساخته شده بود بیرون بیایم. باید یاد می‌گرفتم که خودم را به چالش بکشم. باید از توصیف کار‌هایم برای دیگران دست می‌کشیدم‌. از راهنمایی‌شان. یک کلام‌، باید سنگی را در آغوش می‌کشیدم و به دریای گنو/لینوکس می‌پریدم! همین کار را هم کردم. تمام آموخته‌ها و تجربه‌های چند ساله‌ام را فراموش کردم. حتی ویندوز را نگه نداشتم. یک نصب کامل. یک تیر خلاص. آسان بود؟ نه واقعا نبود. خصوصا با استثناهایی که تنها انسان‌هایی که در کشور‌هایی چون کشور من زندگی می‌کنند درک‌شان می‌کنند. روز‌ها وقت صرف کردم تا راهی برای چشیدن آزادی در اینترنت پیدا کنم. برای آزادانه گشتن در بزرگترین دانشگاه زیر دستم(بماند که هنوز هم هر از چندگاهی‌، باید به دنبال روش‌های جدیدی باشم).&lt;/p&gt;
&lt;p&gt;آزمون‌ها و خطا‌ها شروع شد. هر شکست آموزشی بزرگ‌تر در دل داشت. آموزشی که محال بود در دنیای گذشته‌ام حتی به آن فکر کنم. دیگر داشتم به خودم محدود می‌شدم. دیگر فارسی کارساز نبود. منابع فارسی هر چند شاید گسترده‌، ولی تاریخ انقضا گذشته بودند. روزی فکر می‌کردم برای یادگیری نیازی به انگلیسی ندارم و روی همین تفکر‌، دور کلاس زبان را خط کشیدم. ولی حالا وقتش رسیده بود که اشتباهم را ببینم. داشت به تعداد چیز‌هایی که باید یاد می‌گرفتم اضافه می‌شد. سخت بود ولی تا دلتان بخواهد زمان بود که داشتم.&lt;/p&gt;
&lt;p&gt;بعد از آن همکاری‌هایی هر چند کوتاه مدت با دیگر فعالان این عرصه شروع شد که تجربه‌های زیادی در رابطه با کار گروهی و اخلاقیات ایرانیزه شده‌مان به همراه داشت. ظرف یک‌سال جهش بزرگی در سواد و علاقه‌مندی‌هایم دیدم که در پنج سال دوران تحصیل دانشگاهی‌ام خواب‌شان را نمی‌دیدم. دیگر برای یادگیری ابزار‌ها و روش‌ها نیاز به اساتید و آن کتاب‌های قطورشان نداشتم. تنها کافی بود از دنیای اطرافم برای یادگیری کمک بگیرم. در نزدیک‌ترین مرحله‌، خود نرم‌افزار‌ها بودند که راه را نشانم می‌دادند. بعد از آن جامعهٔ کاربری. از طرف دیگر موضوع وقتی جالب‌تر می‌شد که دیگر محدود به ابزار‌ها نبودم.&lt;/p&gt;
&lt;p&gt;اگر از خروجی نرم‌افزاری راضی نبودم می‌توانستم آن را تغییر دهم. یا اصلا چرا زحمت بی‌جا بکشم؟ آن را به نرم‌افزار دیگری می‌خوراندم تا در نهایت خروجی دلخواهم را به دست آورم. دیگر نیازی نبود که دیگران به کارم نمره بدهند. نمره‌ها نتیجهٔ کارم بودند. دیگر اشتباه‌ها به ضررم تمام نمی‌شد. اشتباه‌ها فرصتم بودند. حالا دیگر در مسیری قرار گرفته بودم که قدرت گنو/لینوکس را درک کنم. جایی که هر چه بیشتر یاد می‌گرفتم‌، می‌دیدم که چه قدر بی‌سوادم. بماند که درک این بی‌سوادی‌، از کور‌کورانه باور داشتن به با سوادی‌، آن هم به واسطهٔ معدل ۲۰ دانشگاه لذت‌بخش‌تر بود ;-)&lt;/p&gt;
&lt;p&gt;هر چند خوب می‌دانم راه درازی تا درک کامل دنیای جدیدم پیش‌رو دارم. دنیایی که شاید هرگز نتوانم تمام گوشه‌هایش را ببینم. اما افتخار می‌کنم که سرانجام (دیر یا زودش اصلا مهم نیست) به سوی سرزمینی از عجایب قدم برداشتم که بدون هیچ چشم داشتی‌، کمر به آموزش دادن و قدرتمند کردنم بسته است.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.sito.ir/why-i-love-gnulinux/"&gt;&lt;img title="لوگوی مسابقه «چرا گنو/لینوکس را دوست دارم؟»" alt="لوگوی مسابقه «چرا گنو/لینوکس را دوست دارم؟»" src="http://blog.sito.ir/wp-content/uploads/2013/01/blog-competition-468.png" width="468" height="94"&gt;&lt;/a&gt; لوگوی مسابقه «چرا گنو/لینوکس را دوست دارم؟»&lt;/p&gt;</description><category>آموزش !</category><category>اینترنت</category><category>نرم افزار</category><category>کدباز</category><category>گنو/لینوکس</category><category>گنو/لینوکس</category><guid>http://shahinism.github.io/posts/blog13911111chr-gnwlynwkhs-r-dwst-drm-bh-sbkh-shhy.html</guid><pubDate>Wed, 30 Jan 2013 12:29:11 GMT</pubDate></item><item><title>چطور از وابستگی به گیت‌هاب فرار کنیم: پشتیبان‌گیری از مخازن گیت</title><link>http://shahinism.github.io/posts/blog13911103chtwr-z-wbstgy-bh-gythb-frr-khnym-p.html</link><description>&lt;p&gt;&lt;/p&gt;&lt;p&gt;گیت این روز‌ها تبدیل به عصای کمکی بزرگی برای انجام پروژه‌هایم شده. خوشبختانه تا دلمان هم بخواهد سرور ارائهٔ خدمات گیت روی اینترنت ریخته که هر کدام مزایا و محدودیت‌های خود‌شان را دارند. من‌باب مالیخولیایی زیادم در پشتیبان‌گیری از پروژه‌ها‌، مطلب زیر (&lt;a title="How to avoid relying on github: mirror your repository" href="http://www.deanclatworthy.com/2013/01/how-to-avoid-relying-on-github-mirror-your-repository/" target="_blank"&gt;منبع&lt;/a&gt;) را پیدا کردم که خیلی جالب و کمکی به نظرم آمد. تست کردم‌، فوق‌العاده بود. پس ترجمه‌اش را این‌جا می‌گذارم تا شما هم حالی ببرید از آخرین فرزند خلف آقایمان‌، ترووالدز ;-)&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;یکی از نکاتی که قطعی‌های اخیر گیت‌هاب گوشزد می‌کنند این است که گیت به عنوان یک سیستم مدیریت نسخهٔ غیر متمرکز طراحی شده. بسیاری از مردم به این صورت آن را مورد استفاده قرار نمی‌دهند. به جای داشتن چند بایگانی راه دور‌، داده‌ها را به یک جا می‌فرستند و در اصل بیش از اندازه به گیت‌هاب تکیه می‌کنند. کسانی را دیده‌ام که کل سازمان‌شان را بر پایهٔ گیت‌هاب بنا کرده‌اند‌، چیز‌هایی نظیر گسترش اسکریپت‌های سایت‌شان و نصب اسکریپ‌ها برای توسعه دهندگان جدید‌شان. علاوه بر این‌، dependency manager‌هایی مثل Composer و Cocoapods نیز به گیت‌هاب وابسته‌اند تا پیش‌نیاز‌هایشان را دریافت کنند. اگر گیت‌هاب Down شود‌، شما نمی‌توانید پیش‌نیاز‌های‌تان را دستکاری کنید و یا نمونه‌های جدید‌تری به آن‌ها اضافه کنید. در یک دنیای ایده‌آل این Dependency manager‌ها باید قابلیت‌ پشتیبانی توکار از mirror‌ها را داشته باشند‌، ولی در حال حاضر من چنین قابلیت‌هایی را نمی‌بینم.&lt;/p&gt;
&lt;p&gt;چیزی که من می‌خواهم انجام دهم این است که نشان‌تان دهم که چقدر آسان است که با استفاده از سرور‌های راه دور گیت در آن واحد به دو سرور مختلف داده‌های‌تان را ارسال کنید. اگر گیت‌هاب Down شد‌، مهم نیست‌، بر فرض این که همه افراد تیم‌تان از این راهنما پیروی کرده باشند‌، کد از طریق bitbucket نیز در دسترس خواهد بود‌، یا هر جای دیگری که شما انتخاب کرده‌اید. اما این راهنما از گیت‌هاب و بیت‌باکت به عنوان mirror استفاده می‌کند.&lt;/p&gt;
&lt;p&gt;۱. اول فرض می‌کنم که شما یک سرور راه دور برای گیت‌هاب به عنوان "origin" ایجاد کرده‌اید. آن را به github تغییر نام دهید:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;git remote rename origin github
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;۲. یک مخزن جدید روی بیت‌باکت هم‌نام همان چیزی که در گیت‌هاب دارید بسازید.&lt;/p&gt;
&lt;p&gt;۳. این مخزن جدید را به صورت زیر به سرور‌های راه دور‌تان اضافه کنید. ولی مطمئن باشید که اسمش bitbucket باشد و نه origin. این‌طور:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;git remote add bitbucket ssh://git@bitbucket.org/username/somerepo.git

git push -u bitbucket --all
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;۴. و حالا با یک ادیتور از شاخهٔ ‎.git در مخزن گیت‌تان فایل config را باز کنید.&lt;/p&gt;
&lt;p&gt;۵. نوبت این است که url‌های مربوط به هر سرور راه دور را به مجموعهٔ جدیدی به اسم origin اضافه کنیم. می‌شود چیزی شبیه این:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;[&lt;/span&gt;remote &lt;span class="s2"&gt;"origin"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="nv"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; git@github.com:username/somerepo.git

&lt;span class="nv"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; ssh://git@bitbucket.org/username/somerepo.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;۶. دفعهٔ بعد که از دستور git push origin استفاده کردید‌، مخزن در هر دو سرور راه دور آپلود خواهد شد.&lt;/p&gt;
&lt;p&gt;به همین راحتی.&lt;/p&gt;
&lt;p&gt;نسخه‌های اخیر گیت این اجازه را به شما می‌دهند که چند جا را به عنوان مخزن راه دور یک مجموعه معرفی کنید. ولی من ترجیح می‌دهم که ببینم چه کاری انجام می‌دهم.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;نکته از شاهینیسم:&lt;/strong&gt; بهتر است از یک public-key برای گیت‌هاب و بیت‌باکت استفاده کنید. این‌طوری مرحلهٔ شناسایی هر دو سرور مثل هم خواهد بود ;-)&lt;/p&gt;</description><category>bitbucket</category><category>git</category><category>github</category><category>اینترنت</category><category>برنامه نویسی</category><category>لینوس ترووالدز</category><category>نرم افزار</category><category>کدباز</category><guid>http://shahinism.github.io/posts/blog13911103chtwr-z-wbstgy-bh-gythb-frr-khnym-p.html</guid><pubDate>Tue, 22 Jan 2013 13:27:28 GMT</pubDate></item></channel></rss>