<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>شاهینیسم</title><link>http://shahinism.github.io</link><description>بعضی وقت‌ها باید قبل از این که بتوانید راه بروید‌، بدوید‌!</description><lastBuildDate>Fri, 24 May 2013 15:57:56 GMT</lastBuildDate><generator>nikola</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>مقدمه‌ای بر IRC</title><link>http://shahinism.github.io/posts/introduction-to-irc.html</link><description>&lt;div&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt;مقدمه&lt;/h2&gt;
&lt;p&gt;شروع کارم با IRC به مدت‌ها قبل بر می‌گردد‌. اما همین چند وقت پیش که نیازم به ارتباط همزمان‌، آن هم با دنگ و فنگ‌های چت GMail (که خودتان دلیل عمده‌اش را بهتر از من می‌دانید) بیشتر شد سعی کردم با این ابزار و امکاناتش بیشتر آشنا شوم. در این پست قصد داریم کمی با این ابزار قدیمی‌، ولی خیلی خیلی کاربردی آشنا شویم. در حد مثلا قطره از دریا ;-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;این دیگر چیست؟&lt;/h2&gt;
&lt;p&gt;IRC را به صورت ناشیانه می‌توان‌، شهری بزرگ دانست که به محلاتی کوچک (شبکه‌ها) که عمدتا‌، هدف خاصی دارند تقسیم شده. مثلا محله‌ای برای نرم‌افزار‌های آزاد (&lt;a class="reference external" href="http://freenode.net"&gt;Freenode&lt;/a&gt;) یا مثلا محله‌ای برای هکر‌ها الکترونیک و الی آخر. هر کدام از این محلات به تعداد زیادی خانه (Channel) تقسیم شده‌اند که در آن‌ها تنها حول موضوع خاصی صحبت می‌شود. مثلا زبان برنامه‌نویسی C یا توزیع Slackware. یک‌جور‌هایی مثل همان &lt;strong&gt;اتاق‌های چت&lt;/strong&gt; است که احتمالا اگر هم دوران من باشید‌، خوب به خاطر دارید.&lt;/p&gt;
&lt;p&gt;ولی خوب‌، این‌جا دیگر خبری از آن بی‌نظمی‌ها و ناشی‌گری‌های مرسوم در اتاق‌های چت نیست. عموما مدیران این خانه‌ها می‌توانند اگر دست از پا خطا کردید‌، سر نگون‌تان کنند. همین‌طور امکانات جالبی که شبکه‌های IRC فراهم می‌کنند‌، برنامه‌نویسان را قادر می‌سازند که اسکریپت‌های مدیریتی برای این خانه‌ها بنویسند و عملکرد آن‌ها را به چیزی فراتر از یک اتاق چت &lt;strong&gt;ارتقا&lt;/strong&gt; دهند (نمونه‌اش همین &lt;a class="reference external" href="https://github.com/fzerorubigd/pmg"&gt;PMG&lt;/a&gt; که &lt;a class="reference external" href="http://cyberrabbits.net"&gt;فرود&lt;/a&gt; عزیز زحمتش را کشیده بود).&lt;/p&gt;
&lt;p&gt;کوچک‌ترین فضای گفتگو در این اجتماع نیز‌، اتاق‌های خصوص‌اند. جایی که می‌توانید بدون ایجاد مزاحمت برای دیگران‌، با شریک‌تان به گفتگو و تبادل نظر بپردازید‌! خوشبختانه با وجود تمامی امکاناتی که IRC فراهم می‌کند‌، این تبادل نظر تنها به کاراکتر‌ها محدود شده‌، وگرنه با &lt;strong&gt;ظرفیت&lt;/strong&gt; بالای ما ایرانی جماعت‌… اهم اهم‌، کجا بود؟ ها می‌گفتم که عموما اجتماعی که در IRC‌ها می‌بینید‌، افراد حرفه‌ای هستند و قصد اتلاف وقت‌شان را ندارند. این است که همین اول کار پیشنهاد می‌کنم قبل از هول هولکی وارد شدن به این اجتماع‌ها و رونمایی از خودتان‌، ۱۵ دقیقه یک کانال فعال مثلا ‎##C یا چه می‌دانم مثلا ‎#slackware (که هر دو شان در محلهٔ &lt;a class="reference external" href="http://freenode.net"&gt;freenode&lt;/a&gt; قرار دارند) را مطالعه کنید. منظورم این است که رفتار افراد را ببینید.&lt;/p&gt;
&lt;p&gt;آن‌وقت می‌بینید افرادی که با دقت سوال می‌کنند یا حرف می‌زنند چطور جواب می‌گیرند و افرادی که دور از جان‌تان احمقانه به میدان می‌آیند چه نصیب‌شان می‌شود. به هر حال برویم کمی به نقاط فنی قضیه بپردازیم.&lt;/p&gt;
&lt;p&gt;&lt;a href="/posts/introduction-to-irc.html"&gt;بیشتر بخوانید...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</description><category>irc</category><category>erc</category><category>hexchat</category><category>xchat</category><guid>http://shahinism.github.io/posts/introduction-to-irc.html</guid><pubDate>Wed, 22 May 2013 10:52:37 GMT</pubDate></item><item><title>این ایمکس دوست داشتنی (غلط‌گیر املایی)</title><link>http://shahinism.github.io/posts/emacs-flyspell-mode.html</link><description>&lt;p&gt;وقتی که بچه‌تر بودم‌، به بالا بودن نمرات املایم افتخار می‌کردم. ولی خوب انگار آن‌ها ربط مستقیمی به دایرهٔ لغات مورد استفاده‌ام در آن زمان‌ها داشت. به هر حال الان خیلی پیش می‌آید که غلط بنویسم‌! با وسط آمدن پای زبان انگلیسی این مشکل بیشتر خود‌نمایی می‌کند. به هر حال‌، خیلی خوب می‌شود که ویرایشگر محبوبم‌، در درست نوشتن‌هایم کمکم کند.&lt;/p&gt;
&lt;div class="section" id="aspell"&gt;
&lt;h2&gt;تنظیم aspell&lt;/h2&gt;
&lt;p&gt;خوشبختانه &lt;a class="reference external" href="http://shahinism.github.io/categories/emacs.html"&gt;Emacs&lt;/a&gt; به صورت پیش‌فرض بستهٔ &lt;a class="reference external" href="http://www.emacswiki.org/emacs/InteractiveSpell#toc5"&gt;ispell&lt;/a&gt; را همراه دارد که قرار است کمک‌مان کند. اول از همه با دستور زیر برنامهٔ غلط‌گیر املایی مورد نظرم را جایگزین برنامهٔ پیش‌فرض &lt;a class="reference external" href="http://www.emacswiki.org/emacs/InteractiveSpell#toc5"&gt;ispell&lt;/a&gt; می‌کنم.&lt;/p&gt;
&lt;pre class="code cl literal-block"&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;ispell-program-name&lt;/span&gt; &lt;span class="s"&gt;"aspell"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;ispell-list-command&lt;/span&gt; &lt;span class="s"&gt;"list"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;دستور اول متغیر برنامهٔ غلط‌گیر املایی را به &lt;a class="reference external" href="http://aspell.net/"&gt;aspell&lt;/a&gt; تغییر می‌دهد و دستور دوم دستور لیستی که همراه با برنامه استفاده می‌شود را مشخص می‌کند. به صورت پیش‌فرض این مقدار برابر ‎-l است که همتای آن در برنامهٔ &lt;a class="reference external" href="http://aspell.net/"&gt;aspell&lt;/a&gt; مقدار list است.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;چرا aspell؟&lt;/h2&gt;
&lt;p&gt;خوشبختانه این برنامه‌، به زحمت &lt;a class="reference external" href="https://fa.wikipedia.org/wiki/%D8%A2%D9%84%D9%86_%D8%A8%D8%A7%D8%BA%D9%88%D9%85%DB%8C%D8%A7%D9%86"&gt;آلن باغومیان&lt;/a&gt; عزیز‌، صاحب یک دیکشنری به درد بخور فارسی هم شده. این دیکشنری را که احتمالا همراه &lt;a class="reference external" href="http://aspell.net/"&gt;aspell&lt;/a&gt; روی سیستم‌تان نصب نمی‌شود را می‌توانید از &lt;a class="reference external" href="ftp://ftp.gnu.org/gnu/aspell/dict/0index.html"&gt;این‌جا&lt;/a&gt; بگیرید. راهنمای کامپایل و نصبش همراه خود بسته است (عملا یک &lt;strong&gt;‎./configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install&lt;/strong&gt; ساده باید کارتان را راه بیاندازد.).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;نحوهٔ کار&lt;/h2&gt;
&lt;p&gt;در عمل شما می‌توانید به چند روش از این غلط‌گیر استفاده کنید. اما اول از همه باید تعیین کنید که از چه زبانی استفاده می‌کنید. زبان پیش‌فرض انگلیسی است. اما شما می‌توانید با فراخوانی تابع &lt;strong&gt;ispell-change-dictionary&lt;/strong&gt; (یادتان که نرفته‌، M-x) و وارد کردن اسم دیکشنری (مثل خیلی دیگر از دستورات فراخوانی شده با این روش‌، با tab قابلیت تکمیل خودکار دارد) دیکشنری مد نظر‌تان را صدا کنید. مثلا برای زبان فارسی همچین کاری می‌کنیم:&lt;/p&gt;
&lt;pre class="code cl literal-block"&gt;
&lt;span class="nv"&gt;M-x&lt;/span&gt; &lt;span class="nv"&gt;ispell-change-dictionary&lt;/span&gt; &lt;span class="nv"&gt;fa&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;البته دیکشنری‌های متفاوتی با نصب بستهٔ فارسی ispell اضافه می‌شود که بسته به نیاز‌تان (من نفهمیدم فرق‌شان چیست‌، اگر می‌دانید بگویید که ممنون‌تان شوم) یکی را انتخاب کنید.&lt;/p&gt;
&lt;div class="section" id="flyspell-mode"&gt;
&lt;h3&gt;flyspell-mode&lt;/h3&gt;
&lt;p&gt;با فراخوانی این مد‌، کل بافر را تحت تاثیر قرار می‌دهید. در صورت بر خورد با هر غلط املایی‌، لغت تغییر رنگ داده و می‌توانید با کلیک وسط ماوس آن پیشنهاد‌های سیستم‌را انتخاب کنید.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ispell-word-ispell-word"&gt;
&lt;h3&gt;&lt;img alt="ispell-word" src="https://dl.dropboxusercontent.com/u/25017694/Blog-photos/emacs_aspell.png"&gt; ispell-word&lt;/h3&gt;
&lt;p&gt;این دستور‌، به درد موقعی می‌خورد که نمی‌خواهید یک flyspell-mode را صدا کنید. به هر حال این مد همیشه هم آن‌قدر که باید خوب عمل نمی‌کند (بیشترین تاثیر را زمانی دارد که کلمه بعد از فراخوانی مد تایپ شود). البته برای رفع مشکلات این مد می‌توانید از &lt;strong&gt;flyspell-region&lt;/strong&gt; که محدودهٔ انتخاب شده را بررسی می‌کند استفاده کنید. ولی گاها دوست دارید که تنها یک کلمه که مطمئن نیستید را بررسی کنید. آن وقت است که &lt;strong&gt;ispell-word&lt;/strong&gt; دستور مورد نظرتان است. تنها کافیست نشان‌گر را روی لغت ببرید و این دستور را بزنید.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;کلید‌های میانبر&lt;/h2&gt;
&lt;p&gt;بدیهی است که بهتر است برای این دستورات‌، کلید‌های میانبر تعریف کنیم. مثلا کلید‌های مورد استفادهٔ من این‌ها هستند:&lt;/p&gt;
&lt;pre class="code cl literal-block"&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;f8&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'ispell-word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-S-&amp;lt;f8&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'flyspell-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;همین‌کار را می‌توانید برای &lt;strong&gt;ispell-change-dictionary&lt;/strong&gt; هم انجام دهید. ولی &lt;a class="reference external" href="http://www.emacswiki.org/emacs/InteractiveSpell#toc5"&gt;ispell&lt;/a&gt; این قابلیت را دارد که از روی سر خط فایل‌، زبان آن را تشخیص دهد. این یعنی این که اگر متنی با زبان فارسی دارم‌، کافیست در خط اول آن یک همچین متنی داشته باشم:&lt;/p&gt;
&lt;pre class="code cl literal-block"&gt;
&lt;span class="nv"&gt;-*-&lt;/span&gt; &lt;span class="nv"&gt;ispell-dictionary:&lt;/span&gt; &lt;span class="s"&gt;"fa"&lt;/span&gt; &lt;span class="nv"&gt;-*-&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;تا زبان تنها برای همین بافر حاضر به فارسی تغییر کند. به هر حال این انتخاب‌ها اختیاری است.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;مشکلات حاضر&lt;/h2&gt;
&lt;p&gt;مشکل این است که نمی‌توان دیکشنری را به صورت دو زبانه و همزمان داشت. از طرفی در صفحهٔ ویکی &lt;a class="reference external" href="http://www.emacswiki.org/emacs/InteractiveSpell#toc5"&gt;ispell&lt;/a&gt; به غلط‌گیر &lt;a class="reference external" href="http://wiki.openoffice.org/wiki/Main_Page"&gt;Hunspell&lt;/a&gt; اشاره شده که روش خوبی هم برای بررسی متن و تغییر خودکار زبان غلط‌گیر دارد. با توجه به استفاده از این دیکشنری در OpenOffice‌ها خیلی وسوسه شده‌ام که آن را هم تست کنم. به زودی در مورد آن‌ها هم خواهم نوشت.&lt;/p&gt;
&lt;/div&gt;</description><category>Emacs</category><category>flyspell</category><category>aspell</category><guid>http://shahinism.github.io/posts/emacs-flyspell-mode.html</guid><pubDate>Mon, 20 May 2013 10:43:10 GMT</pubDate></item><item><title>از وردپرس به نیکولا</title><link>http://shahinism.github.io/posts/from-wordpress-to-nikola.html</link><description>&lt;div&gt;&lt;p&gt;خیلی وقت بود که به فکر انتقال وبلاگم به یکی از سیستم‌های وبلاگ ایستا (Static) بودم. عمده‌ترین دلیلش هم قابلیت خوب Github برای انتشار چنین وبلاگ‌هایی بود. اما بیشتر از یک سال این فکر را عقب انداختم تا دیگر کم کم نگهداری از هاست و دامین وبلاگ آن هم با نوع سرویس دهی شرکت‌های ایرانی‌، برایم خسته کننده شد. وبلاگ‌نویسی قرار نیست تمام فکر و ذکرم را به خودش مشغول کند‌! قرار است یک جای ساده باشد که خیلی راحت بتوان تویش نوشت و منتشر کرد. (الان که دارم می‌نویسم‌، دامین اصلی وبلاگم Shahinism.com لنگ به هواست و نمی‌توانم DNS را به هاست قبلی منتقل کنم)&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;چرا یک وبلاگ ایستا؟&lt;/h2&gt;
&lt;p&gt;خوب به طور کلی دلایلش از این قرارند:&lt;/p&gt;
&lt;ul class="simple"&gt;&lt;li&gt;&lt;strong&gt;سرعت‌، سرعت‌، سرعت:&lt;/strong&gt; دیگر در این نوع از وبلاگ‌، خبری از پایگاه داده نیست. همین‌طور قرار نیست هیچ پردازشی در سمت سرور وبلاگ قرار گیرد. و خوب طبیعتا خیلی خیلی امکاناتی که این ابزار‌ها فراهم می‌کنند را نمی‌توانم داشته باشم. اما حقیقتش در یک وبلاگ‌، به بسیاری از این ابزار‌ها نیاز ندارم. به هر حال این نبودن‌ها‌، یعنی سرعت بیشتر. در مورد من‌، سرعت لود صفحات‌، حدودا سه برابر بیشتر شد.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;سادگی:&lt;/strong&gt; فکر نمی‌کنم چیز زیادی در این زمینه برای گفتن باقی گذاشته باشم.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;امنیت:&lt;/strong&gt; وقتی تنها با صفحات سادهٔ HTML روبرو هستید. وقتی یک سیستم انتشار قابل اطمینان دارید‌‌، دیگر نباید نگران آپدیت بودن ابزار وبلاگ‌نویسی‌تان و یا هک شدنش باشید. این‌طور نیست؟&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;محدود نبودن پهنای باند:&lt;/strong&gt; این یکی از آن کابوس‌هایی است که بی‌خبر به سراغ‌تان می‌آید. ولی خوب خوشبختانه روی گیت‌هاب‌، این نگرانی را نداریم ;-)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;قابلیت بازیابی:&lt;/strong&gt; خوب این یکی زیاد مربوط به خود سیستم وبلاگ‌نویسی نیست. ولی چون نتیجهٔ کارش را می‌توان با هر سیستم دلخواهی منتشر کرد و من گیت را انتخاب کرده‌ام‌، خیلی راحت می‌توانم در صورت گند زدن‌، بدون هیچ استرسی آن را به حالت قبل برگردانم. این قابلیت روی هاست‌های اشتراکی پولی و گران است و در سرور‌های اختصاصی‌، خیلی پر دردسر‌تر از چیزی که در این‌جا با آن طرفیم ;-)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;کدام سیستم؟&lt;/h2&gt;
&lt;p&gt;به هر حال‌، پس از قطعی شدن تصمیم انتقال‌، باید یکی از سیستم‌ها را انتخاب می‌کردم. به طور کلی این سیستم‌ها اعم از &lt;a class="reference external" href="http://nikola.ralsina.com.ar/"&gt;Nikola&lt;/a&gt;, &lt;a class="reference external" href="http://docs.getpelican.com/"&gt;Pelican&lt;/a&gt;, &lt;a class="reference external" href="http://octopress.github.ip/"&gt;Octopress&lt;/a&gt; و خیلی‌های دیگر که با یک سرچ در اینترنت می‌توانید پیدایشان کنید‌، تفاوت عمده‌ای در نتیجهٔ کار ندارند. طرز کارشان فوق‌العاده ساده است. شما متن پست وبلاگ‌تان را در یک فایل حالا به هر فرمتی که سیستم مورد نظر برای‌تان مهیا کرده می‌نویسید‌، یک قالب هم بر اساس قوائد تعیین شدهٔ سیستم به آن می‌خورانید و می‌گویید که وبلاگ آماده شود. در نهایت این سیستم می‌آید یک سایت کاملا ایستا در فایل‌های html آماده می‌کند که شامل پست‌های شماست و بر اساس قالب مورد نظر‌تان قالب‌بندی شده.&lt;/p&gt;
&lt;p&gt;من &lt;a class="reference external" href="http://nikola.ralsina.com.ar/"&gt;Nikola&lt;/a&gt; را انتخاب کردم‌، چون اولا پایتونی است‌ و بعد از آن خیلی راحت‌تر از &lt;a class="reference external" href="http://docs.getpelican.com/"&gt;Pelican&lt;/a&gt; که آن هم پایتونی است نصب می‌شود. همین!&lt;/p&gt;
&lt;p&gt;&lt;a href="/posts/from-wordpress-to-nikola.html"&gt;بیشتر بخوانید...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</description><category>Wordpress</category><category>Nikola</category><category>Python</category><guid>http://shahinism.github.io/posts/from-wordpress-to-nikola.html</guid><pubDate>Mon, 13 May 2013 10:21:43 GMT</pubDate></item><item><title>این ایمکس دوست داشتنی (بالانس کردن پرانتز‌ها)</title><link>http://shahinism.github.io/posts/blog13920127yn-ymkhs-dwst-dshtny-blns-khrdn-prn.html</link><description>&lt;p&gt;&lt;/p&gt;&lt;p&gt;یکی از دلایل اصلی Syntax error‌ها بالانس نبودن پرانتز‌هاست (منظورم پرانتز‌، کروشه‌، آکولاد‌، &amp;lt;&amp;gt;‌، گیومه و … است). خوب از آن‌جایی که بنیاد ایمکس براساس Lisp است و Lisp به خاطر پرانتز‌هایش معروف شده (خیلی‌ها به شوخی می‌گن که Lisp مخفف Lost in stupid parentheses هست)‌، مطمئنا باید راهی برای حل این مشکل داشته باشد.
برای این کار خطوط زیر را داخل ‎.emacs وارد می‌کنیم:&lt;/p&gt;


&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;electric-pair-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;show-paren-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;خوب با خط اول‌، به ایمکس می‌گوییم‌، هر وقت ما پرانتزی (که شامل تمام علاماتی است که در بالا اشاره کردیم) باز کردیم‌، خودت به صورت خودکار‌، کاراکتر بستن آن را وارد کن. همین‌طور در خط دوم مجبورش می‌کنیم وقتی روی پرانتزی هستیم‌، اگر جفتی برایش وجود دارد‌، آن را برایمان نمایش دهد (هر دو طرف پرانتز سبز می‌شود معمولا‌. با توجه به تنظیمات پوستهٔ ایمکس)‌. اگر نه‌، سمتی که رویش ایستاده‌ایم را قرمز کن تا بفهمیم تنهاست ;-)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://dl.dropboxusercontent.com/u/25017694/Blog-photos/emacsparenmatch.png"&gt;&lt;img alt="نمونه‌ای از نمایش جفت پرانتز در ایمکس" src="https://dl.dropboxusercontent.com/u/25017694/Blog-photos/emacsparenmatch.png" width="328" height="42"&gt;&lt;/a&gt; نمونه‌ای از نمایش جفت پرانتز در ایمکس&lt;/p&gt;
&lt;p&gt;بخش اول کار که معلوم است. ولی این بخش دوم قابلیت‌های جالب دیگری هم دارد. مثلا می‌توان با(setq show-paren-delay 0) میزان زمانی که طول می‌کشد تا جفت کاراکتر پرانتزمان را نمایش دهد را تعیین کنیم. از قرار به طور پیش‌فرض مقداری Delay تعیین شده که ما با این دستور می‌توانیم صفرش کنیم. من این کار را نکردم چون به نظرم سر موقع نمایش داده می‌شوند.&lt;/p&gt;
&lt;p&gt;همین‌طور می‌توان با(setq show-paren-style 'MODE) تعیین کرد که نمایش هر جفت پرانتز چطور باشد. که برای این کار باید عبارت MODE را با یکی از سه گزینهٔ زیر جایگزین کنیم:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;parenthesis&lt;/strong&gt; که مد پیش‌فرض است و فقط پرانتز‌های دو طرف را نمایش می‌دهد.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;expression&lt;/strong&gt; که علاوه بر پرانتز‌ها‌، متن درونشان هم برجسته می‌شود.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;mixed&lt;/strong&gt; که اگر پرانتز‌ها بالانس باشند مثل مد parenthesis عمل می‌کند و گرنه مثل expression.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;به همین سادگی می‌توانید آن‌طور که می‌خواهید این رفتار ایمکس را هم کنترل کنید.&lt;/p&gt;
&lt;p&gt;من این آموزش را نمی‌دانم از کجای اینترنت یاد گرفتم. ولی این &lt;a title="Emacsfu" href="http://emacs-fu.blogspot.de/2009/01/balancing-your-parentheses.html" target="_blank"&gt;وبلاگ&lt;/a&gt; هم به آن اشاره کرده که وبلاگ عالی‌ای هم هست. پیشنهاد می‌کنم از دستش ندهید. خیلی خیلی تکنیک‌های جالبی با آن یاد خواهید گرفت.&lt;/p&gt;</description><category>Emacs</category><category>Emacs-fu</category><category>lisp</category><category>Parenthesis</category><category>ایمکس</category><category>برنامه نویسی</category><category>نرم افزار</category><category>کدباز</category><guid>http://shahinism.github.io/posts/blog13920127yn-ymkhs-dwst-dshtny-blns-khrdn-prn.html</guid><pubDate>Tue, 16 Apr 2013 12:24:21 GMT</pubDate></item><item><title>این ایمکس دوست داشتنی (Backup‌ها و Autosave‌ها)</title><link>http://shahinism.github.io/posts/blog13920125yn-ymkhs-dwst-dshtny-backuph-w-autosaveh.html</link><description>&lt;p&gt;&lt;/p&gt;&lt;p&gt;یکی از ویژگی‌های خوب‌، به درد بخور ولی سرسام آوری که در اکثر ویرایشگرهای لینوکسی با پدر و مادر دیده‌ایم‌، قابلیت پشتیبان گیریست‌! قابلیتی که هر چند می‌دانیم که خیلی به آن نیاز پیدا خواهیم کرد‌، عموما از ریختش خوشمان نمی‌آید. عموما شیوهٔ کار این پشتیبان‌گیر‌ها به این صورت است که در همان جایی که فایل اصلی وجود دارد‌، یک فایل پشتیبان به صورت خودکار ایجاد می‌کنند و هیچ وقت هم آن را پاک نمی‌کنند‌! خوب برای آدم‌های وسواسی‌ای مثل من‌، این کمی اذیت کننده است که آن‌ها را در کنار فایل‌های اصلی‌ام ببینم‌!
ساده‌ترین راه‌کار‌، خاموش کردنش است‌! ولی خاموش کردن هم خطرناک است. قربانش بروم نیست کلا همه چیز‌مان قابل اطمینان است‌، مطمئن باشید سر حساس‌ترین ادیت‌تان‌، برق سیستم قطع می‌شود (این خط‌| ، این نشان D:).&lt;/p&gt;
&lt;p&gt;این است که برای ایمکس یک جای مخصوص درست می‌کنیم که این پشتیبان‌ها را در آن جا بریزد. این‌طوری نه ساختار سیستم فایل‌مان را شلخته می‌کنیم‌، و نه از نعمت وجود پشتیبان‌ها بی‌بهره می‌شویم.&lt;/p&gt;


&lt;div class="code"&gt;&lt;pre&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;custom-set-variables&lt;/span&gt;
 &lt;span class="c1"&gt;;; custom-set-variables was added by Custom.&lt;/span&gt;
 &lt;span class="c1"&gt;;; If you edit it by hand, you could mess it up, so be careful.&lt;/span&gt;
 &lt;span class="c1"&gt;;; Your init file should contain only one such instance.&lt;/span&gt;
 &lt;span class="c1"&gt;;; If there is more than one, they won't work right.&lt;/span&gt;
 &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;auto-save-file-name-transforms&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;quote&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;".*"&lt;/span&gt; &lt;span class="s"&gt;"~/.emacs.d/autosaves/\\1"&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
 &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;backup-directory-alist&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;quote&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;".*"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"~/.emacs.d/backups/"&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;خوب‌، تمام نکتهٔ اصلی ماجرا این‌جاست که ما با تابع custom-set-variables سر و کار داریم. این تابع را در واقع قرار نیست که ما صدا بزنیم (ولی این یک‌بار اشکال ندارد‌). حقیقتش نیاز هم نیست‌، چون این تنظیمات را می‌توان با خود ایمکس انجام داد. کافیست از منوی ایمکس‌، Options و Customize Emacs را انتخاب کنیم‌، بخش مورد نظر را پیدا و انگولکش کنیم و سپس Apply &amp;amp; Save و خود ایمکس همچین چیزی را برای‌مان اضافه می‌کند! ولی خوب من حال سر و کله زدن با این منو‌ها را ندارم. پس باید بروم و همین متغیر‌ها که می‌بینید را مستقیما تغییر دهم. خوب آن وقت یک کمی کثیف‌کاری می‌شود. چرا؟ چون آن وقت این Customize ایمکس تنظیمات ما را نمی‌خواند و ممکن است برای یک همچین تنظیم پایه‌ای‌، مشکل بزاید برای‌مان.&lt;/p&gt;
&lt;p&gt;باauto-save-file-name-transforms ما در واقع شیوهٔ نام‌گذاری Autosave‌ها را با یک Regex تغییر می‌دهیم. خود ایمکس‌، آن بخش آدرس دایرکتوری را‌، به مسیر جدید فایل تبدیل می‌کند و فایل‌ها را در آن‌جا ذخیره می‌کند. Autosave‌ها به صورت #FileName#  و به صورت خودکار ذخیره می‌شوند و شامل آخرین تغییرات یک بافر هستند.&lt;/p&gt;
&lt;p&gt;دقیقا همین کار را هم با متغیرbackup-directory-alist انجام می‌دهیم که وظیفهٔ تغییر نام backup‌ها را بر عهده دارد. این پشتیبان‌ها در واقع آخرین وضعیت Save شدهٔ یک بافر را ارائه می‌دهند و به صورت FileName~ ‎ نام‌گذاری می‌شوند.&lt;/p&gt;
&lt;p&gt;حالا نکته این‌جاست که احتمالا بعد از Restart ایمکس‌، با این اخطار روبرو می‌شوید که دایرکتوری Autosaves که آدرس داده‌اید وجود ندارد. یک کار این است که آن را به صورت دستی ایجادش کنید. فقط یک بار لازم است. و بعد ایمکس‌تان را اجرا کنید. یک کار دیگر هم می‌توان با دستور لیسپ زیر‌، چک کرد که اگر دایرکتوری وجود نداشت‌، خود ایمکس ایجادش کند:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;make-directory&lt;/span&gt; &lt;span class="s"&gt;"~/.emacs.d/autosaves/"&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;من این تنظیمات را از &lt;a href="http://snarfed.org/gnu_emacs_backup_files"&gt;این پست&lt;/a&gt; یاد گرفتم. وبلاگ قدیمی‌ایست‌، و چیز‌های خوبی در مورد ایمکس می‌توان ازش یاد گرفت.&lt;/p&gt;</description><category>Autosave</category><category>Backup</category><category>Emacs</category><category>ایمکس</category><category>حل مشکل</category><category>دوره</category><category>نرم افزار</category><category>کدباز</category><guid>http://shahinism.github.io/posts/blog13920125yn-ymkhs-dwst-dshtny-backuph-w-autosaveh.html</guid><pubDate>Sun, 14 Apr 2013 09:13:41 GMT</pubDate></item><item><title>این ایمکس دوست داشتنی (ido-mode)</title><link>http://shahinism.github.io/posts/blog13920122yn-ymkhs-dwst-dshtny-ido-mode.html</link><description>&lt;p&gt;&lt;/p&gt;&lt;p&gt;یکی از قابلیت‌های جالب تکمیل خودکاری که در ابزار‌های امروزی می‌بینیم‌، تکنیک fuzzy matching است که کار تکمیل خودکار را فوق‌العاده آسان می‌کند. نمونه‌ای از این تکمیل خودکار را در آدرس‌بار Firefox دیده‌ایم. جایی که شما می‌توانید آدرس را از هر کجا یادتان است تکمیل کنید و اجباری به تایپ اول آدرس ندارید. امروز قصد داریم همچین قابلیتی را در ایمکس معرفی کنیم. این قابلیت می‌تواند در تکمیل نام buffer‌، فایل‌ها و دستورات ایمکسی‌، خیلی خیلی کمک کننده باشد. ابزاری که در ایمکس این امکان را فراهم می‌آورد ido نام دارد.
ترجیح می‌دهم قابلیت‌های این ابزار را به لغت بیان نکنم‌، چون نمی‌توانم. این است که ویدئویی در اینترنت پیدا کردم که می‌تواند لپ کلام را در دو دقیقه به شما نشان دهد‌، بدون این که نیازی به زیاده گویی‌های من باشد. این ویدئو را می‌توانید از&lt;a title="لینک ویدئو در یوتوب" href="http://youtu.be/lsgPNVIMkIE" target="_blank"&gt; این‌جا &lt;/a&gt;در یوتوب ببینید (مگر چه عیبی دارد گاهی مرا هم جو آزاد نشینی بگیرد و فکر کنم همه اینترنت آزاد دارند؟). اگر هم سخت‌تان است این ویدئو را از پشت خط شکن ببینید‌، برای‌تان روی &lt;a title="دانلود ویدئو از Mega" href="https://mega.co.nz/#!A0dymZqY!RInwER-nRLUijWh3tIxcOFD3-CBcg-CgHN0ZzO-TkQI" target="_blank"&gt;Mega&lt;/a&gt; آپلود کرده‌ام. حجم ویدئو ۵ مگ بیشتر نیست!&lt;/p&gt;
&lt;p&gt;حالا که ویدئو را دیدید کافیست با اضافه کردن کد زیر به ‎.emacs  آن را در ایمکس‌تان فعال کنید:&lt;/p&gt;


&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;ido-enable-flex-matching&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;ido-everywhere&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ido-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;پس از قرار دادن این کد‌، کلید‌های جستجوی فایل یا تعویض بافر‌، با دستورات همتای‌شان که از ido استفاده می‌کنند‌، جایگزین می‌شوند. این ابزار قابلیت‌های شخصی‌سازی بیشتری هم دارد. مثلا این که کدام پسوند‌ها را در اولیوت قرار دهد. من نیازی به این تنظیمات پیدا نکردم. اما اگر شما وسوسه به همچین تنظیمی شده‌اید می‌توانید به &lt;a title="idomode in mastering emacs" href="http://www.masteringemacs.org/articles/2010/10/10/introduction-to-ido-mode/" target="_blank"&gt;این پست&lt;/a&gt; mastring emacs رجوع کنید.&lt;/p&gt;
&lt;p&gt;گاها پیش می‌آید که در هنگام جستجوی فایلی (خصوصا در زمان ایجاد) این ابزار کمی دست و پا گیر می‌شود. برای فرار از این حالت کافیست دستور ٰC-f  را وارد کنید‌، تا به حالت معمول جستجوی فایل بازگردید.&lt;/p&gt;</description><category>Emacs</category><category>fuzzy matching</category><category>ido-mode</category><category>ایمکس</category><category>دوره</category><category>نرم افزار</category><category>کدباز</category><guid>http://shahinism.github.io/posts/blog13920122yn-ymkhs-dwst-dshtny-ido-mode.html</guid><pubDate>Thu, 11 Apr 2013 11:47:19 GMT</pubDate></item><item><title>این ایمکس دوست داشتنی (ergoemacs-mode)</title><link>http://shahinism.github.io/posts/blog13920119yn-ymkhs-dwst-dshtny-ergoemacs-mode.html</link><description>&lt;p&gt;&lt;/p&gt;&lt;p&gt;قبلا هم گفتم‌، ایمکس در حالت عادی‌، قابل قبول است‌، ولی خیلی خیلی می‌تواند بهتر باشد. یکی از اولین عادت‌ها بعد از مهاجرت به ایمکس‌، کلید‌های میانبر پر استفاده‌اش است. در &lt;a title="این ایمکس دوست داشتنی (تعریف کلید میانبر)" href="http://shahinism.com/blog/1392/01/17/%d8%a7%db%8c%d9%86-%d8%a7%db%8c%d9%85%da%a9%d8%b3-%d8%af%d9%88%d8%b3%d8%aa-%d8%af%d8%a7%d8%b4%d8%aa%d9%86%db%8c-%d8%aa%d8%b9%d8%b1%db%8c%d9%81-%da%a9%d9%84%db%8c%d8%af-%d9%85%db%8c%d8%a7%d9%86%d8%a8/"&gt;پست قبلی&lt;/a&gt; در موزد کلید‌های میانبر ایمکس حرف زدیم. اما بدیهی است که تعریف کلید میانبر برای دستوراتی این چنین پر استفاده که هم با دیگر کلید‌های میانبر تعریف شده در محیط‌های مختلف تداخل نداشته باشد و هم یاد آوری‌شان آسان باشد‌، کار آسانی نیست. خصوصا این که ایمکس پیشنهاد می‌کند کلید میانبر‌تان با C-c شروع شود و با یک کاراکتر تکی ادامه یابد. تعارف که نداریم‌، خیلی محدود است. ضمن این که ما کلید‌های آن‌چنان پر استفادهٔ زیادی نداریم که بخواهیم به همچین آکورد‌های سنگینی محدود شویم.
کلید‌های پر استفادهٔ عمومی شامل انتقال نشانگر‌، Yanking، پاک کردن کاراکتر‌ها‌، مدیریت پنجره‌ها و جستجو‌هاست. این‌ها دستوراتی هستند که در اکثر ویرایش‌ها به آن‌ها نیاز داریم. ضمن این که بسیاری از این دستورات در برنامه‌های دیگر هم شامل کلید‌های میانبری هستند که تقریبا به صورت یک استاندارد در آمده‌اند. نمونه‌ای از این دستورات‌، کپی و پیست است. شما در اکثر محیط‌ها‌، از جمله مرورگر‌تان‌، با C-c کپی می‌کنید و با C-v پیست. حالا باید در ایمکس آن را با C-w و C-y جایگزین کنید. خوب یک کمی ترک عادت نیاز دارد‌، ولی تلاش سختی است. البته ایمکس خودش یک CUA-mode دارد که می‌توان به راحتی اضافه کردن(cua-mode 1) در ‎.emacs آن را فعال کنید. ولی در مورد باز کردن یک فایل جدید چطور؟ در اکثر برنامه‌ها این کار با C-o امکان‌پذیر است‌، در حالی که در ایمکس باید این کار را با C-x C-f انجام دهید! سخت است دیگر!&lt;/p&gt;
&lt;p&gt;سخت‌تر از همه این که به QWERTY وابسته‌اند. آن وقت است که اگر به &lt;a title="چینش (لایوت) Workman و داستان مهاجرتم" href="http://shahinism.com/blog/1392/01/14/%da%86%db%8c%d9%86%d8%b4-%d9%84%d8%a7%db%8c%d9%88%d8%aa-workman-%d9%88-%d8%af%d8%a7%d8%b3%d8%aa%d8%a7%d9%86-%d9%85%d9%87%d8%a7%d8%ac%d8%b1%d8%aa%d9%85/"&gt;Workman&lt;/a&gt; یا Colemak سوئیچ کنید‌، انگار به کیبورد‌تان دینامیت بسته‌اید! از آن بد‌تر این که با کاراکتر‌های فارسی کار نمی‌کنند.&lt;/p&gt;
&lt;p&gt;این مقدمه را گفتم که بگویم‌، عده‌ای جمع شده‌اند و مدی ساخته‌اند به اسم &lt;a title="Ergoemacs official page" href="http://ergoemacs.org/index.html" target="_blank"&gt;ergoemacs-mode&lt;/a&gt; که هدفش حل مشکلات ذکر شده در مقدمهٔ بالاست. نتیجه‌، از عکس زیر معلوم است:&lt;/p&gt;
&lt;p&gt;&lt;img class=" " alt="ergoemacs-mode رو چینش workman" src="http://dl.dropbox.com/u/25017694/Blog-photos/ergoworkman.png" width="586" height="218"&gt; ergoemacs-mode رو چینش workman&lt;/p&gt;
&lt;p&gt;این عکس طبق چینش Workman تولید شده‌،‌ ولی جای دکمه‌ها در لایوت‌های دیگر‌، از جمله QWERTY و Colemak هم یک‌سان است. از نکات مهم مد نظر قرار داده شده در هنگام طراحی این Key binding‌ها می‌توان به موارد زیر اشاره کرد:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;  کلید‌های Home row بهترین‌ها هستند.&lt;/li&gt;
    &lt;li&gt;Alt خیلی بهتر از Ctrl است. Alt را باید با شصت گرفت که زورش خیلی بیشتر از انگشت کوچیکهٔ مخصوص Ctrl است!&lt;/li&gt;
    &lt;li&gt;به جای سرحرف اول دستورات‌، بهتر است به مکان دستورات هم خوانواده توجه شود. مثلا به مکان کلید‌های جاب‌جایی نگاه کنید. همین‌طور کلید‌های پاک کردن را ببینید!&lt;/li&gt;
    &lt;li&gt;و چند‌تای دیگر که آن‌قدرها هم مهم نیستند.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;نکته این‌جاست که نتیجهٔ کار خیلی عالی شده. آن‌قدر عالی که طی رد و بدل چند ایمیل‌ در&lt;a title="ergoemacs mailing list" href="https://groups.google.com/group/ergoemacs" target="_blank"&gt; لیست ایمیل&lt;/a&gt; پروژه‌، زبان فارسی را هم به این مجموعهٔ کامل اضافه کردیم که نتیجه‌اش را در زیر می‌بینید:&lt;/p&gt;
&lt;p&gt;&lt;img class=" " alt="ergoemacs-mode روی چینتش استاندارد فارسی" src="http://dl.dropbox.com/u/25017694/Blog-photos/ergofa.png" width="586" height="218"&gt; ergoemacs-mode روی چینتش استاندارد فارسی&lt;/p&gt;
&lt;p&gt;کیبورد استاندارد فارسی است که به صورت پیش‌فرض در لینوکس وجود دارد‌، ولی ویندوزی‌ها باید برنامهٔ متناسبش را پیدا و نصب کنند تا پشتیبانی شود D:&lt;/p&gt;
&lt;h5&gt;نصب&lt;/h5&gt;

&lt;p&gt;طبق&lt;a title="این ایمکس دوست داشتنی (مدیر بسته)" href="http://shahinism.com/blog/1392/01/08/%d8%a7%db%8c%d9%86-%d8%a7%db%8c%d9%85%da%a9%d8%b3-%d8%af%d9%88%d8%b3%d8%aa-%d8%af%d8%a7%d8%b4%d8%aa%d9%86%db%8c-%d9%85%d8%af%db%8c%d8%b1-%d8%a8%d8%b3%d8%aa%d9%87/" target="_blank"&gt; آن‌چه که در گذشته گفتم‌&lt;/a&gt;، ergoemacs-mode را از مدیر‌بسته‌های ایمکس نصب کنید و سپس تنظیمات زیر را به فایل ‎.emacs‌‌تان اضافه کنید:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;setenv&lt;/span&gt; &lt;span class="s"&gt;"ERGOEMACS_KEYBOARD_LAYOUT"&lt;/span&gt; &lt;span class="s"&gt;"workman"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'ergoemacs-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ergoemacs-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;در خط اول‌، اسم لایوت پیش‌فرض را اضافه می‌کنیم‌، و در خط‌های بعد ergoemacs-mode را فراخوانی و فعال می‌کنیم. بعد از یک Restart‌، با کلید‌های جدید روبرو می‌شوید D:&lt;/p&gt;
&lt;h5&gt;گرفتن کمک&lt;/h5&gt;

&lt;p&gt;خوب یک تغییر عادت است و احتمالا اول کار خیلی پیش می‌آید که دستورات قبلی‌تان را بزنید و نتیجه نگیرید! برای پیدا کردن کلید‌های جدید‌، کافیست C-h o را وارد کرده و سپس کلید قبلی‌تان را وارد کنید. این تابع بعد از بررسی کلید‌های قدیمی‌، هم‌تایان جدید‌شان را معرفی می‌کند.&lt;/p&gt;
&lt;h5&gt;دیگر سطوح&lt;/h5&gt;

&lt;p&gt;یکی از ویژگی‌های ergoemacs-mode‌، قابلیت تعیین سطحش است. سطوح مختلفی که با توجه به سلیقه‌های مختلف کاربران طراحی شده است. مثلا سطح guru کلید‌های فلش را برای تغییر موقعیت نشانگر می‌بندد و بعد از هر بار زدنشان‌، کلید‌های متناسب با سلیقهٔ ایمکس را نشان‌تان می‌دهد. و یا سطح master (فکر کنم) کلید backspace را خاموش می‌کند تا مجبور شوید از روش‌های پاک کردن کاراکتر ایمکس بهره بگیرید که سریع‌تر است. برای تنظیم این ویژگی‌ها کافیست سطح مورد نظر را انتخاب کنید (بعد از نصب ergoemacs از منو انتخابش کنید و ergoemacs variants را ببینید) و در دستور(setq ergoemacs-variant "SATH") آن را در جای SATH قرار دهید.&lt;/p&gt;
&lt;h5&gt;ergoemacs-extras&lt;/h5&gt;

&lt;p&gt;با فراخوانی این تابع در ایمکس‌، ergoemacs اقدام به ایجاد فایل‌های راهنمای کیبورد ergo در سطوح مختلف به فرمت svg می‌کند که می‌تواند خیلی کمک کننده باشد (عکس‌های موجود در این نوشته هم با همین روش ایجاد شده‌اند.). همین‌طور فایل‌هایی برای تطابق این کلید‌ها با محیط‌های دیگر از جمله bash ایجاد می‌شود که می‌توانند در ایجاد یک‌پارچگی برای محیط کار عالی باشند. (هنوز امتحانش نکرده‌ام ولی نتیجه‌اش را به زودی اطلاع می‌دهم.)&lt;/p&gt;
&lt;p&gt;این فایل‌ها در مسیر ‎~‎‍/.emacs/ergoemacs-extras در دسترسند که با توجه به سطوح مختلف پوشه‌بندی شده‌اند.&lt;/p&gt;
&lt;h5&gt;نتیجه&lt;/h5&gt;

&lt;p&gt;به نظر من نتیجهٔ کار فوق‌العاده قابل قبول است. راحتی استفاده از کلید‌های پر کاربرد و راحت‌تر از آن معکوس کردن اکثر دستورات با Shift فوق‌العاده کمک می‌کند. به طور پیش‌فرض برای خیلی کار‌ها مجبوریم در ایمکس از ارسال آرگومان به دستورات برای تغییر حالت‌شان استفاده کنیم که در Ergoemacs این کار عموما با Shift انجام می‌گیرد. مثلا C-f جستجوی رو به جلو انجام می‌دهد و C-S-f جستجوی رو به عقب!&lt;/p&gt;
&lt;p&gt;از طرفی کلید‌های C-a که در تمام محیط‌های دیگر برای انتخاب کل محتویات صفحه است و یا کلید‌های C-z, C-x, C-c, C-v, C-f, C-o, C-s, C-s-s , و خیلی کلید‌های دیگر که در محیط‌های دیگر از آن‌ها بهره می‌گیریم‌، به راحتی در این‌جا نیز جواب می‌دهند و کار ویرایش را فوق‌العاده راحت‌تر کرده‌اند. حتی با Ergoemacs دستور جدیدی اضافه شده که می‌توان با C-n یک صفحهٔ جدید ساخت‌، بدون این که نیاز به افزودن نامی به آن داشته باشیم.&lt;/p&gt;
&lt;p&gt;یک قابلیت جالب دیگر‌، استفاده از کلید‌های yanking‌ (کپی پیست در ایمکس) بدون Region (متن انتخاب شده) است. در این صورت‌، دستورات کل خط یا صفحه را تحت تاثیر قرار می‌دهند.&lt;/p&gt;
&lt;p&gt;در آینده بیشتر هم در مورد ergoemacs حرف می‌زنیم.&lt;/p&gt;</description><category>CUA-mode</category><category>Emacs</category><category>ergoemacs-mode</category><category>ایمکس</category><category>برنامه نویسی</category><category>دوره</category><category>نرم افزار</category><category>کدباز</category><guid>http://shahinism.github.io/posts/blog13920119yn-ymkhs-dwst-dshtny-ergoemacs-mode.html</guid><pubDate>Mon, 08 Apr 2013 19:29:09 GMT</pubDate></item><item><title>این ایمکس دوست داشتنی (تعریف کلید میانبر)</title><link>http://shahinism.github.io/posts/blog13920117yn-ymkhs-dwst-dshtny-tryf-khlyd-mynb.html</link><description>&lt;p&gt;&lt;/p&gt;&lt;p&gt;یکی از حیاتی‌ترین چیز‌هایی که در ایمکس لازم است بدانیم‌، چگونگی تعریف کلید میانبر برای توابع مختلف است. همان‌طور که احتمالا تا این‌جای قضیه متوجه شده‌اید‌، همهٔ کار‌هایی که در ایمکس انجام می‌دهیم‌، توابعی است که چه همراه خود ایمکس وجود دارند و چه با استفاده از بسته‌هایی که نصب می‌کنیم به آن اضافه می‌شوند. این توابع را می‌توان به صورت M-x FUNCTION_NAME RET  صدا کرد. اما در هنگام کار در ایمکس‌، سخت است که برای هر دستوری‌، مثل رفتن به خط بعد/قبل بیاییم و به این روش عمل کنیم. این است که برای هر تابع پر استفاده‌ای که داریم‌، یک کلید میانبر تعریف می‌کنیم.
لازم به ذکر است که برای اثبات بحث بالا‌، می‌توانید از تابع describe-key  همراه ایمکس استفاده کنید. کار این تابع این است که به شما بگوید که کلید میانبر مد نظر‌تان‌، چه تابعی را صدا می‌کند. برای نمونه‌، این دستور را وارد کنید M-x describe-key RET C-x C-f . همان‌طور که می‌بینید تابع مربوطه در یک پنجرهٔ جدید به نمایش در می‌آید. حالا برویم سر بحث تعریف کلید میانبر:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h5&gt;کلید میانبر سراسری&lt;/h5&gt;
&lt;p&gt;منظور از کلید میانبر سراسری‌، کلید‌هایی است که در همهٔ Major-mode‌ها (مد‌های اصلی) به راحتی عمل می‌کنند. برای نمونه C-n  یک کلید میانبر سراسری است. در تمامی مد‌ها اعم از ویرایش متن معمولی و یا کد برنامهٔ C‌، این کلید میانبر‌، نشانگر را به خط بعد منتقل می‌کند. برای تعریف چنین کلید میانبری می‌توانیم از یکی از دو روش زیر بهره ببریم:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-set-key&lt;/span&gt; &lt;span class="s"&gt;"KEY"&lt;/span&gt; &lt;span class="ss"&gt;'FUNCTION_NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;define-key&lt;/span&gt; &lt;span class="nv"&gt;global-map&lt;/span&gt; &lt;span class="s"&gt;"KEY"&lt;/span&gt; &lt;span class="ss"&gt;'FUNCTION_NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;برای کسب اطلاعات بیشتر در مورد هر کدام از این توابع می‌توانید از تابع describe-function  همراه ایمکس کمک بگیرید. برای مثال M-x describe-function RET global-set-key RET . یا از کلید میانبرش استفاده کنید C-h f . همین‌طور اگر نشان‌گرتان روی یک تابع ایمکس باشد‌، خود تابع می‌تواند آن را حدس بزند.&lt;/p&gt;
&lt;p&gt;تابع اول که تقریبا سر راست است. global-set-key  همان‌طور که از نامش پیداست‌، یک کلید سراسری به اسم KEY که می‌تواند ترکیبی به صورت&lt;span class="lang:default decode:true  crayon-inline"&gt;"‎\C-c f" باشد‌، برای تابع FUNCTION_NAME تعریف می‌کند. همان‌طور که احتمالا متوجه شده‌اید‌، من برای نشان‌دادن Ctrl  در کلید میانبرم از ‎‎\C  استفاده کردم. همین‌طور برای Alt  باید از ‎\M  استفاده کنم. تعریف کلید به این صورت شاید کمی خسته کننده و نا خوانا به نظر بیاید. برای راحتی بیشتر می‌توان از تابع kbd  استفاده کرد. برای نمونه طبق مثالمان‌، همچین چیزی خواهیم داشت:&lt;/span&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-c f"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'FUNCTION_NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;خود تابع kbd  می‌داند که چطور این کلید را ترجمه کند. برای کسب اطلاعات بیشتر در این مورد می‌توانید باز هم از C-h f  یا تابع متناظرش استفاده کنید. باور کنید که اطلاعات خیلی بهتری به دست می‌آورید ;-)&lt;/p&gt;
&lt;p&gt;در تابع دوم ما کار مشابهی را انجام دادیم‌، با این تفاوت که تابع define-key  نیاز به این دارد که بداند کلید میانبر را در کدام محیط اجرا کند. به عبارت دیگر‌، کلید میانبر در کدام Mode در دسترس باشد. از آن‌جایی که قصد ما تعریف کلید میانبر سراسری است به محیط global-map  اشاره می‌کنیم که به define-key  می‌فهماند کلید باید در همه جا در دسترس باشد.&lt;/p&gt;
&lt;h5&gt;کلید میابر محدود به مد خاص&lt;/h5&gt;

&lt;p&gt;با این توضیح آخر بخش قبل‌، فکر کنم موضوع کاملا روشن شده باشد. کافیست برای تعریف میانبر برای یک مد خاص‌، محیط مربوط به آن مد را به define-key  نشان دهیم. برای مثال اگر می‌خواهیم که کلید میانبر تنها در محیط متنی در دسترس باشد‌، به جای global-map  از text-mode-map  استفاده می‌کنیم. محیط‌های مربوط به هر مد اصلی‌، عموما به صورت mode-name-map  شناسایی می‌شوند و در هنگام تعریف کلید‌، کافیست نام map مد مورد نظر‌تان را کشف کنید ;-)&lt;/p&gt;</description><category>define-key</category><category>Emacs</category><category>global-map</category><category>global-set-key</category><category>text-mode-map</category><category>ایمکس</category><category>برنامه نویسی</category><category>نرم افزار</category><category>کدباز</category><guid>http://shahinism.github.io/posts/blog13920117yn-ymkhs-dwst-dshtny-tryf-khlyd-mynb.html</guid><pubDate>Sat, 06 Apr 2013 09:06:38 GMT</pubDate></item><item><title>چینش (لایوت) Workman و داستان مهاجرتم</title><link>http://shahinism.github.io/posts/blog13920114chynsh-lywt-workman-w-dstn-mhjrtm.html</link><description>&lt;p&gt;&lt;/p&gt;&lt;p&gt;اصلا مهم نیست که از چه کامپیوتری استفاده می‌کنید‌، Mac, Linux‌، Windows, ارزان‌قیمت‌، گران‌قیمت‌، کوچک‌‌ یا بزرگ. همچنین اصلا مهم نیست که برای چه کاری پشت کامپیوتر می‌نشینید‌، برنامه‌نویسی‌، تحقیقاتی‌، نوشتن‌، بازی‌، وب‌گردی و …! در همهٔ این حالات‌، اصلی‌ترین رابط شما و کامپیوتر‌، کیبورد زیر دست‌تان است. کیبوردی که در تمام این حالات‌، هم‌شکل است. شکلی که صد و اندی سال پیش طراحی شده و هدف از طراحی‌اش بسیار بسیار متفاوت با استفاده‌هایی است که امروز‌ها از آن می‌شود.
طراحی چینش صفحه کلید QWERTY زیر دست‌تان‌، به دوران ماشین‌های تایپ بر می‌گردد. ماشین‌هایی مکانیکی که بعد از فشردن هر دکمه روی‌شان‌، پایهٔ متصل به حرف تایپ شده‌، به روی صفحهٔ کاغذ می‌خورد و حرف مورد نظر چاپ می‌شد. اما مشکل این‌جا بود که حروفی وجود داشتند که نسبت به بقیه‌، استفادهٔ بیشتری در کلمات داشتند و این یعنی کلمات بیشتری بودند که با ترکیب آن‌ها ساخته می‌شدند. با این وصف‌، نزدیکی مکانیکی حروف پر استفاده‌، در آن ابعاد کوچک و در سرعت‌های بالا‌، مشکل آفرین بود! پایه‌ها به هم گیر می‌کردند.&lt;/p&gt;
&lt;p&gt;این شد که در طراحی QWERTY سعی شد که پایه‌های حروف پر استفاده دور‌تر از هم قرار گیرند و در نتیجه‌، کلید‌های مربوطه‌شان به دلیل محدودیت سخت‌افزاری باید دور‌تر از هم قرار می‌گرفت. در نتیجه چینشی به وجود آمد که بیش از صد سال مورد استفاده قرار گرفت و تقریبا به یک استاندارد تبدیل شد. استانداردی که هیچ توجهی به نیاز‌های جدید کاربرانش نمی‌کند.&lt;/p&gt;
&lt;p&gt;در قرن ۲۱‌، دیگر این چینش در ابزاری محدود به سخت‌افزار مورد استفاده قرار نمی‌گیرد. در عوض حالا می‌توان چینشی طراحی کرد که بیشتر به نیاز کاربر بیاید. چینشی که در آن کاربر مجبور به جابجایی زیاد انگشتانش نباشد. این جابجایی‌ها شاید به نظر کوچک بیایند‌، ولی در تایپ‌های طولانی مدت شما با همین قدم‌های کوچک‌، کیلو‌متر‌ها مسافت را طی کرده‌اید! باور نمی‌کنید؟ کافیست فاصلهٔ بین هر دو دکمهٔ کنار هم کیبورد را چیزی در حدود ۲ سانتی‌متر فرض کنیم. آن وقت برای تایپ همین پاراگراف حاضر‌، تا الان من حداقل ۹۵۰ سانتی‌متر (۴۷۵ کاراکتر) و آن هم تنها در صورتی که تمام کاراکتر‌هایم در کنار هم باشند (در کنار هشت انگشت تایپم) مصافت طی کرده‌ام! (این حداقل خیلی خیلی ایده‌آل است و فکر نمی‌کنم هرگز اتفاق بیافتد، حداقل در چینش فارسی‌! ولی فکر کنم مثال مناسبی برای نشان دادن عمق موضوع است.)&lt;/p&gt;
&lt;p&gt;از قرار این موضوع تا 1930 و انتشار چینش Dvorak چندان جدی گرفته نشد. چینشی که تنها سعی می‌کرد‌، قابل قبول‌تر از QWERTY باشد. تغییراتش نسبت به آن زیاد نبودند‌، ولی نتیجهٔ کاربر پسند‌تری داشتند. اما به نظرم‌، پرجرات‌ترین تغییر در این چینش سنتی‌، توسط &lt;a title="Colemak official" href="http://colemak.com" target="_blank"&gt;Colemak&lt;/a&gt; ایجاد شد! 2006! ۷۶ سال طول کشید تا این نیاز عمیقا درک شود! البته بودند چینش‌هایی که سعی در بهبود QWERTY داشته باشند‌، اما Colemak متفاوت بود. چینشی که در آن سعی شد‌، پر استفاده‌ترین کاراکتر‌ها‌، در ردیف وسطی قرار گیرند (ردیفی که در روش تایپ استاندارد‌، انگشتان باید روی آن‌ها قرار گیرند و در اصطلاح به آن‌ها Home row می‌گویند). نتیجهٔ کار فوق‌العاده بهتر شده بود. جادی عزیز‌، خیلی وقت پیش در مورد Colemak و بهبود‌هایش نسبت به &lt;a title="کولمک در وبلاگ جادی" href="http://jadi.net/2009/02/%d8%b5%d9%81%d8%ad%d9%87-%da%a9%d9%84%db%8c%d8%af-%da%a9%d9%88%d9%84%d9%85%d8%a7%da%a9/" target="_blank"&gt;QWERTY نوشت&lt;/a&gt; که پیشنهاد می‌کنم بخوانید.&lt;/p&gt;
&lt;p&gt;و اما &lt;a title="Workman official" href="http://www.workmanlayout.com/blog/" target="_blank"&gt;Workman&lt;/a&gt;! در حقیقت چینش مورد بحث ما‌، سعی کرده نسخهٔ بهبود یافتهٔ Colemak باشد. خیلی از ایده‌ها را از آن به ارث برده و شباهت خیلی خیلی کمتری نسبت به QWERTY دارد. طراح Workman‌، این‌طور فکر می‌کرد که همیشه استفاده از Home row بهترین جا برای قرار گرفتن حروف نیست. مثلا نکته این‌جا بود که حرکت طبیعی انگشتان‌، کلید I در صفحه‌کلید QWERTY را‌، راحت‌تر از H تایپ می‌کنند (انگشتان به بالا یا پایین‌، راحت‌تر حرکت می‌کنند تا به چپ و راست!). این بود که نقشه‌ای به صورت زیر طراحی کرد که میزان راحتی دسترسی نسبت به کلید‌ها را در آن نمره دهی کرده بود:&lt;/p&gt;
&lt;p&gt;&lt;img class=" " alt="امتیاز‌دهی به کلید‌های کیبورد بر اساس میزان راحتی در دسترسی" src="http://dl.dropbox.com/u/25017694/Blog-photos/keyboard_graded1.png" width="499" height="166"&gt; امتیاز‌دهی به کلید‌های کیبورد بر اساس میزان راحتی در دسترسی&lt;/p&gt;
&lt;p&gt;پس ار آن تنها کافی بود که کاراکتر‌ها را نسبت به میزان استفاده‌اش در این خانه‌ها جا دهد. نتیجهٔ کار و امتیاز‌های کسب شده در مقایسه با دیگر چینش‌ها چشم‌گیر بود! مثلا در این‌جا میزان استفاده از دو ستون وسط در چند لایوت مختلف را می‌بینیم (ستون‌هایی که نیاز به حرکت انگشتان به چپ و راست دارند که باعث کشش عضلانی انگشتان می‌شود):&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;ul style="direction: rtl; text-align: left; list-style: none outside none;"&gt;&lt;li&gt;QWERTY: 22%&lt;/li&gt;
    &lt;li&gt;Dvorak: 14%&lt;/li&gt;
    &lt;li&gt;Colemak: 12%&lt;/li&gt;
    &lt;li&gt;Workman: 6%&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;یا مثالی نزدیک‌تر به نیاز‌مان. میزان جابجایی انگشت‌ها:&lt;/p&gt;
&lt;p&gt;&lt;img class=" " alt="نتیجهٔ تست تایپ در چهار چینش مختلف" src="http://dl.dropbox.com/u/25017694/Blog-photos/don-quixote.png" width="559" height="404"&gt; نتیجهٔ تست تایپ در چهار چینش مختلف&lt;/p&gt;
&lt;p&gt;در این مثال تایپ کتاب &lt;a title="Don Quixote on wikipedia" href="http://en.wikipedia.org/wiki/Don_Quixote" target="_blank"&gt;Don Quixote&lt;/a&gt; با لایوت‌های مختلف شبیه سازی شده. همان‌طور که می‌بینید Colemak مصافت کمتری نسبت به QWERTY و Dvorak را طی کرده. اما Workman از آن‌ هم کمتر است. ۶۹۶ متر! شاید فکر کنید که این خیلی کم به نظر می‌آید. ولی بیایید به روش قبلی‌مان حسابش کنیم. ۶۹۶ متر = ۶۹۶۰۰ سانتی‌متر = ۳۴۰۰۰ دکمه (با احتساب فاصلهٔ تقریبا ۲ سانتی‌متری بین هر دو دکمهٔ کنار هم). یعنی با Workman سی و چهار هزار دکمهٔ کمتر فشار داده شده.&lt;/p&gt;
&lt;p&gt;البته بهبود این چینش به Workman ختم نمی‌شود. چینش‌های دیگری هم هستند که خرده‌هایی به این لایوت گرفته‌اند و سعی می‌کنند به روش خود آن را بهبود ببخشند. خوبی این همه چینش جدید این است که می‌توان با دست باز‌تری انتخاب کرد و نتیجهٔ مطلوب‌تری گرفت. همین‌جا هم بگویم که اصلا تایید نمی‌کنم که Workman بهترین چینش ممکن است‌! این چینش اولین و آخرین چینش انتخابی من برای مهاجرت است!&lt;/p&gt;
&lt;h5&gt;قضیهٔ مهاجرت من به Workman&lt;/h5&gt;

&lt;p&gt;دو سال و خرده‌ای پیش بود که بعد از هشت نه سال کاربر کامپیوتر بودن‌، تصمیم گرفتم که تایپ استاندارد را یاد بگیرم و هی در هنگام تایپ به دستانم نگاه نکنم (می‌دانم خیلی دیر بود). حقیقتش برایم خیلی سخت بود. حتی چند باری قبلا تلاش کرده بودم و دلزده رهایش کرده بودم. مشکل این‌جا بود که بیش از حد سعی می‌کردم به حافظه تکیه کنم. این بود که بعد از یک استراحت چند هفته‌ای‌، دوباره شروع می‌کردم و نتیجهٔ بهتری می‌گرفتم. تا این که خلاصه به سرعت تایپ معقولی رسیدم.&lt;/p&gt;
&lt;p&gt;سوئیچ به فارسی فوق‌العاده آسان‌تر بود. تنها کافی بود که یاد بگیرم جای کدام حرف انگلیسی‌، چه تایپ کنم. بعد از معرفی Colemak توسط جادی هم سعی کردم که آن را بچشم‌، ولی به دلم ننشست. شاید به خاطر این که آن موقع با QWERTY هم آشنا نبودم. ولی نه‌، من Workman را هم تنها به خاطر تنوعش انتخاب کردم!&lt;/p&gt;
&lt;p&gt;این یعنی این که اصلا فکر نکنید که این اطلاعاتی که در بالا نوشتم‌‌، دلیل مهاجرتم به Workman بوده باشد. این چینش هر چقدر هم خوب باشد‌، بسیاری از برنامه‌های وابسته به کیبوردم را مثل &lt;a title="تجربهٔ کار با i3 یک رقیب قدر‌!" href="http://shahinism.com/blog/1391/04/15/%d8%aa%d8%ac%d8%b1%d8%a8%d9%87%d9%94-%da%a9%d8%a7%d8%b1-%d8%a8%d8%a7-i3-%db%8c%da%a9-%d8%b1%d8%ba%db%8c%d8%a8-%d9%82%d8%af%d8%b1%e2%80%8c/" target="_blank"&gt;i3&lt;/a&gt;, &lt;a title="کنترل کامل فایرفاکس با کیبورد (Pentadactyl, Vimperator, Firemacs)" href="http://shahinism.com/blog/1391/01/05/%da%a9%d9%86%d8%aa%d8%b1%d9%84-%da%a9%d8%a7%d9%85%d9%84-%d9%81%d8%a7%db%8c%d8%b1%d9%81%d8%a7%da%a9%d8%b3-%d8%a8%d8%a7-%da%a9%db%8c%d8%a8%d9%88%d8%b1%d8%af-pentadactyl-vimperator-firemacs/" target="_blank"&gt;pentadactyl&lt;/a&gt; و از همه مهم‌تر &lt;a title="چگونه ایمکس‌مان را تربیت کنیم (قسمت اول)" href="http://shahinism.com/blog/1391/04/23/%da%86%da%af%d9%88%d9%86%d9%87-%d8%a7%db%8c%d9%85%da%a9%d8%b3%e2%80%8c%d9%85%d8%a7%d9%86-%d8%b1%d8%a7-%d8%aa%d8%b1%d8%a8%db%8c%d8%aa-%da%a9%d9%86%db%8c%d9%85-%d9%82%d8%b3%d9%85%d8%aa-%d8%a7%d9%88/" target="_blank"&gt;Emacs&lt;/a&gt; را تحت تاثیر قرار می‌دهد! تغییر کلید‌های یک مرحله‌ای را می‌شود تحمل کرد‌، ولی با تغییر به Workman یک دستور سادهٔ ایمکس مثل C-x C-f به کابوس تبدیل می‌شود! (به زودی این مشکل را هم در ایمکس حل خواهیم کرد!)&lt;/p&gt;
&lt;p&gt;ولی حدودا بیست روز پیش و فقط و فقط‌، برای ایجاد تنوع تصمیم به تغییر چینش کیبورد گرفتم. بعد از یک جستجوی چند ساعته هم تصمیم نهایی‌ام شد Workman. قبل از آن هم یک تست از سرعت تایپ QWERTYام گرفتم محض یادگاری که نتیجه‌اش شد ۲۰۴ کاراکتر در دقیقه و با درستی ۹۹.۳ درصد! و انتقال شروع شد!&lt;/p&gt;
&lt;p&gt;یک کابوس به تمام معنا! مشکل را تازه درک کرده بودم. در هنگام تایپ اصلا به حافظه به آن معنی که می‌شناختم نیازی نبود. نیاز اصلی حافظهٔ عضلانی است. و QWERTY خیلی محکم در این حافظه ثبت شده بود. تا موقعی که شش دانگ حواسم جمع تایپ کردن بود مشکلی نبود. ولی تا بیخیال حافظه‌ام می‌شدم‌، انگشتانم به QWERTY سوئیچ می‌کردند. جدال با این حافظه سخت بود. شاید بخندید‌، ولی دو سه روز اول‌، سردرد شدیدی گرفتم! از آن مهم‌تر این که به صورت ناخودآگاه نکته بین‌تر شده بودم. این است که نتیجه گرفتم تغییر عادات‌، خیلی خیلی به درد بخور است!&lt;/p&gt;
&lt;p&gt;خلاصهٔ کلام‌، بعد از ۲۰ روز‌، الان دیگر نمی‌توانم به QWERTY تایپ کنم! کاملا پاک شده. ولی چه باک‌، هر وقت به Workman دسترسی نداشتم‌، به دستانم نگاه می‌کنم و تایپ می‌کنم D:. جالبی‌اش این‌جاست که خطای تایپ فارسی‌ام هم زیاد شده بود. یادتان هست که گفته بودم که برای تایپ فارسی کاراکتر‌ها را با همتایان انگلیسی‌شان لینک کرده بودم؟ فکر کنم مشکل از همان‌جا آب می‌خورد.&lt;/p&gt;
&lt;p&gt;ولی الان نتیجه به نظرم قابل قبول شده! سرعت تایپم به ۲۲۶ کاراکتر در دقیقه رسیده! این در حالی است که درستی کاراکتر‌ها به ۹۴ درصد نزول پیدا کرده. یک حساب سرسری یعنی این که اگر میزان درستی کاراکتر‌ها بهبود ببخشم‌، نتیجهٔ سرعت تایپ از این هم بیشتر خواهد بود که به نظرم خیلی جذاب است.&lt;/p&gt;</description><category>Colemak</category><category>Dvorak</category><category>Layout</category><category>QWERTY</category><category>Workman</category><category>ایمکس</category><category>بررسی</category><category>برنامه نویسی</category><category>نرم افزار</category><guid>http://shahinism.github.io/posts/blog13920114chynsh-lywt-workman-w-dstn-mhjrtm.html</guid><pubDate>Wed, 03 Apr 2013 11:58:57 GMT</pubDate></item><item><title>این ایمکس دوست داشتنی (تنظیمات ظاهری)</title><link>http://shahinism.github.io/posts/blog13920112yn-ymkhs-dwst-dshtny-tnzymt-zhry.html</link><description>&lt;p&gt;&lt;/p&gt;&lt;p&gt;بعد از تنظیمات مربوط به مدیر بسته‌، نوبت به تنظیمات ظاهر اصلی ایمکس می‌رسد. ظاهر اولیهٔ رابط گرافیکی‌، فوق‌العاده بی‌روح و سفید است که برای کار‌های طولانی مدت (شامل خیره شدن زیاد به صفحه) اصلا مناسب نیست. همینطور شامل اجزایی نظیر Scroll-bar و یا Toolbar است که با وجود کلید‌های میانبر مناسب که مستقیما از فلسفهٔ ایمکس پیروی می‌کنند‌، بودنشان جز جا‌گیر بودن‌، فایدهٔ دیگری ندارد. از طرفی‌، با استفاده از توابع همراه ایمکس می‌توان ظاهر فوق‌العاده مدرن‌تری نسبت به ظاهر اولیه فراهم آورد که در این پست قصد داریم در مورد‌شان بحث کنیم. تنها دو نکته باقی می‌ماند که لازم می‌دانم این‌جا ذکر کنم:
&lt;/p&gt;&lt;ol&gt;&lt;li&gt;  این پست احتمالا آخرین پست (فعلا) این‌چنین بزرگ و ترکیبی از این سری است. همان‌طور که در مقدمه گفتم‌، قرار است در این سری قدم به قدم با ایمکس آشنا شویم و در هر پست (هر چند کوتاه) یک ویژگی را به طور کامل بررسی کنیم. اما از آن‌جا که لازم است برای شروع کار‌، کمی از ایمکس اولیه دور شویم‌، لازم دانستم که چند پست ترکیبی نیز داشته باشیم.&lt;/li&gt;
    &lt;li&gt;دستکاری ظاهری ایمکس در همین پست پایان نمی‌یابد. در آینده ویژگی‌های جالب‌تری هم به این رابط کاربری می‌افزاییم. این تنها یک شروع است.&lt;/li&gt;
&lt;/ol&gt;&lt;h5&gt;پاک کردن اجزای اضافه&lt;/h5&gt;
&lt;p&gt;برای پاک کردن Scroll-bar و Toolbar تنها کافیست توابع‌شان را با یک آرگومان منفی صدا بزنیم. به صورت زیر:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;tool-bar-mode&lt;/span&gt; &lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;scroll-bar-mode&lt;/span&gt; &lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;همینطور می‌توان با اختصاص دادن آرگومان منفی به تابعmenu-bar-mode منوی بالای فریم ایمکس را هم حذف کرد. ولی از آن‌جایی که تازه کاریم و هنوز خیلی چیز‌ها هستند که می‌توان با گردش در منو‌ها یاد گرفت‌، از این کار صرف نظر می‌کنیم. خوبی این منوبار این است که عموما‌، بسته‌های بزرگ ایمکس‌، یک منوی اختصاصی برای خودشان آماده می‌کنند و این خیلی می‌تواند در اوایل آشنایی با یک بسته کمک کننده باشد.&lt;/p&gt;
&lt;h5&gt;رنگ‌بندی پنجره‌ها&lt;/h5&gt;

&lt;p&gt;یکی از ساده‌ترین راه‌ها برای تعیین رنگ‌بندی پنجرهٔ ایمکس‌، استفاده از قالب‌های آماده است. خوشبختانه در کنار قالب‌های ساده و ساخته شده از روی علاقهٔ شخصی‌، قالب‌هایی نظیر &lt;a title="Solarized official" href="http://ethanschoonover.com/solarized" target="_blank"&gt;Solarized&lt;/a&gt; و &lt;a title="Zenburn official" href="http://slinky.imukuppi.org/zenburnpage/" target="_blank"&gt;Zenburn&lt;/a&gt; که اهداف خاصی را از رنگ‌بندی‌شان دنبال می‌کنند نیز وجود دارند. برای نصب‌شان تنها کافیست دستور متناسب با نام بسته‌شان را به صورت زیر وارد کنید:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;RET&lt;/span&gt; &lt;span class="n"&gt;solarized&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;theme&lt;/span&gt; &lt;span class="n"&gt;RET&lt;/span&gt;
&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;RET&lt;/span&gt; &lt;span class="n"&gt;zenburn&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;theme&lt;/span&gt; &lt;span class="n"&gt;RET&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;جدای از این دستورات با جستجو در package-list-packages می‌توانید هم به این پوسته‌ها و هم به خیل عظیم پوسته‌های آمادهٔ ایمکس دسترسی داشته باشید که تست کردن‌شان خالی از لطف نیست. پس از نصب پوستهٔ مورد نظر‌، کافیست با استفاده از دستور M-x load-theme THEME_NAME آن را فعال کنید. البته از آن‌جایی که دل‌تان نمی‌خواهد بعد از هر بار لود شدن ایمکس‌، مجبور به اجرای این دستور باشید‌، کافیست‌ دستور زیر را در ‎.emacs‌تان قرار دهید:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;load-theme&lt;/span&gt; &lt;span class="ss"&gt;'zenburn&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;توجه داشته باشید که پوستهٔ Solarized دارای دو حالت تیره و روشن است‌، که شما هم باید در هنگام وارد کردن نامش‌، به این نکته توجه کنید.&lt;/p&gt;
&lt;h5&gt;رنگ‌بندی با استفاده از ‎.Xresources&lt;/h5&gt;

&lt;p&gt;روش دیگر‌ تعیین رنگ‌بندی پنجرهٔ ایمکس‌، با استفاده از فایل ‎.Xresources سیستم‌هایی است که از X برای محیط گرافیکی‌شان استفاده می‌کنند. روش کار با این فایل را در &lt;a title="عشق بازی با ترمینال لینوکس‌ (urxvt, رنگ‌آمیزی و کانفیگش)" href="http://shahinism.com/blog/1391/08/04/%d8%b9%d8%b4%d9%82-%d8%a8%d8%a7%d8%b2%db%8c-%d8%a8%d8%a7-%d8%aa%d8%b1%d9%85%db%8c%d9%86%d8%a7%d9%84-%d9%84%db%8c%d9%86%d9%88%da%a9%d8%b3%e2%80%8c-urxvt-%d8%b1%d9%86%da%af%e2%80%8c%d8%a2%d9%85%db%8c/" target="_blank"&gt;این پست &lt;/a&gt;توضیح دادم و همینطور ابزار &lt;a title="4bit" href="http://ciembor.github.com/4bit/" target="_blank"&gt;4bit&lt;/a&gt; را برای ایجاد رنگ‌های متناسب با هم معرفی کردم. من خودم فعلا از این روش استفاده می‌کنم که دو دلیل عمده دارد:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;  رنگ‌بندی برنامه‌هایی که از این سیستم استفاده می‌کنند یک پارچه می‌شوند. هم اکنون پوستهٔ استفاده شده برای ترمینال urxvt و ایمکس‌ام کاملا شبیه به هم است که خیلی خوب است.&lt;/li&gt;
    &lt;li&gt;پوستهٔ متناسب با سلیقه‌ام را در پوسته‌های آمادهٔ ایمکس پیدا نکردم. Zenburn عالی بود‌، ولی رنگ‌هایش چون چشم‌هایم را خسته نمی‌کردند‌، خودم خسته می‌شدم D: و Solarized هم درخشندگی لازم را برای جلب توجهم نداشت. من عادت به نگاه کردن سر سری نوشته‌ها قبل از خواندن‌شان دارم و برجسته بودن (درخشندگی) رنگ‌های استفاده شده در متن می‌تواند به پیدا کردن نکات جالب توجه کمکم کند.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;پوستهٔ ‎.Xresources‌ای که من استفاده می‌کنم را می‌توانید در&lt;a title="My .Xresources configuration on gist" href="https://gist.github.com/shahinism/5283609" target="_blank"&gt; این gist&lt;/a&gt; پیدا کنید.&lt;/p&gt;
&lt;h5&gt;تنظیم Font&lt;/h5&gt;

&lt;p&gt;بخش حیاتی قضیه است. حداقل برای من یکی‌، جدای از رنگ‌بندی برجسته‌، فونت و یک‌پارچگی‌اش در متن‌، اهمیت زیادی دارد. فونت پیش‌فرض ایمکس‌، اصلا دوست‌داشتنی نیست. اما تنها فونتی است که دیده‌ام در همه حالتی به راحتی جواب می‌دهد. ما هم که به جبر جغرافیا مجبور به استفاده از دو خط و زبانیم‌، باید چاره‌ای برای این قضیه پیدا کنیم. خوشبختانه‌، طی&lt;a title="Emacs font in stackexchange" href="http://stackoverflow.com/questions/11012627/emacs-font-for-western-and-other-like-rtl" target="_blank"&gt; یک پرسش و پاسخ&lt;/a&gt; بین دو دوست عزیزم (&lt;a title="وبلاگ افاضاتی" href="http://blog.efazati.org/" target="_blank"&gt;محمد افاضاتی&lt;/a&gt; و &lt;a title="یادداشت‌های بیت نیم‌سوز" href="http://cyberrabbits.net/" target="_blank"&gt;فرود&lt;/a&gt;)‌، فرود این مشکل را به شیوهٔ جالبی هک (حل) کرده که در ادامه به آن می‌پردازیم.&lt;/p&gt;
&lt;p&gt;من برای فونت پیش‌فرض از &lt;a title="Inconsolata on wikipedia" href="http://en.wikipedia.org/wiki/Inconsolata" target="_blank"&gt;Inconsolata&lt;/a&gt; استفاده می‌کنم که به نظرم برای کد نوشتن عالی است. همین‌طور برای کاراکتر‌های فارسی‌، از فونت tahoma استفاده می‌کنم. بله‌، بله می‌دانم که الان می‌گویید که &lt;a title="CSS Persian‌، یک ایدهٔ ساده ولی خیلی مفید" href="http://shahinism.com/blog/1391/06/10/css-persian%e2%80%8c%d8%8c-%db%8c%da%a9-%d8%a7%db%8c%d8%af%d9%87%d9%94-%d8%b3%d8%a7%d8%af%d9%87-%d9%88%d9%84%db%8c-%d8%ae%db%8c%d9%84%db%8c-%d9%85%d9%81%db%8c%d8%af/" target="_blank"&gt;قبلا&lt;/a&gt; گفته‌ای tahoma فیلان‌، tahoma بیسار! بله‌، هنوز هم می‌گویم. ولی tahoma تنها فونت فارسی‌ای است که در اندازهٔ کوچک (8pt) ‌این‌قدر خوب قابل خواندن است و از قرار با فونت‌های مناسب کد‌نویسی‌، هم‌نشینی خوبی دارد! (باشد که به غیرت آن‌ها که زور طراحی فونت مناسب را دارند بر بخورد و دست به کار شوند) برای اعمال فونت‌ها به صورت زیر عمل می‌کنیم:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;set-default-font&lt;/span&gt; &lt;span class="s"&gt;"Inconsolata-10"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;



&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;set-fontset-font&lt;/span&gt;
   &lt;span class="s"&gt;"fontset-default"&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cons&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;decode-char&lt;/span&gt; &lt;span class="ss"&gt;'ucs&lt;/span&gt; &lt;span class="mh"&gt;#x0600&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;decode-char&lt;/span&gt; &lt;span class="ss"&gt;'ucs&lt;/span&gt; &lt;span class="mh"&gt;#x06ff&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;; arabic&lt;/span&gt;
   &lt;span class="s"&gt;"Tahoma-8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;در خط اول‌، همان‌طور که معلوم است‌، فونت Inconsolata با سایز 10 را به عنوان فونت پیش‌فرض قرار دادیم. در ادامهٔ قضیه هم برای محدوده کاراکتر‌های عربی یونیکد‌، فونت Tahoma با سایز 8 را برای نمایش انتخاب کردیم. نتیجهٔ کار‌، فوق‌العاده قابل قبول است.&lt;/p&gt;
&lt;h5&gt;برجسته کردن خط حاضر و شماره خط‌ها&lt;/h5&gt;

&lt;p&gt;یکی از ویژگی‌های به درد بخور ویرایشگر‌های جدید‌، شمارهٔ خط‌هاست که در سمت چپ‌شان نوشته می‌شود. در حین توسعهٔ برنامه‌های پایتونی‌، مزیت این شماره‌ها کاملا مشهود است. این است که با اضافه کردن این دستور به ‎.emacs آن‌ها را به ایمکس‌مان اضافه می‌کنیم:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-linum-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;همینطور یکی دیگر از ویژگی‌هایی که خیلی به دردمان می‌خورد این است که خطی که در حال حاضر نشانگر روی آن قرار دارد‌، به صورت برجسته‌تر نمایش داده شود. این کار به چشم در هنگام جستجوی مکان فعلی نمایش‌گر‌، فوق‌العاده کمک می‌کند. برای این کار‌، تکه کد زیر را هم اضافه می‌کنیم:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-hl-line-mode&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;set-face-background&lt;/span&gt; &lt;span class="ss"&gt;'hl-line&lt;/span&gt; &lt;span class="s"&gt;"#000"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;در خط اول اعلام می‌کنیم که ویژگی برجسته کردن خط حاضر را فعال کن. بسیاری از قالب‌های آماده‌، مقداری برای رنگ پس زمینهٔ این خط تعیین می‌کنند. اما از آن‌جایی که من با استفاده از ‎.Xresources رنگ‌بندی قالب را تعیین کرده‌ام‌، باید این کار را به صورت دستی انجام دهم (خط دوم). نکته این‌جاست که ممکن است قالب‌تان رنگ خوبی برای‌تان نگذاشته باشد که باز هم می‌توانید با همین خط دوم ترتیبش را بدهید.&lt;/p&gt;</description><category>elisp</category><category>Emacs</category><category>Inconsolata</category><category>ایمکس</category><category>دوره</category><category>فونت</category><category>نرم افزار</category><guid>http://shahinism.github.io/posts/blog13920112yn-ymkhs-dwst-dshtny-tnzymt-zhry.html</guid><pubDate>Mon, 01 Apr 2013 11:00:26 GMT</pubDate></item></channel></rss>